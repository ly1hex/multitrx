

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Dec 25 21:36:45 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    71  0000                     
    72                           	psect	idataCOMRAM
    73  0029CA                     __pidataCOMRAM:
    74                           	opt stack 0
    75                           
    76                           ;initializer for nexaDecode@state
    77  0029CA  01                 	db	1
    78  0000                     _ADCON0	set	4034
    79  0000                     _ADCON0bits	set	4034
    80  0000                     _ADCON1	set	4033
    81  0000                     _ADCON2	set	4032
    82  0000                     _ADRESH	set	4036
    83  0000                     _ADRESL	set	4035
    84  0000                     _ANSEL	set	3966
    85  0000                     _ANSELH	set	3967
    86  0000                     _BAUDCON	set	4024
    87  0000                     _EEADR	set	4009
    88  0000                     _EEADRH	set	4010
    89  0000                     _EECON1bits	set	4006
    90  0000                     _EECON2	set	4007
    91  0000                     _EEDATA	set	4008
    92  0000                     _INTCON	set	4082
    93  0000                     _INTCON2bits	set	4081
    94  0000                     _INTCON3bits	set	4080
    95  0000                     _INTCONbits	set	4082
    96  0000                     _OSCCON	set	4051
    97  0000                     _OSCTUNE	set	3995
    98  0000                     _PIE1	set	3997
    99  0000                     _PORTB	set	3969
   100  0000                     _RCREG	set	4014
   101  0000                     _RCSTA	set	4011
   102  0000                     _SPBRG	set	4015
   103  0000                     _T0CON	set	4053
   104  0000                     _T1CON	set	4045
   105  0000                     _T3CON	set	4017
   106  0000                     _TMR0H	set	4055
   107  0000                     _TMR0L	set	4054
   108  0000                     _TMR1H	set	4047
   109  0000                     _TMR1L	set	4046
   110  0000                     _TMR3H	set	4019
   111  0000                     _TMR3L	set	4018
   112  0000                     _TRISA	set	3986
   113  0000                     _TRISB	set	3987
   114  0000                     _TRISC	set	3988
   115  0000                     _TXREG	set	4013
   116  0000                     _TXSTA	set	4012
   117  0000                     _WDTCON	set	4049
   118  0000                     _CREN	set	32092
   119  0000                     _GIE	set	32663
   120  0000                     _LATB2	set	31826
   121  0000                     _LATB3	set	31827
   122  0000                     _LATC4	set	31836
   123  0000                     _LATC5	set	31837
   124  0000                     _OERR	set	32089
   125  0000                     _RCIF	set	31989
   126  0000                     _TMR0IF	set	32658
   127  0000                     _TMR1IF	set	31984
   128  0000                     _TMR1ON	set	32360
   129  0000                     _TMR3IF	set	32009
   130  0000                     _TMR3ON	set	32136
   131  0000                     _TXIE	set	31980
   132  0000                     _TXIF	set	31988
   133                           
   134                           	psect	mediumconst
   135  00FE36                     __pmediumconst:
   136                           	opt stack 0
   137  00FE36  00                 	db	0
   138  00FE37                     STR_61:
   139  00FE37  4D                 	db	77	;'M'
   140  00FE38  75                 	db	117	;'u'
   141  00FE39  6C                 	db	108	;'l'
   142  00FE3A  74                 	db	116	;'t'
   143  00FE3B  69                 	db	105	;'i'
   144  00FE3C  54                 	db	84	;'T'
   145  00FE3D  52                 	db	82	;'R'
   146  00FE3E  58                 	db	88	;'X'
   147  00FE3F  20                 	db	32
   148  00FE40  48                 	db	72	;'H'
   149  00FE41  57                 	db	87	;'W'
   150  00FE42  49                 	db	73	;'I'
   151  00FE43  44                 	db	68	;'D'
   152  00FE44  20                 	db	32
   153  00FE45  31                 	db	49	;'1'
   154  00FE46  2E                 	db	46
   155  00FE47  31                 	db	49	;'1'
   156  00FE48  2C                 	db	44
   157  00FE49  20                 	db	32
   158  00FE4A  46                 	db	70	;'F'
   159  00FE4B  57                 	db	87	;'W'
   160  00FE4C  49                 	db	73	;'I'
   161  00FE4D  44                 	db	68	;'D'
   162  00FE4E  20                 	db	32
   163  00FE4F  31                 	db	49	;'1'
   164  00FE50  2E                 	db	46
   165  00FE51  33                 	db	51	;'3'
   166  00FE52  20                 	db	32
   167  00FE53  2D                 	db	45
   168  00FE54  20                 	db	32
   169  00FE55  73                 	db	115	;'s'
   170  00FE56  6B                 	db	107	;'k'
   171  00FE57  61                 	db	97	;'a'
   172  00FE58  67                 	db	103	;'g'
   173  00FE59  6D                 	db	109	;'m'
   174  00FE5A  6F                 	db	111	;'o'
   175  00FE5B  2E                 	db	46
   176  00FE5C  63                 	db	99	;'c'
   177  00FE5D  6F                 	db	111	;'o'
   178  00FE5E  6D                 	db	109	;'m'
   179  00FE5F  0D                 	db	13
   180  00FE60  0A                 	db	10
   181  00FE61  00                 	db	0
   182  00FE62                     STR_9:
   183  00FE62  2D                 	db	45
   184  00FE63  2D                 	db	45
   185  00FE64  2D                 	db	45
   186  00FE65  2D                 	db	45
   187  00FE66  2D                 	db	45
   188  00FE67  2D                 	db	45
   189  00FE68  2D                 	db	45
   190  00FE69  2D                 	db	45
   191  00FE6A  2D                 	db	45
   192  00FE6B  20                 	db	32
   193  00FE6C  53                 	db	83	;'S'
   194  00FE6D  65                 	db	101	;'e'
   195  00FE6E  74                 	db	116	;'t'
   196  00FE6F  74                 	db	116	;'t'
   197  00FE70  69                 	db	105	;'i'
   198  00FE71  6E                 	db	110	;'n'
   199  00FE72  67                 	db	103	;'g'
   200  00FE73  73                 	db	115	;'s'
   201  00FE74  20                 	db	32
   202  00FE75  2D                 	db	45
   203  00FE76  2D                 	db	45
   204  00FE77  2D                 	db	45
   205  00FE78  2D                 	db	45
   206  00FE79  2D                 	db	45
   207  00FE7A  2D                 	db	45
   208  00FE7B  2D                 	db	45
   209  00FE7C  2D                 	db	45
   210  00FE7D  2D                 	db	45
   211  00FE7E  2D                 	db	45
   212  00FE7F  0D                 	db	13
   213  00FE80  0A                 	db	10
   214  00FE81  00                 	db	0
   215  00FE82                     STR_22:
   216  00FE82  20                 	db	32
   217  00FE83  5B                 	db	91	;'['
   218  00FE84  4E                 	db	78	;'N'
   219  00FE85  5D                 	db	93	;']'
   220  00FE86  20                 	db	32
   221  00FE87  45                 	db	69	;'E'
   222  00FE88  6E                 	db	110	;'n'
   223  00FE89  2E                 	db	46
   224  00FE8A  20                 	db	32
   225  00FE8B  52                 	db	82	;'R'
   226  00FE8C  58                 	db	88	;'X'
   227  00FE8D  20                 	db	32
   228  00FE8E  6C                 	db	108	;'l'
   229  00FE8F  65                 	db	101	;'e'
   230  00FE90  61                 	db	97	;'a'
   231  00FE91  72                 	db	114	;'r'
   232  00FE92  6E                 	db	110	;'n'
   233  00FE93  69                 	db	105	;'i'
   234  00FE94  6E                 	db	110	;'n'
   235  00FE95  67                 	db	103	;'g'
   236  00FE96  20                 	db	32
   237  00FE97  3D                 	db	61	;'='
   238  00FE98  20                 	db	32
   239  00FE99  00                 	db	0
   240  00FE9A                     STR_42:
   241  00FE9A  20                 	db	32
   242  00FE9B  5B                 	db	91	;'['
   243  00FE9C  49                 	db	73	;'I'
   244  00FE9D  5D                 	db	93	;']'
   245  00FE9E  20                 	db	32
   246  00FE9F  53                 	db	83	;'S'
   247  00FEA0  65                 	db	101	;'e'
   248  00FEA1  74                 	db	116	;'t'
   249  00FEA2  20                 	db	32
   250  00FEA3  6E                 	db	110	;'n'
   251  00FEA4  6F                 	db	111	;'o'
   252  00FEA5  69                 	db	105	;'i'
   253  00FEA6  73                 	db	115	;'s'
   254  00FEA7  65                 	db	101	;'e'
   255  00FEA8  20                 	db	32
   256  00FEA9  66                 	db	102	;'f'
   257  00FEAA  6C                 	db	108	;'l'
   258  00FEAB  6F                 	db	111	;'o'
   259  00FEAC  6F                 	db	111	;'o'
   260  00FEAD  72                 	db	114	;'r'
   261  00FEAE  0D                 	db	13
   262  00FEAF  0A                 	db	10
   263  00FEB0  00                 	db	0
   264  00FEB1                     STR_40:
   265  00FEB1  20                 	db	32
   266  00FEB2  5B                 	db	91	;'['
   267  00FEB3  46                 	db	70	;'F'
   268  00FEB4  5D                 	db	93	;']'
   269  00FEB5  20                 	db	32
   270  00FEB6  4C                 	db	76	;'L'
   271  00FEB7  6F                 	db	111	;'o'
   272  00FEB8  61                 	db	97	;'a'
   273  00FEB9  64                 	db	100	;'d'
   274  00FEBA  20                 	db	32
   275  00FEBB  64                 	db	100	;'d'
   276  00FEBC  65                 	db	101	;'e'
   277  00FEBD  66                 	db	102	;'f'
   278  00FEBE  61                 	db	97	;'a'
   279  00FEBF  75                 	db	117	;'u'
   280  00FEC0  6C                 	db	108	;'l'
   281  00FEC1  74                 	db	116	;'t'
   282  00FEC2  73                 	db	115	;'s'
   283  00FEC3  0D                 	db	13
   284  00FEC4  0A                 	db	10
   285  00FEC5  00                 	db	0
   286  00FEC6                     STR_24:
   287  00FEC6  20                 	db	32
   288  00FEC7  5B                 	db	91	;'['
   289  00FEC8  59                 	db	89	;'Y'
   290  00FEC9  5D                 	db	93	;']'
   291  00FECA  20                 	db	32
   292  00FECB  45                 	db	69	;'E'
   293  00FECC  6E                 	db	110	;'n'
   294  00FECD  2E                 	db	46
   295  00FECE  20                 	db	32
   296  00FECF  52                 	db	82	;'R'
   297  00FED0  58                 	db	88	;'X'
   298  00FED1  20                 	db	32
   299  00FED2  63                 	db	99	;'c'
   300  00FED3  6F                 	db	111	;'o'
   301  00FED4  64                 	db	100	;'d'
   302  00FED5  65                 	db	101	;'e'
   303  00FED6  20                 	db	32
   304  00FED7  3D                 	db	61	;'='
   305  00FED8  20                 	db	32
   306  00FED9  00                 	db	0
   307  00FEDA                     STR_39:
   308  00FEDA  20                 	db	32
   309  00FEDB  5B                 	db	91	;'['
   310  00FEDC  4C                 	db	76	;'L'
   311  00FEDD  5D                 	db	93	;']'
   312  00FEDE  20                 	db	32
   313  00FEDF  45                 	db	69	;'E'
   314  00FEE0  45                 	db	69	;'E'
   315  00FEE1  50                 	db	80	;'P'
   316  00FEE2  52                 	db	82	;'R'
   317  00FEE3  4F                 	db	79	;'O'
   318  00FEE4  4D                 	db	77	;'M'
   319  00FEE5  20                 	db	32
   320  00FEE6  6C                 	db	108	;'l'
   321  00FEE7  6F                 	db	111	;'o'
   322  00FEE8  61                 	db	97	;'a'
   323  00FEE9  64                 	db	100	;'d'
   324  00FEEA  0D                 	db	13
   325  00FEEB  0A                 	db	10
   326  00FEEC  00                 	db	0
   327  00FEED                     STR_38:
   328  00FEED  20                 	db	32
   329  00FEEE  5B                 	db	91	;'['
   330  00FEEF  53                 	db	83	;'S'
   331  00FEF0  5D                 	db	93	;']'
   332  00FEF1  20                 	db	32
   333  00FEF2  45                 	db	69	;'E'
   334  00FEF3  45                 	db	69	;'E'
   335  00FEF4  50                 	db	80	;'P'
   336  00FEF5  52                 	db	82	;'R'
   337  00FEF6  4F                 	db	79	;'O'
   338  00FEF7  4D                 	db	77	;'M'
   339  00FEF8  20                 	db	32
   340  00FEF9  73                 	db	115	;'s'
   341  00FEFA  61                 	db	97	;'a'
   342  00FEFB  76                 	db	118	;'v'
   343  00FEFC  65                 	db	101	;'e'
   344  00FEFD  0D                 	db	13
   345  00FEFE  0A                 	db	10
   346  00FEFF  00                 	db	0
   347  00FF00                     STR_45:
   348  00FF00  20                 	db	32
   349  00FF01  4E                 	db	78	;'N'
   350  00FF02  6F                 	db	111	;'o'
   351  00FF03  69                 	db	105	;'i'
   352  00FF04  73                 	db	115	;'s'
   353  00FF05  65                 	db	101	;'e'
   354  00FF06  20                 	db	32
   355  00FF07  66                 	db	102	;'f'
   356  00FF08  6C                 	db	108	;'l'
   357  00FF09  6F                 	db	111	;'o'
   358  00FF0A  6F                 	db	111	;'o'
   359  00FF0B  72                 	db	114	;'r'
   360  00FF0C  20                 	db	32
   361  00FF0D  3D                 	db	61	;'='
   362  00FF0E  20                 	db	32
   363  00FF0F  00                 	db	0
   364  00FF10                     STR_43:
   365  00FF10  20                 	db	32
   366  00FF11  43                 	db	67	;'C'
   367  00FF12  75                 	db	117	;'u'
   368  00FF13  72                 	db	114	;'r'
   369  00FF14  72                 	db	114	;'r'
   370  00FF15  2E                 	db	46
   371  00FF16  20                 	db	32
   372  00FF17  52                 	db	82	;'R'
   373  00FF18  53                 	db	83	;'S'
   374  00FF19  53                 	db	83	;'S'
   375  00FF1A  49                 	db	73	;'I'
   376  00FF1B  20                 	db	32
   377  00FF1C  3D                 	db	61	;'='
   378  00FF1D  20                 	db	32
   379  00FF1E  00                 	db	0
   380  00FF1F                     STR_11:
   381  00FF1F  20                 	db	32
   382  00FF20  5B                 	db	91	;'['
   383  00FF21  44                 	db	68	;'D'
   384  00FF22  5D                 	db	93	;']'
   385  00FF23  20                 	db	32
   386  00FF24  45                 	db	69	;'E'
   387  00FF25  6E                 	db	110	;'n'
   388  00FF26  2E                 	db	46
   389  00FF27  20                 	db	32
   390  00FF28  52                 	db	82	;'R'
   391  00FF29  58                 	db	88	;'X'
   392  00FF2A  20                 	db	32
   393  00FF2B  3D                 	db	61	;'='
   394  00FF2C  20                 	db	32
   395  00FF2D  00                 	db	0
   396  00FF2E                     STR_19:
   397  00FF2E  20                 	db	32
   398  00FF2F  5B                 	db	91	;'['
   399  00FF30  45                 	db	69	;'E'
   400  00FF31  5D                 	db	93	;']'
   401  00FF32  20                 	db	32
   402  00FF33  45                 	db	69	;'E'
   403  00FF34  6E                 	db	110	;'n'
   404  00FF35  2E                 	db	46
   405  00FF36  20                 	db	32
   406  00FF37  52                 	db	82	;'R'
   407  00FF38  58                 	db	88	;'X'
   408  00FF39  20                 	db	32
   409  00FF3A  3D                 	db	61	;'='
   410  00FF3B  20                 	db	32
   411  00FF3C  00                 	db	0
   412  00FF3D                     STR_14:
   413  00FF3D  20                 	db	32
   414  00FF3E  5B                 	db	91	;'['
   415  00FF3F  47                 	db	71	;'G'
   416  00FF40  5D                 	db	93	;']'
   417  00FF41  20                 	db	32
   418  00FF42  45                 	db	69	;'E'
   419  00FF43  6E                 	db	110	;'n'
   420  00FF44  2E                 	db	46
   421  00FF45  20                 	db	32
   422  00FF46  52                 	db	82	;'R'
   423  00FF47  58                 	db	88	;'X'
   424  00FF48  20                 	db	32
   425  00FF49  3D                 	db	61	;'='
   426  00FF4A  20                 	db	32
   427  00FF4B  00                 	db	0
   428  00FF4C                     STR_35:
   429  00FF4C  20                 	db	32
   430  00FF4D  5B                 	db	91	;'['
   431  00FF4E  52                 	db	82	;'R'
   432  00FF4F  5D                 	db	93	;']'
   433  00FF50  20                 	db	32
   434  00FF51  45                 	db	69	;'E'
   435  00FF52  6E                 	db	110	;'n'
   436  00FF53  20                 	db	32
   437  00FF54  52                 	db	82	;'R'
   438  00FF55  58                 	db	88	;'X'
   439  00FF56  20                 	db	32
   440  00FF57  3D                 	db	61	;'='
   441  00FF58  20                 	db	32
   442  00FF59  00                 	db	0
   443  00FF5A                     STR_16:
   444  00FF5A  20                 	db	32
   445  00FF5B  5B                 	db	91	;'['
   446  00FF5C  41                 	db	65	;'A'
   447  00FF5D  5D                 	db	93	;']'
   448  00FF5E  20                 	db	32
   449  00FF5F  53                 	db	83	;'S'
   450  00FF60  65                 	db	101	;'e'
   451  00FF61  6E                 	db	110	;'n'
   452  00FF62  64                 	db	100	;'d'
   453  00FF63  73                 	db	115	;'s'
   454  00FF64  20                 	db	32
   455  00FF65  3D                 	db	61	;'='
   456  00FF66  20                 	db	32
   457  00FF67  00                 	db	0
   458  00FF68                     STR_32:
   459  00FF68  20                 	db	32
   460  00FF69  5B                 	db	91	;'['
   461  00FF6A  4B                 	db	75	;'K'
   462  00FF6B  5D                 	db	93	;']'
   463  00FF6C  20                 	db	32
   464  00FF6D  53                 	db	83	;'S'
   465  00FF6E  65                 	db	101	;'e'
   466  00FF6F  6E                 	db	110	;'n'
   467  00FF70  64                 	db	100	;'d'
   468  00FF71  73                 	db	115	;'s'
   469  00FF72  20                 	db	32
   470  00FF73  3D                 	db	61	;'='
   471  00FF74  20                 	db	32
   472  00FF75  00                 	db	0
   473  00FF76                     STR_29:
   474  00FF76  20                 	db	32
   475  00FF77  5B                 	db	91	;'['
   476  00FF78  57                 	db	87	;'W'
   477  00FF79  5D                 	db	93	;']'
   478  00FF7A  20                 	db	32
   479  00FF7B  53                 	db	83	;'S'
   480  00FF7C  65                 	db	101	;'e'
   481  00FF7D  6E                 	db	110	;'n'
   482  00FF7E  64                 	db	100	;'d'
   483  00FF7F  73                 	db	115	;'s'
   484  00FF80  20                 	db	32
   485  00FF81  3D                 	db	61	;'='
   486  00FF82  20                 	db	32
   487  00FF83  00                 	db	0
   488  00FF84                     STR_26:
   489  00FF84  20                 	db	32
   490  00FF85  5B                 	db	91	;'['
   491  00FF86  58                 	db	88	;'X'
   492  00FF87  5D                 	db	93	;']'
   493  00FF88  20                 	db	32
   494  00FF89  53                 	db	83	;'S'
   495  00FF8A  65                 	db	101	;'e'
   496  00FF8B  6E                 	db	110	;'n'
   497  00FF8C  64                 	db	100	;'d'
   498  00FF8D  73                 	db	115	;'s'
   499  00FF8E  20                 	db	32
   500  00FF8F  3D                 	db	61	;'='
   501  00FF90  20                 	db	32
   502  00FF91  00                 	db	0
   503  00FF92                     STR_34:
   504  00FF92  52                 	db	82	;'R'
   505  00FF93  61                 	db	97	;'a'
   506  00FF94  77                 	db	119	;'w'
   507  00FF95  20                 	db	32
   508  00FF96  64                 	db	100	;'d'
   509  00FF97  61                 	db	97	;'a'
   510  00FF98  74                 	db	116	;'t'
   511  00FF99  61                 	db	97	;'a'
   512  00FF9A  3A                 	db	58	;':'
   513  00FF9B  0D                 	db	13
   514  00FF9C  0A                 	db	10
   515  00FF9D  00                 	db	0
   516  00FF9E                     STR_31:
   517  00FF9E  4B                 	db	75	;'K'
   518  00FF9F  61                 	db	97	;'a'
   519  00FFA0  6E                 	db	110	;'n'
   520  00FFA1  67                 	db	103	;'g'
   521  00FFA2  74                 	db	116	;'t'
   522  00FFA3  68                 	db	104	;'h'
   523  00FFA4  61                 	db	97	;'a'
   524  00FFA5  69                 	db	105	;'i'
   525  00FFA6  3A                 	db	58	;':'
   526  00FFA7  0D                 	db	13
   527  00FFA8  0A                 	db	10
   528  00FFA9  00                 	db	0
   529  00FFAA                     STR_37:
   530  00FFAA  53                 	db	83	;'S'
   531  00FFAB  65                 	db	101	;'e'
   532  00FFAC  74                 	db	116	;'t'
   533  00FFAD  74                 	db	116	;'t'
   534  00FFAE  69                 	db	105	;'i'
   535  00FFAF  6E                 	db	110	;'n'
   536  00FFB0  67                 	db	103	;'g'
   537  00FFB1  73                 	db	115	;'s'
   538  00FFB2  3A                 	db	58	;':'
   539  00FFB3  0D                 	db	13
   540  00FFB4  0A                 	db	10
   541  00FFB5  00                 	db	0
   542  00FFB6                     STR_28:
   543  00FFB6  57                 	db	87	;'W'
   544  00FFB7  61                 	db	97	;'a'
   545  00FFB8  76                 	db	118	;'v'
   546  00FFB9  65                 	db	101	;'e'
   547  00FFBA  6D                 	db	109	;'m'
   548  00FFBB  61                 	db	97	;'a'
   549  00FFBC  6E                 	db	110	;'n'
   550  00FFBD  3A                 	db	58	;':'
   551  00FFBE  0D                 	db	13
   552  00FFBF  0A                 	db	10
   553  00FFC0  00                 	db	0
   554  00FFC1                     STR_41:
   555  00FFC1  4F                 	db	79	;'O'
   556  00FFC2  74                 	db	116	;'t'
   557  00FFC3  68                 	db	104	;'h'
   558  00FFC4  65                 	db	101	;'e'
   559  00FFC5  72                 	db	114	;'r'
   560  00FFC6  3A                 	db	58	;':'
   561  00FFC7  0D                 	db	13
   562  00FFC8  0A                 	db	10
   563  00FFC9  00                 	db	0
   564  00FFCA                     STR_21:
   565  00FFCA  4E                 	db	78	;'N'
   566  00FFCB  65                 	db	101	;'e'
   567  00FFCC  78                 	db	120	;'x'
   568  00FFCD  61                 	db	97	;'a'
   569  00FFCE  3A                 	db	58	;':'
   570  00FFCF  0D                 	db	13
   571  00FFD0  0A                 	db	10
   572  00FFD1  00                 	db	0
   573  00FFD2                     STR_18:
   574  00FFD2  45                 	db	69	;'E'
   575  00FFD3  73                 	db	115	;'s'
   576  00FFD4  69                 	db	105	;'i'
   577  00FFD5  63                 	db	99	;'c'
   578  00FFD6  3A                 	db	58	;':'
   579  00FFD7  0D                 	db	13
   580  00FFD8  0A                 	db	10
   581  00FFD9  00                 	db	0
   582  00FFDA                     STR_10:
   583  00FFDA  44                 	db	68	;'D'
   584  00FFDB  6F                 	db	111	;'o'
   585  00FFDC  72                 	db	114	;'r'
   586  00FFDD  6F                 	db	111	;'o'
   587  00FFDE  3A                 	db	58	;':'
   588  00FFDF  0D                 	db	13
   589  00FFE0  0A                 	db	10
   590  00FFE1  00                 	db	0
   591  00FFE2                     STR_13:
   592  00FFE2  47                 	db	71	;'G'
   593  00FFE3  41                 	db	65	;'A'
   594  00FFE4  4F                 	db	79	;'O'
   595  00FFE5  3A                 	db	58	;':'
   596  00FFE6  0D                 	db	13
   597  00FFE7  0A                 	db	10
   598  00FFE8  00                 	db	0
   599  00FFE9                     STR_7:
   600  00FFE9  24                 	db	36
   601  00FFEA  4F                 	db	79	;'O'
   602  00FFEB  4B                 	db	75	;'K'
   603  00FFEC  0D                 	db	13
   604  00FFED  0A                 	db	10
   605  00FFEE  00                 	db	0
   606  00FFEF                     STR_65:
   607  00FFEF  24                 	db	36
   608  00FFF0  4E                 	db	78	;'N'
   609  00FFF1  00                 	db	0
   610  00FFF2                     STR_63:
   611  00FFF2  24                 	db	36
   612  00FFF3  43                 	db	67	;'C'
   613  00FFF4  00                 	db	0
   614  00FFF5                     STR_5:
   615  00FFF5  24                 	db	36
   616  00FFF6  47                 	db	71	;'G'
   617  00FFF7  00                 	db	0
   618  00FFF8                     STR_3:
   619  00FFF8  24                 	db	36
   620  00FFF9  45                 	db	69	;'E'
   621  00FFFA  00                 	db	0
   622  00FFFB                     STR_1:
   623  00FFFB  24                 	db	36
   624  00FFFC  44                 	db	68	;'D'
   625  00FFFD  00                 	db	0
   626  0000                     
   627                           ; #config settings
   628  00FFFE  00                 	db	0	; dummy byte at the end
   629  0000                     
   630                           	psect	cinit
   631  002648                     __pcinit:
   632                           	opt stack 0
   633  002648                     start_initialization:
   634                           	opt stack 0
   635  002648                     __initialization:
   636                           	opt stack 0
   637                           
   638                           ; Clear objects allocated to BANK2 (128 bytes)
   639  002648  EE02  F000         	lfsr	0,__pbssBANK2
   640  00264C  0E80               	movlw	128
   641  00264E                     clear_0:
   642  00264E  6AEE               	clrf	postinc0,c
   643  002650  06E8               	decf	wreg,f,c
   644  002652  E1FD               	bnz	clear_0
   645                           
   646                           ; Clear objects allocated to BANK1 (256 bytes)
   647  002654  EE01  F000         	lfsr	0,__pbssBANK1
   648  002658  EE11 F000          	lfsr	1,256
   649  00265C                     clear_1:
   650  00265C  6AEE               	clrf	postinc0,c
   651  00265E  50E5               	movf	postdec1,w,c
   652  002660  50E1               	movf	fsr1l,w,c
   653  002662  E1FC               	bnz	clear_1
   654  002664  50E2               	movf	fsr1h,w,c
   655  002666  E1FA               	bnz	clear_1
   656                           
   657                           ; Clear objects allocated to BANK0 (25 bytes)
   658  002668  EE00  F0B2         	lfsr	0,__pbssBANK0
   659  00266C  0E19               	movlw	25
   660  00266E                     clear_2:
   661  00266E  6AEE               	clrf	postinc0,c
   662  002670  06E8               	decf	wreg,f,c
   663  002672  E1FD               	bnz	clear_2
   664                           
   665                           ; Clear objects allocated to COMRAM (25 bytes)
   666  002674  EE00  F035         	lfsr	0,__pbssCOMRAM
   667  002678  0E19               	movlw	25
   668  00267A                     clear_3:
   669  00267A  6AEE               	clrf	postinc0,c
   670  00267C  06E8               	decf	wreg,f,c
   671  00267E  E1FD               	bnz	clear_3
   672                           
   673                           ; Initialize objects allocated to COMRAM (1 bytes)
   674                           ; load TBLPTR registers with __pidataCOMRAM
   675  002680  0ECA               	movlw	low __pidataCOMRAM
   676  002682  6EF6               	movwf	tblptrl,c
   677  002684  0E29               	movlw	high __pidataCOMRAM
   678  002686  6EF7               	movwf	tblptrh,c
   679  002688  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   680  00268A  6EF8               	movwf	tblptru,c
   681  00268C  0009               	tblrd		*+	;fetch initializer
   682  00268E  CFF5 F04E          	movff	tablat,__pdataCOMRAM
   683  002692                     end_of_initialization:
   684                           	opt stack 0
   685  002692                     __end_of__initialization:
   686                           	opt stack 0
   687  002692  0E00               	movlw	low (__Lmediumconst shr (0+16))
   688  002694  6EF8               	movwf	tblptru,c
   689  002696  0100               	movlb	0
   690  002698  EF90  F008         	goto	_main	;jump to C main() function
   691                           tblptru	equ	0xFF8
   692                           tblptrh	equ	0xFF7
   693                           tblptrl	equ	0xFF6
   694                           tablat	equ	0xFF5
   695                           postinc0	equ	0xFEE
   696                           wreg	equ	0xFE8
   697                           postdec1	equ	0xFE5
   698                           fsr1h	equ	0xFE2
   699                           fsr1l	equ	0xFE1
   700                           
   701                           	psect	bssCOMRAM
   702  000035                     __pbssCOMRAM:
   703                           	opt stack 0
   704  000035                     _current_rssi:
   705                           	opt stack 0
   706  000035                     	ds	2
   707  000037                     _rxip:
   708                           	opt stack 0
   709  000037                     	ds	2
   710  000039                     _rxop:
   711                           	opt stack 0
   712  000039                     	ds	2
   713  00003B                     _txip:
   714                           	opt stack 0
   715  00003B                     	ds	2
   716  00003D                     _txop:
   717                           	opt stack 0
   718  00003D                     	ds	2
   719  00003F                     nexaCodeDecode@data:
   720                           	opt stack 0
   721  00003F                     	ds	2
   722  000041                     _samples_ip:
   723                           	opt stack 0
   724  000041                     	ds	1
   725  000042                     _samples_op:
   726                           	opt stack 0
   727  000042                     	ds	1
   728  000043                     doroDecode@nrbits:
   729                           	opt stack 0
   730  000043                     	ds	1
   731  000044                     doroDecode@state:
   732                           	opt stack 0
   733  000044                     	ds	1
   734  000045                     esicDecode@esicbit:
   735                           	opt stack 0
   736  000045                     	ds	1
   737  000046                     esicDecode@nrbits:
   738                           	opt stack 0
   739  000046                     	ds	1
   740  000047                     esicDecode@preamble_data:
   741                           	opt stack 0
   742  000047                     	ds	1
   743  000048                     esicDecode@state:
   744                           	opt stack 0
   745  000048                     	ds	1
   746  000049                     gaoDecode@gaobit:
   747                           	opt stack 0
   748  000049                     	ds	1
   749  00004A                     gaoDecode@nrsymbols:
   750                           	opt stack 0
   751  00004A                     	ds	1
   752  00004B                     gaoDecode@symbols:
   753                           	opt stack 0
   754  00004B                     	ds	1
   755  00004C                     nexaCodeDecode@state:
   756                           	opt stack 0
   757  00004C                     	ds	1
   758  00004D                     nexaDecode@bit_nr:
   759                           	opt stack 0
   760  00004D                     	ds	1
   761                           tblptru	equ	0xFF8
   762                           tblptrh	equ	0xFF7
   763                           tblptrl	equ	0xFF6
   764                           tablat	equ	0xFF5
   765                           postinc0	equ	0xFEE
   766                           wreg	equ	0xFE8
   767                           postdec1	equ	0xFE5
   768                           fsr1h	equ	0xFE2
   769                           fsr1l	equ	0xFE1
   770                           
   771                           	psect	dataCOMRAM
   772  00004E                     __pdataCOMRAM:
   773                           	opt stack 0
   774  00004E                     nexaDecode@state:
   775                           	opt stack 0
   776  00004E                     	ds	1
   777                           tblptru	equ	0xFF8
   778                           tblptrh	equ	0xFF7
   779                           tblptrl	equ	0xFF6
   780                           tablat	equ	0xFF5
   781                           postinc0	equ	0xFEE
   782                           wreg	equ	0xFE8
   783                           postdec1	equ	0xFE5
   784                           fsr1h	equ	0xFE2
   785                           fsr1l	equ	0xFE1
   786                           
   787                           	psect	bssBANK0
   788  0000B2                     __pbssBANK0:
   789                           	opt stack 0
   790  0000B2                     nexaDecode@data:
   791                           	opt stack 0
   792  0000B2                     	ds	8
   793  0000BA                     esicDecode@data:
   794                           	opt stack 0
   795  0000BA                     	ds	4
   796  0000BE                     gaoDecode@data:
   797                           	opt stack 0
   798  0000BE                     	ds	4
   799  0000C2                     doroDecode@data:
   800                           	opt stack 0
   801  0000C2                     	ds	2
   802  0000C4                     gaoDecode@nrbits:
   803                           	opt stack 0
   804  0000C4                     	ds	1
   805  0000C5                     gaoDecode@preamble_data:
   806                           	opt stack 0
   807  0000C5                     	ds	1
   808  0000C6                     gaoDecode@state:
   809                           	opt stack 0
   810  0000C6                     	ds	1
   811  0000C7                     nexaCodeDecode@symbol_nr:
   812                           	opt stack 0
   813  0000C7                     	ds	1
   814  0000C8                     nexaDecode@dim_found:
   815                           	opt stack 0
   816  0000C8                     	ds	1
   817  0000C9                     outputRaw@last_above:
   818                           	opt stack 0
   819  0000C9                     	ds	1
   820  0000CA                     outputRaw@last_rssi:
   821                           	opt stack 0
   822  0000CA                     	ds	1
   823                           tblptru	equ	0xFF8
   824                           tblptrh	equ	0xFF7
   825                           tblptrl	equ	0xFF6
   826                           tablat	equ	0xFF5
   827                           postinc0	equ	0xFEE
   828                           wreg	equ	0xFE8
   829                           postdec1	equ	0xFE5
   830                           fsr1h	equ	0xFE2
   831                           fsr1l	equ	0xFE1
   832                           
   833                           	psect	bssBANK1
   834  000100                     __pbssBANK1:
   835                           	opt stack 0
   836  000100                     _rxbuffer:
   837                           	opt stack 0
   838  000100                     	ds	128
   839  000180                     _samples:
   840                           	opt stack 0
   841  000180                     	ds	128
   842                           tblptru	equ	0xFF8
   843                           tblptrh	equ	0xFF7
   844                           tblptrl	equ	0xFF6
   845                           tablat	equ	0xFF5
   846                           postinc0	equ	0xFEE
   847                           wreg	equ	0xFE8
   848                           postdec1	equ	0xFE5
   849                           fsr1h	equ	0xFE2
   850                           fsr1l	equ	0xFE1
   851                           
   852                           	psect	bssBANK2
   853  000200                     __pbssBANK2:
   854                           	opt stack 0
   855  000200                     _txbuffer:
   856                           	opt stack 0
   857  000200                     	ds	128
   858                           tblptru	equ	0xFF8
   859                           tblptrh	equ	0xFF7
   860                           tblptrl	equ	0xFF6
   861                           tablat	equ	0xFF5
   862                           postinc0	equ	0xFEE
   863                           wreg	equ	0xFE8
   864                           postdec1	equ	0xFE5
   865                           fsr1h	equ	0xFE2
   866                           fsr1l	equ	0xFE1
   867                           
   868                           	psect	cstackBANK0
   869  000060                     __pcstackBANK0:
   870                           	opt stack 0
   871  000060                     uart_put_int@buffer:
   872                           	opt stack 0
   873                           
   874                           ; 7 bytes @ 0x0
   875  000060                     	ds	7
   876  000067                     uart_put_int@start:
   877                           	opt stack 0
   878                           
   879                           ; 1 bytes @ 0x7
   880  000067                     	ds	1
   881  000068                     uart_put_int@temp:
   882                           	opt stack 0
   883                           
   884                           ; 2 bytes @ 0x8
   885  000068                     	ds	2
   886  00006A                     uart_put_int@j:
   887                           	opt stack 0
   888                           
   889                           ; 1 bytes @ 0xA
   890  00006A                     	ds	1
   891  00006B                     uart_put_int@stop:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0xB
   895  00006B                     	ds	1
   896  00006C                     ??_esicPrint:
   897  00006C                     parseCmd@linep:
   898                           	opt stack 0
   899                           
   900                           ; 2 bytes @ 0xC
   901  00006C                     	ds	2
   902  00006E                     parseCmd@line_len:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0xE
   906  00006E                     	ds	1
   907  00006F                     parseCmd@settingsp:
   908                           	opt stack 0
   909                           
   910                           ; 2 bytes @ 0xF
   911  00006F                     	ds	1
   912  000070                     esicPrint@packetcount:
   913                           	opt stack 0
   914                           
   915                           ; 1 bytes @ 0x10
   916  000070                     	ds	1
   917  000071                     esicPrint@house:
   918                           	opt stack 0
   919                           
   920                           ; 1 bytes @ 0x11
   921  000071                     	ds	1
   922  000072                     esicPrint@channel:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x12
   926  000072                     	ds	1
   927  000073                     esicPrint@humidity:
   928                           	opt stack 0
   929                           
   930                           ; 1 bytes @ 0x13
   931  000073                     	ds	1
   932  000074                     esicPrint@lowbatt:
   933                           	opt stack 0
   934                           
   935                           ; 1 bytes @ 0x14
   936  000074                     	ds	1
   937  000075                     esicPrint@parity:
   938                           	opt stack 0
   939                           
   940                           ; 1 bytes @ 0x15
   941  000075                     	ds	1
   942  000076                     esicPrint@paritycalc:
   943                           	opt stack 0
   944                           
   945                           ; 1 bytes @ 0x16
   946  000076                     	ds	1
   947  000077                     esicPrint@counter:
   948                           	opt stack 0
   949                           
   950                           ; 1 bytes @ 0x17
   951  000077                     	ds	1
   952  000078                     esicPrint@temperature:
   953                           	opt stack 0
   954                           
   955                           ; 4 bytes @ 0x18
   956  000078                     	ds	4
   957  00007C                     esicPrint@temp:
   958                           	opt stack 0
   959                           
   960                           ; 4 bytes @ 0x1C
   961  00007C                     	ds	4
   962  000080                     main@line:
   963                           	opt stack 0
   964                           
   965                           ; 32 bytes @ 0x20
   966  000080                     	ds	32
   967  0000A0                     main@line_len:
   968                           	opt stack 0
   969                           
   970                           ; 1 bytes @ 0x40
   971  0000A0                     	ds	1
   972  0000A1                     main@c:
   973                           	opt stack 0
   974                           
   975                           ; 1 bytes @ 0x41
   976  0000A1                     	ds	1
   977  0000A2                     main@s:
   978                           	opt stack 0
   979                           
   980                           ; 4 bytes @ 0x42
   981  0000A2                     	ds	4
   982  0000A6                     main@settings:
   983                           	opt stack 0
   984                           
   985                           ; 12 bytes @ 0x46
   986  0000A6                     	ds	12
   987                           tblptru	equ	0xFF8
   988                           tblptrh	equ	0xFF7
   989                           tblptrl	equ	0xFF6
   990                           tablat	equ	0xFF5
   991                           postinc0	equ	0xFEE
   992                           wreg	equ	0xFE8
   993                           postdec1	equ	0xFE5
   994                           fsr1h	equ	0xFE2
   995                           fsr1l	equ	0xFE1
   996                           
   997                           	psect	cstackCOMRAM
   998  000001                     __pcstackCOMRAM:
   999                           	opt stack 0
  1000  000001                     ??_sample_interrupt:
  1001  000001                     ??_uart_interrupt:
  1002  000001                     
  1003                           ; 2 bytes @ 0x0
  1004  000001                     	ds	2
  1005  000003                     ??_intRoutineHigh:
  1006                           
  1007                           ; 0 bytes @ 0x2
  1008  000003                     	ds	14
  1009  000011                     ??_uart_put:
  1010  000011                     ??_uart_get:
  1011  000011                     ?_sample_tick:
  1012                           	opt stack 0
  1013  000011                     ?_readAd:
  1014                           	opt stack 0
  1015  000011                     ?___wmul:
  1016                           	opt stack 0
  1017  000011                     ?___awdiv:
  1018                           	opt stack 0
  1019  000011                     ?___lwdiv:
  1020                           	opt stack 0
  1021  000011                     ?___lwmod:
  1022                           	opt stack 0
  1023  000011                     ?_sample_pop:
  1024                           	opt stack 0
  1025  000011                     ?___lmul:
  1026                           	opt stack 0
  1027  000011                     ?___almod:
  1028                           	opt stack 0
  1029  000011                     ?___lldiv:
  1030                           	opt stack 0
  1031  000011                     asciiToHex@input:
  1032                           	opt stack 0
  1033  000011                     reverse@output:
  1034                           	opt stack 0
  1035  000011                     delayms@ms:
  1036                           	opt stack 0
  1037  000011                     waitTimer@value:
  1038                           	opt stack 0
  1039  000011                     loadDefaults@settingsp:
  1040                           	opt stack 0
  1041  000011                     Read_b_eep@badd:
  1042                           	opt stack 0
  1043  000011                     Write_b_eep@badd:
  1044                           	opt stack 0
  1045  000011                     ___wmul@multiplier:
  1046                           	opt stack 0
  1047  000011                     ___awdiv@dividend:
  1048                           	opt stack 0
  1049  000011                     ___lwdiv@dividend:
  1050                           	opt stack 0
  1051  000011                     ___lwmod@dividend:
  1052                           	opt stack 0
  1053  000011                     ___lmul@multiplier:
  1054                           	opt stack 0
  1055  000011                     ___almod@dividend:
  1056                           	opt stack 0
  1057  000011                     ___lldiv@dividend:
  1058                           	opt stack 0
  1059                           
  1060                           ; 4 bytes @ 0x10
  1061  000011                     	ds	1
  1062  000012                     reverse@input:
  1063                           	opt stack 0
  1064                           
  1065                           ; 1 bytes @ 0x11
  1066  000012                     	ds	1
  1067  000013                     ??_waitTimer:
  1068  000013                     ??_sample_tick:
  1069  000013                     ??_delayms:
  1070  000013                     ??_readAd:
  1071  000013                     uart_get@c:
  1072                           	opt stack 0
  1073  000013                     uart_put@c:
  1074                           	opt stack 0
  1075  000013                     Write_b_eep@bdat:
  1076                           	opt stack 0
  1077  000013                     loadEeprom@settingsp:
  1078                           	opt stack 0
  1079  000013                     ___wmul@multiplicand:
  1080                           	opt stack 0
  1081  000013                     ___awdiv@divisor:
  1082                           	opt stack 0
  1083  000013                     ___lwdiv@divisor:
  1084                           	opt stack 0
  1085  000013                     ___lwmod@divisor:
  1086                           	opt stack 0
  1087                           
  1088                           ; 2 bytes @ 0x12
  1089  000013                     	ds	1
  1090  000014                     uart_put_hex@data:
  1091                           	opt stack 0
  1092  000014                     Write_b_eep@GIE_BIT_VAL:
  1093                           	opt stack 0
  1094  000014                     delayms@counter:
  1095                           	opt stack 0
  1096  000014                     uart_puts@s:
  1097                           	opt stack 0
  1098  000014                     outputRaw@rf_length:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x13
  1102  000014                     	ds	1
  1103  000015                     loadEeprom@j:
  1104                           	opt stack 0
  1105  000015                     ___awdiv@counter:
  1106                           	opt stack 0
  1107  000015                     ___lwdiv@counter:
  1108                           	opt stack 0
  1109  000015                     ___lwmod@counter:
  1110                           	opt stack 0
  1111  000015                     readAd@value:
  1112                           	opt stack 0
  1113  000015                     saveEeprom@settingsp:
  1114                           	opt stack 0
  1115  000015                     sample_tick@rssitemp:
  1116                           	opt stack 0
  1117  000015                     ___wmul@product:
  1118                           	opt stack 0
  1119  000015                     sample_pop@s:
  1120                           	opt stack 0
  1121  000015                     ___lmul@multiplicand:
  1122                           	opt stack 0
  1123  000015                     ___almod@divisor:
  1124                           	opt stack 0
  1125  000015                     ___lldiv@divisor:
  1126                           	opt stack 0
  1127                           
  1128                           ; 4 bytes @ 0x14
  1129  000015                     	ds	1
  1130  000016                     doroDecode@length:
  1131                           	opt stack 0
  1132  000016                     startupBlinkLed@j:
  1133                           	opt stack 0
  1134  000016                     outputRaw@rssi:
  1135                           	opt stack 0
  1136  000016                     nexaCodeDecode@length:
  1137                           	opt stack 0
  1138  000016                     ___awdiv@sign:
  1139                           	opt stack 0
  1140  000016                     gaoTx@s:
  1141                           	opt stack 0
  1142  000016                     kangthaiTx@s:
  1143                           	opt stack 0
  1144  000016                     nexaTx@s:
  1145                           	opt stack 0
  1146  000016                     ___lwdiv@quotient:
  1147                           	opt stack 0
  1148  000016                     gaoPrint@data:
  1149                           	opt stack 0
  1150                           
  1151                           ; 4 bytes @ 0x15
  1152  000016                     	ds	1
  1153  000017                     ??_nexaCodeDecode:
  1154  000017                     ??_doroDecode:
  1155  000017                     saveEeprom@j:
  1156                           	opt stack 0
  1157  000017                     readAd@j:
  1158                           	opt stack 0
  1159  000017                     wavemanTx@s:
  1160                           	opt stack 0
  1161  000017                     outputRaw@settingsp:
  1162                           	opt stack 0
  1163  000017                     ___awdiv@quotient:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x16
  1167  000017                     	ds	1
  1168  000018                     gaoTx@resends:
  1169                           	opt stack 0
  1170  000018                     kangthaiTx@resends:
  1171                           	opt stack 0
  1172  000018                     nexaTx@len:
  1173                           	opt stack 0
  1174                           
  1175                           ; 1 bytes @ 0x17
  1176  000018                     	ds	1
  1177  000019                     ??_kangthaiTx:
  1178  000019                     ??_outputRaw:
  1179  000019                     ??_gaoTx:
  1180  000019                     wavemanTx@resends:
  1181                           	opt stack 0
  1182  000019                     nexaTx@resends:
  1183                           	opt stack 0
  1184  000019                     nexaDecode@length:
  1185                           	opt stack 0
  1186  000019                     ___almod@counter:
  1187                           	opt stack 0
  1188  000019                     readAd@temp:
  1189                           	opt stack 0
  1190  000019                     ___lmul@product:
  1191                           	opt stack 0
  1192  000019                     ___lldiv@quotient:
  1193                           	opt stack 0
  1194                           
  1195                           ; 4 bytes @ 0x18
  1196  000019                     	ds	1
  1197  00001A                     ??_wavemanTx:
  1198  00001A                     ??_nexaTx:
  1199  00001A                     ??_nexaDecode:
  1200  00001A                     ??_gaoPrint:
  1201  00001A                     doroDecode@rf_state:
  1202                           	opt stack 0
  1203  00001A                     nexaCodeDecode@unit:
  1204                           	opt stack 0
  1205  00001A                     ___almod@sign:
  1206                           	opt stack 0
  1207                           
  1208                           ; 1 bytes @ 0x19
  1209  00001A                     	ds	1
  1210  00001B                     outputRaw@rf_state:
  1211                           	opt stack 0
  1212  00001B                     nexaCodeDecode@bitstate:
  1213                           	opt stack 0
  1214                           
  1215                           ; 1 bytes @ 0x1A
  1216  00001B                     	ds	2
  1217  00001D                     ?___aldiv:
  1218                           	opt stack 0
  1219  00001D                     gaoTx@resend:
  1220                           	opt stack 0
  1221  00001D                     ___lldiv@counter:
  1222                           	opt stack 0
  1223  00001D                     ___aldiv@dividend:
  1224                           	opt stack 0
  1225                           
  1226                           ; 4 bytes @ 0x1C
  1227  00001D                     	ds	1
  1228  00001E                     wavemanTx@resend:
  1229                           	opt stack 0
  1230  00001E                     gaoTx@data:
  1231                           	opt stack 0
  1232  00001E                     gaoPrint@number:
  1233                           	opt stack 0
  1234  00001E                     uart_init@baud:
  1235                           	opt stack 0
  1236                           
  1237                           ; 4 bytes @ 0x1D
  1238  00001E                     	ds	1
  1239  00001F                     kangthaiTx@resend:
  1240                           	opt stack 0
  1241  00001F                     nexaTx@data_len:
  1242                           	opt stack 0
  1243  00001F                     wavemanTx@data:
  1244                           	opt stack 0
  1245                           
  1246                           ; 2 bytes @ 0x1E
  1247  00001F                     	ds	1
  1248  000020                     nexaTx@resend:
  1249                           	opt stack 0
  1250  000020                     kangthaiTx@temp:
  1251                           	opt stack 0
  1252                           
  1253                           ; 4 bytes @ 0x1F
  1254  000020                     	ds	1
  1255  000021                     wavemanTx@bitnr:
  1256                           	opt stack 0
  1257  000021                     nexaTx@temp:
  1258                           	opt stack 0
  1259  000021                     ___aldiv@divisor:
  1260                           	opt stack 0
  1261                           
  1262                           ; 4 bytes @ 0x20
  1263  000021                     	ds	1
  1264  000022                     gaoPrint@j:
  1265                           	opt stack 0
  1266  000022                     wavemanTx@temp:
  1267                           	opt stack 0
  1268  000022                     gaoTx@temp:
  1269                           	opt stack 0
  1270  000022                     uart_init@spbrg_calc:
  1271                           	opt stack 0
  1272                           
  1273                           ; 4 bytes @ 0x21
  1274  000022                     	ds	1
  1275  000023                     gaoDecode@rf_pulse_length:
  1276                           	opt stack 0
  1277                           
  1278                           ; 1 bytes @ 0x22
  1279  000023                     	ds	1
  1280  000024                     ??_gaoDecode:
  1281  000024                     kangthaiTx@bitnr:
  1282                           	opt stack 0
  1283                           
  1284                           ; 1 bytes @ 0x23
  1285  000024                     	ds	1
  1286  000025                     ___aldiv@counter:
  1287                           	opt stack 0
  1288  000025                     kangthaiTx@data:
  1289                           	opt stack 0
  1290  000025                     nexaTx@data:
  1291                           	opt stack 0
  1292                           
  1293                           ; 8 bytes @ 0x24
  1294  000025                     	ds	1
  1295  000026                     gaoTx@preamble:
  1296                           	opt stack 0
  1297  000026                     gaoDecode@rf_state:
  1298                           	opt stack 0
  1299  000026                     nexaDecode@channel:
  1300                           	opt stack 0
  1301  000026                     ___aldiv@sign:
  1302                           	opt stack 0
  1303                           
  1304                           ; 1 bytes @ 0x25
  1305  000026                     	ds	1
  1306  000027                     gaoTx@bitnr:
  1307                           	opt stack 0
  1308  000027                     nexaDecode@power:
  1309                           	opt stack 0
  1310  000027                     ___aldiv@quotient:
  1311                           	opt stack 0
  1312                           
  1313                           ; 4 bytes @ 0x26
  1314  000027                     	ds	1
  1315  000028                     gaoTx@j:
  1316                           	opt stack 0
  1317  000028                     nexaDecode@group_en:
  1318                           	opt stack 0
  1319                           
  1320                           ; 1 bytes @ 0x27
  1321  000028                     	ds	1
  1322  000029                     kangthaiTx@j:
  1323                           	opt stack 0
  1324  000029                     nexaDecode@id:
  1325                           	opt stack 0
  1326                           
  1327                           ; 4 bytes @ 0x28
  1328  000029                     	ds	1
  1329  00002A                     kangthaiTx@j_379:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0x29
  1333  00002A                     	ds	1
  1334  00002B                     uart_put_int@input:
  1335                           	opt stack 0
  1336                           
  1337                           ; 2 bytes @ 0x2A
  1338  00002B                     	ds	2
  1339  00002D                     ??_uart_put_int:
  1340  00002D                     nexaTx@bitnr:
  1341                           	opt stack 0
  1342  00002D                     nexaDecode@dimlevel:
  1343                           	opt stack 0
  1344                           
  1345                           ; 1 bytes @ 0x2C
  1346  00002D                     	ds	1
  1347  00002E                     nexaTx@j:
  1348                           	opt stack 0
  1349  00002E                     nexaDecode@j:
  1350                           	opt stack 0
  1351                           
  1352                           ; 2 bytes @ 0x2D
  1353  00002E                     	ds	1
  1354  00002F                     parseSettings@linep:
  1355                           	opt stack 0
  1356  00002F                     esicPrint@data:
  1357                           	opt stack 0
  1358                           
  1359                           ; 4 bytes @ 0x2E
  1360  00002F                     	ds	1
  1361  000030                     nexaDecode@bitstate:
  1362                           	opt stack 0
  1363                           
  1364                           ; 1 bytes @ 0x2F
  1365  000030                     	ds	1
  1366  000031                     parseSettings@line_len:
  1367                           	opt stack 0
  1368                           
  1369                           ; 1 bytes @ 0x30
  1370  000031                     	ds	1
  1371  000032                     parseSettings@settingsp:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x31
  1375  000032                     	ds	1
  1376  000033                     esicDecode@rf_pulse_length:
  1377                           	opt stack 0
  1378                           
  1379                           ; 1 bytes @ 0x32
  1380  000033                     	ds	1
  1381  000034                     ??_parseSettings:
  1382                           
  1383                           ; 0 bytes @ 0x33
  1384  000034                     	ds	1
  1385  000035                     tblptru	equ	0xFF8
  1386                           tblptrh	equ	0xFF7
  1387                           tblptrl	equ	0xFF6
  1388                           tablat	equ	0xFF5
  1389                           postinc0	equ	0xFEE
  1390                           wreg	equ	0xFE8
  1391                           postdec1	equ	0xFE5
  1392                           fsr1h	equ	0xFE2
  1393                           fsr1l	equ	0xFE1
  1394                           
  1395                           ; 0 bytes @ 0x34
  1396 ;;
  1397 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1398 ;;
  1399 ;; *************** function _main *****************
  1400 ;; Defined at:
  1401 ;;		line 24 in file "../main.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;		None
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;  c               1   65[BANK0 ] unsigned char 
  1406 ;;  s               4   66[BANK0 ] struct .
  1407 ;;  line           32   32[BANK0 ] unsigned char [32]
  1408 ;;  settings       12   70[BANK0 ] struct .
  1409 ;;  line_len        1   64[BANK0 ] unsigned char 
  1410 ;; Return value:  Size  Location     Type
  1411 ;;                  2  394[None  ] int 
  1412 ;; Registers used:
  1413 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1414 ;; Tracked objects:
  1415 ;;		On entry : 0/0
  1416 ;;		On exit  : 0/0
  1417 ;;		Unchanged: 0/0
  1418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1420 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1422 ;;      Totals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1423 ;;Total ram usage:       50 bytes
  1424 ;; Hardware stack levels required when called:    7
  1425 ;; This function calls:
  1426 ;;		_doroDecode
  1427 ;;		_enter_rx
  1428 ;;		_esicDecode
  1429 ;;		_gaoDecode
  1430 ;;		_hardware_init
  1431 ;;		_loadEeprom
  1432 ;;		_nexaCodeDecode
  1433 ;;		_nexaDecode
  1434 ;;		_outputRaw
  1435 ;;		_parseCmd
  1436 ;;		_sample_init
  1437 ;;		_sample_pop
  1438 ;;		_sample_tick
  1439 ;;		_startupBlinkLed
  1440 ;;		_uart_get
  1441 ;;		_uart_in_waiting
  1442 ;;		_uart_init
  1443 ;;		_uart_puts
  1444 ;; This function is called by:
  1445 ;;		Startup code after reset
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449                           	psect	text0
  1450  001120                     __ptext0:
  1451                           	opt stack 0
  1452  001120                     _main:
  1453                           	opt stack 24
  1454                           
  1455                           ;main.c: 25: hardware_init();
  1456                           
  1457                           ;incstack = 0
  1458  001120  EC81  F014         	call	_hardware_init	;wreg free
  1459                           
  1460                           ;main.c: 26: uart_init(115200);
  1461  001124  0E00               	movlw	0
  1462  001126  6E1E               	movwf	uart_init@baud,c
  1463  001128  0EC2               	movlw	194
  1464  00112A  6E1F               	movwf	uart_init@baud+1,c
  1465  00112C  0E01               	movlw	1
  1466  00112E  6E20               	movwf	uart_init@baud+2,c
  1467  001130  0E00               	movlw	0
  1468  001132  6E21               	movwf	uart_init@baud+3,c
  1469  001134  EC22  F011         	call	_uart_init	;wreg free
  1470                           
  1471                           ;main.c: 27: sample_init();
  1472  001138  ECA1  F014         	call	_sample_init	;wreg free
  1473                           
  1474                           ;main.c: 28: GIE = 1;
  1475  00113C  8EF2               	bsf	intcon,7,c	;volatile
  1476                           
  1477                           ;main.c: 31: char line[32];
  1478                           ;main.c: 32: char line_len = 0;
  1479  00113E  0E00               	movlw	0
  1480  001140  0100               	movlb	0	; () banked
  1481  001142  6FA0               	movwf	main@line_len& (0+255),b
  1482                           
  1483                           ; BSR set to: 0
  1484                           ;main.c: 34: settings_t settings;
  1485                           ;main.c: 35: loadEeprom(&settings);
  1486  001144  0EA6               	movlw	low main@settings
  1487  001146  6E13               	movwf	loadEeprom@settingsp,c
  1488  001148  0E00               	movlw	high main@settings
  1489  00114A  6E14               	movwf	loadEeprom@settingsp+1,c
  1490  00114C  ECA0  F012         	call	_loadEeprom	;wreg free
  1491                           
  1492                           ;main.c: 37: startupBlinkLed();
  1493  001150  ECCF  F013         	call	_startupBlinkLed	;wreg free
  1494                           
  1495                           ;main.c: 38: uart_puts("MultiTRX HWID 1.1, FWID 1.3 - skagmo.com\r\n");
  1496  001154  0E37               	movlw	low STR_61
  1497  001156  6E14               	movwf	uart_puts@s,c
  1498  001158  0EFE               	movlw	high STR_61
  1499  00115A  6E15               	movwf	uart_puts@s+1,c
  1500  00115C  ECCC  F012         	call	_uart_puts	;wreg free
  1501                           
  1502                           ;main.c: 39: enter_rx();
  1503  001160  EC5C  F014         	call	_enter_rx	;wreg free
  1504                           
  1505                           ;main.c: 42: while (sample_tick()){
  1506                           
  1507                           ;main.c: 41: while(1){
  1508  001164  D05A               	goto	l6046
  1509  001166                     l6018:
  1510                           
  1511                           ;main.c: 43: sample_t s = sample_pop();
  1512  001166  ECB2  F013         	call	_sample_pop	;wreg free
  1513  00116A  C011  F0A2         	movff	?_sample_pop,main@s
  1514  00116E  C012  F0A3         	movff	?_sample_pop+1,main@s+1
  1515  001172  C013  F0A4         	movff	?_sample_pop+2,main@s+2
  1516  001176  C014  F0A5         	movff	?_sample_pop+3,main@s+3
  1517                           
  1518                           ;main.c: 44: if (settings.raw_en) outputRaw (s.state, s.duration, s.rssi, &settings);
  1519  00117A  0100               	movlb	0	; () banked
  1520  00117C  51B0               	movf	(main@settings+10)& (0+255),w,b
  1521  00117E  B4D8               	btfsc	status,2,c
  1522  001180  D00F               	goto	l6024
  1523                           
  1524                           ; BSR set to: 0
  1525  001182  C0A3  F014         	movff	main@s+1,outputRaw@rf_length
  1526  001186  C0A4  F015         	movff	main@s+2,outputRaw@rf_length+1
  1527  00118A  C0A5  F016         	movff	main@s+3,outputRaw@rssi
  1528  00118E  0EA6               	movlw	low main@settings
  1529  001190  6E17               	movwf	outputRaw@settingsp,c
  1530  001192  0E00               	movlw	high main@settings
  1531  001194  6E18               	movwf	outputRaw@settingsp+1,c
  1532  001196  0100               	movlb	0	; () banked
  1533  001198  51A2               	movf	main@s& (0+255),w,b
  1534  00119A  ECA4  F011         	call	_outputRaw
  1535  00119E  D000               	goto	l6024
  1536  0011A0                     l6024:
  1537                           
  1538                           ;main.c: 47: if (s.duration>0xff) s.duration=0xff;
  1539  0011A0  0100               	movlb	0	; () banked
  1540  0011A2  05A4               	decf	(main@s+2)& (0+255),w,b
  1541  0011A4  A0D8               	btfss	status,0,c
  1542  0011A6  D004               	goto	l399
  1543                           
  1544                           ; BSR set to: 0
  1545  0011A8  0E00               	movlw	0
  1546  0011AA  0100               	movlb	0	; () banked
  1547  0011AC  6FA4               	movwf	(main@s+2)& (0+255),b
  1548  0011AE  69A3               	setf	(main@s+1)& (0+255),b
  1549  0011B0                     l399:
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;main.c: 48: if (settings.doro_en_rx) doroDecode(s.state, s.duration);
  1553  0011B0  0100               	movlb	0	; () banked
  1554  0011B2  51A7               	movf	(main@settings+1)& (0+255),w,b
  1555  0011B4  B4D8               	btfsc	status,2,c
  1556  0011B6  D007               	goto	l6030
  1557                           
  1558                           ; BSR set to: 0
  1559  0011B8  C0A3  F016         	movff	main@s+1,doroDecode@length
  1560  0011BC  0100               	movlb	0	; () banked
  1561  0011BE  51A2               	movf	main@s& (0+255),w,b
  1562  0011C0  ECB2  F00D         	call	_doroDecode
  1563  0011C4  D000               	goto	l6030
  1564  0011C6                     l6030:
  1565                           
  1566                           ;main.c: 49: if (settings.esic_en_rx) esicDecode(s.duration);
  1567  0011C6  0100               	movlb	0	; () banked
  1568  0011C8  51AA               	movf	(main@settings+4)& (0+255),w,b
  1569  0011CA  B4D8               	btfsc	status,2,c
  1570  0011CC  D005               	goto	l6034
  1571                           
  1572                           ; BSR set to: 0
  1573  0011CE  0100               	movlb	0	; () banked
  1574  0011D0  51A3               	movf	(main@s+1)& (0+255),w,b
  1575  0011D2  EC6D  F00F         	call	_esicDecode
  1576  0011D6  D000               	goto	l6034
  1577  0011D8                     l6034:
  1578                           
  1579                           ;main.c: 50: if (settings.gao_en_rx) gaoDecode(s.state, s.duration);
  1580  0011D8  0100               	movlb	0	; () banked
  1581  0011DA  51A8               	movf	(main@settings+2)& (0+255),w,b
  1582  0011DC  B4D8               	btfsc	status,2,c
  1583  0011DE  D007               	goto	l6038
  1584                           
  1585                           ; BSR set to: 0
  1586  0011E0  C0A3  F023         	movff	main@s+1,gaoDecode@rf_pulse_length
  1587  0011E4  0100               	movlb	0	; () banked
  1588  0011E6  51A2               	movf	main@s& (0+255),w,b
  1589  0011E8  EC7B  F00C         	call	_gaoDecode
  1590  0011EC  D000               	goto	l6038
  1591  0011EE                     l6038:
  1592                           
  1593                           ;main.c: 51: if (settings.nexa_en_rx) nexaDecode(s.state, s.duration);
  1594  0011EE  0100               	movlb	0	; () banked
  1595  0011F0  51AB               	movf	(main@settings+5)& (0+255),w,b
  1596  0011F2  B4D8               	btfsc	status,2,c
  1597  0011F4  D007               	goto	l6042
  1598                           
  1599                           ; BSR set to: 0
  1600  0011F6  C0A3  F019         	movff	main@s+1,nexaDecode@length
  1601  0011FA  0100               	movlb	0	; () banked
  1602  0011FC  51A2               	movf	main@s& (0+255),w,b
  1603  0011FE  ECE5  F004         	call	_nexaDecode
  1604  001202  D000               	goto	l6042
  1605  001204                     l6042:
  1606                           
  1607                           ;main.c: 52: if (settings.nexa_code_en) nexaCodeDecode(s.state, s.duration);
  1608  001204  0100               	movlb	0	; () banked
  1609  001206  51AD               	movf	(main@settings+7)& (0+255),w,b
  1610  001208  B4D8               	btfsc	status,2,c
  1611  00120A  D007               	goto	l6046
  1612                           
  1613                           ; BSR set to: 0
  1614  00120C  C0A3  F016         	movff	main@s+1,nexaCodeDecode@length
  1615  001210  0100               	movlb	0	; () banked
  1616  001212  51A2               	movf	main@s& (0+255),w,b
  1617  001214  EC01  F00B         	call	_nexaCodeDecode
  1618  001218  D000               	goto	l6046
  1619  00121A                     l6046:
  1620  00121A  EC13  F012         	call	_sample_tick	;wreg free
  1621  00121E  5011               	movf	?_sample_tick,w,c
  1622  001220  1012               	iorwf	?_sample_tick+1,w,c
  1623  001222  A4D8               	btfss	status,2,c
  1624  001224  D7A0               	goto	l6018
  1625                           
  1626                           ;main.c: 53: }
  1627                           ;main.c: 56: if(TMR3IF){
  1628  001226  A2A1               	btfss	4001,1,c	;volatile
  1629  001228  D047               	goto	l6072
  1630                           
  1631                           ;main.c: 57: LATC5 = 0;
  1632  00122A  9A8B               	bcf	3979,5,c	;volatile
  1633                           
  1634                           ;main.c: 58: TMR3ON = 0;
  1635  00122C  90B1               	bcf	4017,0,c	;volatile
  1636                           
  1637                           ;main.c: 59: TMR3IF = 0;
  1638  00122E  92A1               	bcf	4001,1,c	;volatile
  1639                           
  1640                           ;main.c: 60: }
  1641                           ;main.c: 63: while(uart_in_waiting()){
  1642  001230  D043               	goto	l6072
  1643  001232                     l6050:
  1644                           
  1645                           ;main.c: 64: char c = uart_get();
  1646  001232  EC33  F014         	call	_uart_get	;wreg free
  1647  001236  0100               	movlb	0	; () banked
  1648  001238  6FA1               	movwf	main@c& (0+255),b
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;main.c: 65: if(c == '$') line_len = 0;
  1652  00123A  0E24               	movlw	36
  1653  00123C  0100               	movlb	0	; () banked
  1654  00123E  19A1               	xorwf	main@c& (0+255),w,b
  1655  001240  A4D8               	btfss	status,2,c
  1656  001242  D004               	goto	l6056
  1657                           
  1658                           ; BSR set to: 0
  1659  001244  0E00               	movlw	0
  1660  001246  0100               	movlb	0	; () banked
  1661  001248  6FA0               	movwf	main@line_len& (0+255),b
  1662  00124A  D000               	goto	l6056
  1663  00124C                     l6056:
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;main.c: 66: if((c == 10) || (c == 13)){
  1667  00124C  0E0A               	movlw	10
  1668  00124E  0100               	movlb	0	; () banked
  1669  001250  19A1               	xorwf	main@c& (0+255),w,b
  1670  001252  B4D8               	btfsc	status,2,c
  1671  001254  D005               	goto	l6060
  1672                           
  1673                           ; BSR set to: 0
  1674  001256  0E0D               	movlw	13
  1675  001258  0100               	movlb	0	; () banked
  1676  00125A  19A1               	xorwf	main@c& (0+255),w,b
  1677  00125C  A4D8               	btfss	status,2,c
  1678  00125E  D01E               	goto	l6068
  1679  001260                     l6060:
  1680                           
  1681                           ; BSR set to: 0
  1682                           ;main.c: 67: if((line_len >= 2)&&(line[0]=='$')) parseCmd(&line, line_len, &settings);
  1683  001260  0E01               	movlw	1
  1684  001262  0100               	movlb	0	; () banked
  1685  001264  65A0               	cpfsgt	main@line_len& (0+255),b
  1686  001266  D016               	goto	l6066
  1687                           
  1688                           ; BSR set to: 0
  1689  001268  0E24               	movlw	36
  1690  00126A  0100               	movlb	0	; () banked
  1691  00126C  1980               	xorwf	main@line& (0+255),w,b
  1692  00126E  A4D8               	btfss	status,2,c
  1693  001270  D011               	goto	l6066
  1694                           
  1695                           ; BSR set to: 0
  1696  001272  0E80               	movlw	low main@line
  1697  001274  0100               	movlb	0	; () banked
  1698  001276  6F6C               	movwf	parseCmd@linep& (0+255),b
  1699  001278  0E00               	movlw	high main@line
  1700  00127A  0100               	movlb	0	; () banked
  1701  00127C  6F6D               	movwf	(parseCmd@linep+1)& (0+255),b
  1702  00127E  C0A0  F06E         	movff	main@line_len,parseCmd@line_len
  1703  001282  0EA6               	movlw	low main@settings
  1704  001284  0100               	movlb	0	; () banked
  1705  001286  6F6F               	movwf	parseCmd@settingsp& (0+255),b
  1706  001288  0E00               	movlw	high main@settings
  1707  00128A  0100               	movlb	0	; () banked
  1708  00128C  6F70               	movwf	(parseCmd@settingsp+1)& (0+255),b
  1709  00128E  ECC3  F00B         	call	_parseCmd	;wreg free
  1710  001292  D000               	goto	l6066
  1711  001294                     l6066:
  1712                           
  1713                           ;main.c: 68: line_len = 0;
  1714  001294  0E00               	movlw	0
  1715  001296  0100               	movlb	0	; () banked
  1716  001298  6FA0               	movwf	main@line_len& (0+255),b
  1717  00129A  D000               	goto	l6068
  1718  00129C                     l6068:
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;main.c: 69: }
  1722                           ;main.c: 70: line[line_len++] = c;
  1723  00129C  0100               	movlb	0	; () banked
  1724  00129E  51A0               	movf	main@line_len& (0+255),w,b
  1725  0012A0  0D01               	mullw	1
  1726  0012A2  0E80               	movlw	low main@line
  1727  0012A4  24F3               	addwf	prodl,w,c
  1728  0012A6  6ED9               	movwf	fsr2l,c
  1729  0012A8  0E00               	movlw	high main@line
  1730  0012AA  20F4               	addwfc	prodh,w,c
  1731  0012AC  6EDA               	movwf	fsr2h,c
  1732  0012AE  C0A1  FFDF         	movff	main@c,indf2
  1733                           
  1734                           ; BSR set to: 0
  1735  0012B2  0100               	movlb	0	; () banked
  1736  0012B4  2BA0               	incf	main@line_len& (0+255),f,b
  1737  0012B6  D000               	goto	l6072
  1738  0012B8                     l6072:
  1739  0012B8  EC6F  F014         	call	_uart_in_waiting	;wreg free
  1740  0012BC  0900               	iorlw	0
  1741  0012BE  B4D8               	btfsc	status,2,c
  1742  0012C0  D7AC               	goto	l6046
  1743  0012C2  D7B7               	goto	l6050
  1744  0012C4  D7AA               	goto	l6046
  1745  0012C6  EF41  F000         	goto	start
  1746  0012CA                     __end_of_main:
  1747                           	opt stack 0
  1748                           tblptru	equ	0xFF8
  1749                           tblptrh	equ	0xFF7
  1750                           tblptrl	equ	0xFF6
  1751                           tablat	equ	0xFF5
  1752                           prodh	equ	0xFF4
  1753                           prodl	equ	0xFF3
  1754                           intcon	equ	0xFF2
  1755                           postinc0	equ	0xFEE
  1756                           wreg	equ	0xFE8
  1757                           postdec1	equ	0xFE5
  1758                           fsr1h	equ	0xFE2
  1759                           fsr1l	equ	0xFE1
  1760                           indf2	equ	0xFDF
  1761                           fsr2h	equ	0xFDA
  1762                           fsr2l	equ	0xFD9
  1763                           status	equ	0xFD8
  1764                           
  1765 ;; *************** function _uart_init *****************
  1766 ;; Defined at:
  1767 ;;		line 27 in file "../uart.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;  baud            4   29[COMRAM] unsigned long 
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;  spbrg_calc      4   33[COMRAM] unsigned long 
  1772 ;; Return value:  Size  Location     Type
  1773 ;;		None               void
  1774 ;; Registers used:
  1775 ;;		wreg, status,2, status,0, cstack
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1781 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1782 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1784 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1785 ;;Total ram usage:        8 bytes
  1786 ;; Hardware stack levels used:    1
  1787 ;; Hardware stack levels required when called:    3
  1788 ;; This function calls:
  1789 ;;		___lldiv
  1790 ;; This function is called by:
  1791 ;;		_main
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795                           	psect	text1
  1796  002244                     __ptext1:
  1797                           	opt stack 0
  1798  002244                     _uart_init:
  1799                           	opt stack 27
  1800                           
  1801                           ;uart.c: 28: unsigned long spbrg_calc = ((32000000/baud)/16)-1;
  1802                           
  1803                           ;incstack = 0
  1804  002244  0E00               	movlw	0
  1805  002246  6E11               	movwf	___lldiv@dividend,c
  1806  002248  0E48               	movlw	72
  1807  00224A  6E12               	movwf	___lldiv@dividend+1,c
  1808  00224C  0EE8               	movlw	232
  1809  00224E  6E13               	movwf	___lldiv@dividend+2,c
  1810  002250  0E01               	movlw	1
  1811  002252  6E14               	movwf	___lldiv@dividend+3,c
  1812  002254  C01E  F015         	movff	uart_init@baud,___lldiv@divisor
  1813  002258  C01F  F016         	movff	uart_init@baud+1,___lldiv@divisor+1
  1814  00225C  C020  F017         	movff	uart_init@baud+2,___lldiv@divisor+2
  1815  002260  C021  F018         	movff	uart_init@baud+3,___lldiv@divisor+3
  1816  002264  ECDC  F010         	call	___lldiv	;wreg free
  1817  002268  0E05               	movlw	5
  1818  00226A  D005               	goto	u4590
  1819  00226C                     u4595:
  1820  00226C  90D8               	bcf	status,0,c
  1821  00226E  3214               	rrcf	?___lldiv+3,f,c
  1822  002270  3213               	rrcf	?___lldiv+2,f,c
  1823  002272  3212               	rrcf	?___lldiv+1,f,c
  1824  002274  3211               	rrcf	?___lldiv,f,c
  1825  002276                     u4590:
  1826  002276  2EE8               	decfsz	wreg,f,c
  1827  002278  D7F9               	goto	u4595
  1828  00227A  0EFF               	movlw	255
  1829  00227C  2411               	addwf	?___lldiv,w,c
  1830  00227E  6E22               	movwf	uart_init@spbrg_calc,c
  1831  002280  0EFF               	movlw	255
  1832  002282  2012               	addwfc	?___lldiv+1,w,c
  1833  002284  6E23               	movwf	uart_init@spbrg_calc+1,c
  1834  002286  0EFF               	movlw	255
  1835  002288  2013               	addwfc	?___lldiv+2,w,c
  1836  00228A  6E24               	movwf	uart_init@spbrg_calc+2,c
  1837  00228C  0EFF               	movlw	255
  1838  00228E  2014               	addwfc	?___lldiv+3,w,c
  1839  002290  6E25               	movwf	uart_init@spbrg_calc+3,c
  1840                           
  1841                           ;uart.c: 29: TXSTA = 0b00100100;
  1842  002292  0E24               	movlw	36
  1843  002294  6EAC               	movwf	4012,c	;volatile
  1844                           
  1845                           ;uart.c: 30: RCSTA = 0b10010000;
  1846  002296  0E90               	movlw	144
  1847  002298  6EAB               	movwf	4011,c	;volatile
  1848                           
  1849                           ;uart.c: 31: BAUDCON = 0;
  1850  00229A  0E00               	movlw	0
  1851  00229C  6EB8               	movwf	4024,c	;volatile
  1852                           
  1853                           ;uart.c: 32: SPBRG = spbrg_calc;
  1854  00229E  C022  FFAF         	movff	uart_init@spbrg_calc,4015	;volatile
  1855                           
  1856                           ;uart.c: 33: INTCON |= 0b01000000;
  1857  0022A2  8CF2               	bsf	intcon,6,c	;volatile
  1858                           
  1859                           ;uart.c: 34: PIE1 |= 0b00110000;
  1860  0022A4  0E30               	movlw	48
  1861  0022A6  129D               	iorwf	3997,f,c	;volatile
  1862                           
  1863                           ;uart.c: 35: txip = txop = rxip = rxop = 0;
  1864  0022A8  0E00               	movlw	0
  1865  0022AA  6E3A               	movwf	_rxop+1,c	;volatile
  1866  0022AC  0E00               	movlw	0
  1867  0022AE  6E39               	movwf	_rxop,c	;volatile
  1868  0022B0  C039  F037         	movff	_rxop,_rxip	;volatile
  1869  0022B4  C03A  F038         	movff	_rxop+1,_rxip+1	;volatile
  1870  0022B8  C037  F03D         	movff	_rxip,_txop	;volatile
  1871  0022BC  C038  F03E         	movff	_rxip+1,_txop+1	;volatile
  1872  0022C0  C03D  F03B         	movff	_txop,_txip	;volatile
  1873  0022C4  C03E  F03C         	movff	_txop+1,_txip+1	;volatile
  1874  0022C8  0012               	return		;funcret
  1875  0022CA                     __end_of_uart_init:
  1876                           	opt stack 0
  1877                           tblptru	equ	0xFF8
  1878                           tblptrh	equ	0xFF7
  1879                           tblptrl	equ	0xFF6
  1880                           tablat	equ	0xFF5
  1881                           prodh	equ	0xFF4
  1882                           prodl	equ	0xFF3
  1883                           intcon	equ	0xFF2
  1884                           postinc0	equ	0xFEE
  1885                           wreg	equ	0xFE8
  1886                           postdec1	equ	0xFE5
  1887                           fsr1h	equ	0xFE2
  1888                           fsr1l	equ	0xFE1
  1889                           indf2	equ	0xFDF
  1890                           fsr2h	equ	0xFDA
  1891                           fsr2l	equ	0xFD9
  1892                           status	equ	0xFD8
  1893                           
  1894 ;; *************** function ___lldiv *****************
  1895 ;; Defined at:
  1896 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lldiv.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;  dividend        4   16[COMRAM] unsigned long 
  1899 ;;  divisor         4   20[COMRAM] unsigned long 
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;  quotient        4   24[COMRAM] unsigned long 
  1902 ;;  counter         1   28[COMRAM] unsigned char 
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  4   16[COMRAM] unsigned long 
  1905 ;; Registers used:
  1906 ;;		wreg, status,2, status,0
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1912 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1913 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1915 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1916 ;;Total ram usage:       13 bytes
  1917 ;; Hardware stack levels used:    1
  1918 ;; Hardware stack levels required when called:    2
  1919 ;; This function calls:
  1920 ;;		Nothing
  1921 ;; This function is called by:
  1922 ;;		_uart_init
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926                           	psect	text2
  1927  0021B8                     __ptext2:
  1928                           	opt stack 0
  1929  0021B8                     ___lldiv:
  1930                           	opt stack 27
  1931                           
  1932                           ;incstack = 0
  1933  0021B8  0E00               	movlw	0
  1934  0021BA  6E19               	movwf	___lldiv@quotient,c
  1935  0021BC  0E00               	movlw	0
  1936  0021BE  6E1A               	movwf	___lldiv@quotient+1,c
  1937  0021C0  0E00               	movlw	0
  1938  0021C2  6E1B               	movwf	___lldiv@quotient+2,c
  1939  0021C4  0E00               	movlw	0
  1940  0021C6  6E1C               	movwf	___lldiv@quotient+3,c
  1941  0021C8  5015               	movf	___lldiv@divisor,w,c
  1942  0021CA  1016               	iorwf	___lldiv@divisor+1,w,c
  1943  0021CC  1017               	iorwf	___lldiv@divisor+2,w,c
  1944  0021CE  1018               	iorwf	___lldiv@divisor+3,w,c
  1945  0021D0  B4D8               	btfsc	status,2,c
  1946  0021D2  D02F               	goto	l1270
  1947  0021D4  0E01               	movlw	1
  1948  0021D6  6E1D               	movwf	___lldiv@counter,c
  1949  0021D8  D007               	goto	l4104
  1950  0021DA                     l4102:
  1951  0021DA  90D8               	bcf	status,0,c
  1952  0021DC  3615               	rlcf	___lldiv@divisor,f,c
  1953  0021DE  3616               	rlcf	___lldiv@divisor+1,f,c
  1954  0021E0  3617               	rlcf	___lldiv@divisor+2,f,c
  1955  0021E2  3618               	rlcf	___lldiv@divisor+3,f,c
  1956  0021E4  2A1D               	incf	___lldiv@counter,f,c
  1957  0021E6  D000               	goto	l4104
  1958  0021E8                     l4104:
  1959  0021E8  BE18               	btfsc	___lldiv@divisor+3,7,c
  1960  0021EA  D002               	goto	l4106
  1961  0021EC  D7F6               	goto	l4102
  1962  0021EE  D000               	goto	l4106
  1963  0021F0                     l4106:
  1964  0021F0  90D8               	bcf	status,0,c
  1965  0021F2  3619               	rlcf	___lldiv@quotient,f,c
  1966  0021F4  361A               	rlcf	___lldiv@quotient+1,f,c
  1967  0021F6  361B               	rlcf	___lldiv@quotient+2,f,c
  1968  0021F8  361C               	rlcf	___lldiv@quotient+3,f,c
  1969  0021FA  5015               	movf	___lldiv@divisor,w,c
  1970  0021FC  5C11               	subwf	___lldiv@dividend,w,c
  1971  0021FE  5016               	movf	___lldiv@divisor+1,w,c
  1972  002200  5812               	subwfb	___lldiv@dividend+1,w,c
  1973  002202  5017               	movf	___lldiv@divisor+2,w,c
  1974  002204  5813               	subwfb	___lldiv@dividend+2,w,c
  1975  002206  5018               	movf	___lldiv@divisor+3,w,c
  1976  002208  5814               	subwfb	___lldiv@dividend+3,w,c
  1977  00220A  A0D8               	btfss	status,0,c
  1978  00220C  D00A               	goto	l4114
  1979  00220E  5015               	movf	___lldiv@divisor,w,c
  1980  002210  5E11               	subwf	___lldiv@dividend,f,c
  1981  002212  5016               	movf	___lldiv@divisor+1,w,c
  1982  002214  5A12               	subwfb	___lldiv@dividend+1,f,c
  1983  002216  5017               	movf	___lldiv@divisor+2,w,c
  1984  002218  5A13               	subwfb	___lldiv@dividend+2,f,c
  1985  00221A  5018               	movf	___lldiv@divisor+3,w,c
  1986  00221C  5A14               	subwfb	___lldiv@dividend+3,f,c
  1987  00221E  8019               	bsf	___lldiv@quotient,0,c
  1988  002220  D000               	goto	l4114
  1989  002222                     l4114:
  1990  002222  90D8               	bcf	status,0,c
  1991  002224  3218               	rrcf	___lldiv@divisor+3,f,c
  1992  002226  3217               	rrcf	___lldiv@divisor+2,f,c
  1993  002228  3216               	rrcf	___lldiv@divisor+1,f,c
  1994  00222A  3215               	rrcf	___lldiv@divisor,f,c
  1995  00222C  2E1D               	decfsz	___lldiv@counter,f,c
  1996  00222E  D7E0               	goto	l4106
  1997  002230  D000               	goto	l1270
  1998  002232                     l1270:
  1999  002232  C019  F011         	movff	___lldiv@quotient,?___lldiv
  2000  002236  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  2001  00223A  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  2002  00223E  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  2003  002242  0012               	return		;funcret
  2004  002244                     __end_of___lldiv:
  2005                           	opt stack 0
  2006                           tblptru	equ	0xFF8
  2007                           tblptrh	equ	0xFF7
  2008                           tblptrl	equ	0xFF6
  2009                           tablat	equ	0xFF5
  2010                           prodh	equ	0xFF4
  2011                           prodl	equ	0xFF3
  2012                           intcon	equ	0xFF2
  2013                           postinc0	equ	0xFEE
  2014                           wreg	equ	0xFE8
  2015                           postdec1	equ	0xFE5
  2016                           fsr1h	equ	0xFE2
  2017                           fsr1l	equ	0xFE1
  2018                           indf2	equ	0xFDF
  2019                           fsr2h	equ	0xFDA
  2020                           fsr2l	equ	0xFD9
  2021                           status	equ	0xFD8
  2022                           
  2023 ;; *************** function _uart_in_waiting *****************
  2024 ;; Defined at:
  2025 ;;		line 38 in file "../uart.c"
  2026 ;; Parameters:    Size  Location     Type
  2027 ;;		None
  2028 ;; Auto vars:     Size  Location     Type
  2029 ;;		None
  2030 ;; Return value:  Size  Location     Type
  2031 ;;                  1    wreg      unsigned char 
  2032 ;; Registers used:
  2033 ;;		wreg, status,2, status,0
  2034 ;; Tracked objects:
  2035 ;;		On entry : 0/0
  2036 ;;		On exit  : 0/0
  2037 ;;		Unchanged: 0/0
  2038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2043 ;;Total ram usage:        0 bytes
  2044 ;; Hardware stack levels used:    1
  2045 ;; Hardware stack levels required when called:    2
  2046 ;; This function calls:
  2047 ;;		Nothing
  2048 ;; This function is called by:
  2049 ;;		_main
  2050 ;; This function uses a non-reentrant model
  2051 ;;
  2052                           
  2053                           	psect	text3
  2054  0028DE                     __ptext3:
  2055                           	opt stack 0
  2056  0028DE                     _uart_in_waiting:
  2057                           	opt stack 28
  2058                           
  2059                           ;uart.c: 39: if (OERR){
  2060                           
  2061                           ;incstack = 0
  2062  0028DE  A2AB               	btfss	4011,1,c	;volatile
  2063  0028E0  D004               	goto	l4752
  2064                           
  2065                           ;uart.c: 40: CREN = 0;
  2066  0028E2  98AB               	bcf	4011,4,c	;volatile
  2067                           
  2068                           ;uart.c: 41: CREN = 1;
  2069  0028E4  88AB               	bsf	4011,4,c	;volatile
  2070                           
  2071                           ;uart.c: 42: return 0;
  2072  0028E6  0E00               	movlw	0
  2073  0028E8  0012               	return	
  2074  0028EA                     l4752:
  2075                           
  2076                           ;uart.c: 43: }
  2077                           ;uart.c: 44: return (rxip!=rxop);
  2078  0028EA  5039               	movf	_rxop,w,c	;volatile
  2079  0028EC  1837               	xorwf	_rxip,w,c	;volatile
  2080  0028EE  E104               	bnz	u5241
  2081  0028F0  503A               	movf	_rxop+1,w,c	;volatile
  2082  0028F2  1838               	xorwf	_rxip+1,w,c	;volatile
  2083  0028F4  B4D8               	btfsc	status,2,c
  2084  0028F6  D002               	goto	u5240
  2085  0028F8                     u5241:
  2086  0028F8  0E01               	movlw	1
  2087  0028FA  0012               	return	
  2088  0028FC                     u5240:
  2089  0028FC  0E00               	movlw	0
  2090  0028FE  0012               	return	
  2091  002900  0012               	return		;funcret
  2092  002902                     __end_of_uart_in_waiting:
  2093                           	opt stack 0
  2094                           tblptru	equ	0xFF8
  2095                           tblptrh	equ	0xFF7
  2096                           tblptrl	equ	0xFF6
  2097                           tablat	equ	0xFF5
  2098                           prodh	equ	0xFF4
  2099                           prodl	equ	0xFF3
  2100                           intcon	equ	0xFF2
  2101                           postinc0	equ	0xFEE
  2102                           wreg	equ	0xFE8
  2103                           postdec1	equ	0xFE5
  2104                           fsr1h	equ	0xFE2
  2105                           fsr1l	equ	0xFE1
  2106                           indf2	equ	0xFDF
  2107                           fsr2h	equ	0xFDA
  2108                           fsr2l	equ	0xFD9
  2109                           status	equ	0xFD8
  2110                           
  2111 ;; *************** function _uart_get *****************
  2112 ;; Defined at:
  2113 ;;		line 47 in file "../uart.c"
  2114 ;; Parameters:    Size  Location     Type
  2115 ;;		None
  2116 ;; Auto vars:     Size  Location     Type
  2117 ;;  c               1   18[COMRAM] unsigned char 
  2118 ;; Return value:  Size  Location     Type
  2119 ;;                  1    wreg      unsigned char 
  2120 ;; Registers used:
  2121 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2122 ;; Tracked objects:
  2123 ;;		On entry : 0/0
  2124 ;;		On exit  : 0/0
  2125 ;;		Unchanged: 0/0
  2126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2128 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2129 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2130 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2131 ;;Total ram usage:        3 bytes
  2132 ;; Hardware stack levels used:    1
  2133 ;; Hardware stack levels required when called:    2
  2134 ;; This function calls:
  2135 ;;		Nothing
  2136 ;; This function is called by:
  2137 ;;		_main
  2138 ;; This function uses a non-reentrant model
  2139 ;;
  2140                           
  2141                           	psect	text4
  2142  002866                     __ptext4:
  2143                           	opt stack 0
  2144  002866                     _uart_get:
  2145                           	opt stack 28
  2146                           
  2147                           ;uart.c: 48: char c;
  2148                           ;uart.c: 50: c = rxbuffer[rxop];
  2149                           
  2150                           ;incstack = 0
  2151  002866  0E00               	movlw	low _rxbuffer
  2152  002868  2439               	addwf	_rxop,w,c	;volatile
  2153  00286A  6ED9               	movwf	fsr2l,c
  2154  00286C  0E01               	movlw	high _rxbuffer
  2155  00286E  203A               	addwfc	_rxop+1,w,c	;volatile
  2156  002870  6EDA               	movwf	fsr2h,c
  2157  002872  50DF               	movf	indf2,w,c
  2158  002874  6E13               	movwf	uart_get@c,c
  2159                           
  2160                           ;uart.c: 51: rxop = (rxop+1) & (128 - 1);
  2161  002876  0E01               	movlw	1
  2162  002878  2439               	addwf	_rxop,w,c	;volatile
  2163  00287A  6E11               	movwf	??_uart_get& (0+255),c
  2164  00287C  0E00               	movlw	0
  2165  00287E  203A               	addwfc	_rxop+1,w,c	;volatile
  2166  002880  6E12               	movwf	(??_uart_get+1)& (0+255),c
  2167  002882  0E7F               	movlw	127
  2168  002884  1411               	andwf	??_uart_get,w,c
  2169  002886  6E39               	movwf	_rxop,c	;volatile
  2170  002888  6A3A               	clrf	_rxop+1,c	;volatile
  2171                           
  2172                           ;uart.c: 53: return c;
  2173  00288A  5013               	movf	uart_get@c,w,c
  2174  00288C  0012               	return	
  2175  00288E  0012               	return		;funcret
  2176  002890                     __end_of_uart_get:
  2177                           	opt stack 0
  2178                           tblptru	equ	0xFF8
  2179                           tblptrh	equ	0xFF7
  2180                           tblptrl	equ	0xFF6
  2181                           tablat	equ	0xFF5
  2182                           prodh	equ	0xFF4
  2183                           prodl	equ	0xFF3
  2184                           intcon	equ	0xFF2
  2185                           postinc0	equ	0xFEE
  2186                           wreg	equ	0xFE8
  2187                           postdec1	equ	0xFE5
  2188                           fsr1h	equ	0xFE2
  2189                           fsr1l	equ	0xFE1
  2190                           indf2	equ	0xFDF
  2191                           fsr2h	equ	0xFDA
  2192                           fsr2l	equ	0xFD9
  2193                           status	equ	0xFD8
  2194                           
  2195 ;; *************** function _startupBlinkLed *****************
  2196 ;; Defined at:
  2197 ;;		line 63 in file "../helpers.c"
  2198 ;; Parameters:    Size  Location     Type
  2199 ;;		None
  2200 ;; Auto vars:     Size  Location     Type
  2201 ;;  j               1   21[COMRAM] unsigned char 
  2202 ;; Return value:  Size  Location     Type
  2203 ;;		None               void
  2204 ;; Registers used:
  2205 ;;		wreg, status,2, status,0, cstack
  2206 ;; Tracked objects:
  2207 ;;		On entry : 0/0
  2208 ;;		On exit  : 0/0
  2209 ;;		Unchanged: 0/0
  2210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2212 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2214 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2215 ;;Total ram usage:        1 bytes
  2216 ;; Hardware stack levels used:    1
  2217 ;; Hardware stack levels required when called:    3
  2218 ;; This function calls:
  2219 ;;		_delayms
  2220 ;; This function is called by:
  2221 ;;		_main
  2222 ;; This function uses a non-reentrant model
  2223 ;;
  2224                           
  2225                           	psect	text5
  2226  00279E                     __ptext5:
  2227                           	opt stack 0
  2228  00279E                     _startupBlinkLed:
  2229                           	opt stack 27
  2230                           
  2231                           ;helpers.c: 64: char j;
  2232                           ;helpers.c: 65: LATC4 = LATC5 = 0;
  2233                           
  2234                           ;incstack = 0
  2235  00279E  9A8B               	bcf	3979,5,c	;volatile
  2236  0027A0  988B               	bcf	3979,4,c	;volatile
  2237                           
  2238                           ;helpers.c: 66: for (j = 0; j < 5; j++){
  2239  0027A2  0E00               	movlw	0
  2240  0027A4  6E16               	movwf	startupBlinkLed@j,c
  2241  0027A6  0E04               	movlw	4
  2242  0027A8  6416               	cpfsgt	startupBlinkLed@j,c
  2243  0027AA  D002               	goto	l260
  2244  0027AC  0012               	return	
  2245  0027AE  0012               	return	
  2246  0027B0                     l260:
  2247                           
  2248                           ;helpers.c: 67: LATC4 = LATC5 ^= 1;
  2249  0027B0  7A8B               	btg	3979,5,c	;volatile
  2250  0027B2  AA8B               	btfss	3979,5,c	;volatile
  2251  0027B4  D002               	goto	u4430
  2252  0027B6  888B               	bsf	3979,4,c	;volatile
  2253  0027B8  D001               	goto	l4332
  2254  0027BA                     u4430:
  2255  0027BA  988B               	bcf	3979,4,c	;volatile
  2256  0027BC                     l4332:
  2257                           
  2258                           ;helpers.c: 68: delayms(100);
  2259  0027BC  0E00               	movlw	0
  2260  0027BE  6E12               	movwf	delayms@ms+1,c
  2261  0027C0  0E64               	movlw	100
  2262  0027C2  6E11               	movwf	delayms@ms,c
  2263  0027C4  ECEA  F013         	call	_delayms	;wreg free
  2264  0027C8  2A16               	incf	startupBlinkLed@j,f,c
  2265  0027CA  0E04               	movlw	4
  2266  0027CC  6416               	cpfsgt	startupBlinkLed@j,c
  2267  0027CE  D7F0               	goto	l260
  2268  0027D0  0012               	return	
  2269  0027D2  0012               	return		;funcret
  2270  0027D4                     __end_of_startupBlinkLed:
  2271                           	opt stack 0
  2272                           tblptru	equ	0xFF8
  2273                           tblptrh	equ	0xFF7
  2274                           tblptrl	equ	0xFF6
  2275                           tablat	equ	0xFF5
  2276                           prodh	equ	0xFF4
  2277                           prodl	equ	0xFF3
  2278                           intcon	equ	0xFF2
  2279                           postinc0	equ	0xFEE
  2280                           wreg	equ	0xFE8
  2281                           postdec1	equ	0xFE5
  2282                           fsr1h	equ	0xFE2
  2283                           fsr1l	equ	0xFE1
  2284                           indf2	equ	0xFDF
  2285                           fsr2h	equ	0xFDA
  2286                           fsr2l	equ	0xFD9
  2287                           status	equ	0xFD8
  2288                           
  2289 ;; *************** function _sample_tick *****************
  2290 ;; Defined at:
  2291 ;;		line 55 in file "../sample.c"
  2292 ;; Parameters:    Size  Location     Type
  2293 ;;		None
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;  rssitemp        2   20[COMRAM] unsigned int 
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  2   16[COMRAM] int 
  2298 ;; Registers used:
  2299 ;;		wreg, status,2, status,0
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2305 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2306 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2307 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2308 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2309 ;;Total ram usage:        6 bytes
  2310 ;; Hardware stack levels used:    1
  2311 ;; Hardware stack levels required when called:    2
  2312 ;; This function calls:
  2313 ;;		Nothing
  2314 ;; This function is called by:
  2315 ;;		_main
  2316 ;; This function uses a non-reentrant model
  2317 ;;
  2318                           
  2319                           	psect	text6
  2320  002426                     __ptext6:
  2321                           	opt stack 0
  2322  002426                     _sample_tick:
  2323                           	opt stack 28
  2324                           
  2325                           ;sample.c: 57: if (!(ADCON0 & 0b00000010)) {
  2326                           
  2327                           ;incstack = 0
  2328  002426  B2C2               	btfsc	4034,1,c	;volatile
  2329  002428  D021               	goto	l4726
  2330                           
  2331                           ;sample.c: 58: uint16_t rssitemp = ((ADRESH<<8) | ADRESL) >> 2;
  2332  00242A  50C3               	movf	4035,w,c	;volatile
  2333  00242C  CFC4 F013          	movff	4036,??_sample_tick	;volatile
  2334  002430  6A14               	clrf	(??_sample_tick+1)& (0+255),c
  2335  002432  C013  F014         	movff	??_sample_tick,??_sample_tick+1
  2336  002436  6A13               	clrf	??_sample_tick,c
  2337  002438  1213               	iorwf	??_sample_tick,f,c
  2338  00243A  0E00               	movlw	0
  2339  00243C  1214               	iorwf	??_sample_tick+1,f,c
  2340  00243E  3414               	rlcf	??_sample_tick+1,w,c
  2341  002440  3214               	rrcf	??_sample_tick+1,f,c
  2342  002442  3213               	rrcf	??_sample_tick,f,c
  2343  002444  3414               	rlcf	??_sample_tick+1,w,c
  2344  002446  3214               	rrcf	??_sample_tick+1,f,c
  2345  002448  3213               	rrcf	??_sample_tick,f,c
  2346  00244A  C013  F015         	movff	??_sample_tick,sample_tick@rssitemp
  2347  00244E  C014  F016         	movff	??_sample_tick+1,sample_tick@rssitemp+1
  2348                           
  2349                           ;sample.c: 59: current_rssi = (current_rssi>rssitemp)?current_rssi:rssitemp;
  2350  002452  5035               	movf	_current_rssi,w,c	;volatile
  2351  002454  5C15               	subwf	sample_tick@rssitemp,w,c
  2352  002456  5036               	movf	_current_rssi+1,w,c	;volatile
  2353  002458  5816               	subwfb	sample_tick@rssitemp+1,w,c
  2354  00245A  A0D8               	btfss	status,0,c
  2355  00245C  D005               	goto	l636
  2356  00245E  C015  F035         	movff	sample_tick@rssitemp,_current_rssi	;volatile
  2357  002462  C016  F036         	movff	sample_tick@rssitemp+1,_current_rssi+1	;volatile
  2358  002466  D000               	goto	l636
  2359  002468                     l636:
  2360                           
  2361                           ;sample.c: 60: ADCON0bits.GO = 1;
  2362  002468  82C2               	bsf	4034,1,c	;volatile
  2363  00246A  D000               	goto	l4726
  2364  00246C                     l4726:
  2365                           
  2366                           ;sample.c: 61: }
  2367                           ;sample.c: 63: if (samples_ip != samples_op) return 1;
  2368  00246C  5042               	movf	_samples_op,w,c
  2369  00246E  1841               	xorwf	_samples_ip,w,c	;volatile
  2370  002470  B4D8               	btfsc	status,2,c
  2371  002472  D005               	goto	l4732
  2372  002474  0E00               	movlw	0
  2373  002476  6E12               	movwf	?_sample_tick+1,c
  2374  002478  0E01               	movlw	1
  2375  00247A  6E11               	movwf	?_sample_tick,c
  2376  00247C  0012               	return	
  2377  00247E                     l4732:
  2378                           
  2379                           ;sample.c: 64: return 0;
  2380  00247E  0E00               	movlw	0
  2381  002480  6E12               	movwf	?_sample_tick+1,c
  2382  002482  0E00               	movlw	0
  2383  002484  6E11               	movwf	?_sample_tick,c
  2384  002486  0012               	return	
  2385  002488  0012               	return		;funcret
  2386  00248A                     __end_of_sample_tick:
  2387                           	opt stack 0
  2388                           tblptru	equ	0xFF8
  2389                           tblptrh	equ	0xFF7
  2390                           tblptrl	equ	0xFF6
  2391                           tablat	equ	0xFF5
  2392                           prodh	equ	0xFF4
  2393                           prodl	equ	0xFF3
  2394                           intcon	equ	0xFF2
  2395                           postinc0	equ	0xFEE
  2396                           wreg	equ	0xFE8
  2397                           postdec1	equ	0xFE5
  2398                           fsr1h	equ	0xFE2
  2399                           fsr1l	equ	0xFE1
  2400                           indf2	equ	0xFDF
  2401                           fsr2h	equ	0xFDA
  2402                           fsr2l	equ	0xFD9
  2403                           status	equ	0xFD8
  2404                           
  2405 ;; *************** function _sample_pop *****************
  2406 ;; Defined at:
  2407 ;;		line 67 in file "../sample.c"
  2408 ;; Parameters:    Size  Location     Type
  2409 ;;		None
  2410 ;; Auto vars:     Size  Location     Type
  2411 ;;  s               4   20[COMRAM] struct .
  2412 ;; Return value:  Size  Location     Type
  2413 ;;                  4   16[COMRAM] struct .
  2414 ;; Registers used:
  2415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2416 ;; Tracked objects:
  2417 ;;		On entry : 0/0
  2418 ;;		On exit  : 0/0
  2419 ;;		Unchanged: 0/0
  2420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2421 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2422 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2424 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2425 ;;Total ram usage:        8 bytes
  2426 ;; Hardware stack levels used:    1
  2427 ;; Hardware stack levels required when called:    2
  2428 ;; This function calls:
  2429 ;;		Nothing
  2430 ;; This function is called by:
  2431 ;;		_main
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434                           
  2435                           	psect	text7
  2436  002764                     __ptext7:
  2437                           	opt stack 0
  2438  002764                     _sample_pop:
  2439                           	opt stack 28
  2440                           
  2441                           ;sample.c: 68: sample_t s = samples[samples_op];
  2442                           
  2443                           ;incstack = 0
  2444  002764  5042               	movf	_samples_op,w,c
  2445  002766  0D04               	mullw	4
  2446  002768  0E80               	movlw	low _samples
  2447  00276A  24F3               	addwf	prodl,w,c
  2448  00276C  6ED9               	movwf	fsr2l,c
  2449  00276E  0E01               	movlw	high _samples
  2450  002770  20F4               	addwfc	prodh,w,c
  2451  002772  6EDA               	movwf	fsr2h,c
  2452  002774  CFDE F015          	movff	postinc2,sample_pop@s
  2453  002778  CFDE F016          	movff	postinc2,sample_pop@s+1
  2454  00277C  CFDE F017          	movff	postinc2,sample_pop@s+2
  2455  002780  CFDE F018          	movff	postinc2,sample_pop@s+3
  2456                           
  2457                           ;sample.c: 69: samples_op = (samples_op+1) & (32-1);
  2458  002784  2842               	incf	_samples_op,w,c
  2459  002786  0B1F               	andlw	31
  2460  002788  6E42               	movwf	_samples_op,c
  2461                           
  2462                           ;sample.c: 70: return s;
  2463  00278A  C015  F011         	movff	sample_pop@s,?_sample_pop
  2464  00278E  C016  F012         	movff	sample_pop@s+1,?_sample_pop+1
  2465  002792  C017  F013         	movff	sample_pop@s+2,?_sample_pop+2
  2466  002796  C018  F014         	movff	sample_pop@s+3,?_sample_pop+3
  2467  00279A  0012               	return	
  2468  00279C  0012               	return		;funcret
  2469  00279E                     __end_of_sample_pop:
  2470                           	opt stack 0
  2471                           tblptru	equ	0xFF8
  2472                           tblptrh	equ	0xFF7
  2473                           tblptrl	equ	0xFF6
  2474                           tablat	equ	0xFF5
  2475                           prodh	equ	0xFF4
  2476                           prodl	equ	0xFF3
  2477                           intcon	equ	0xFF2
  2478                           postinc0	equ	0xFEE
  2479                           wreg	equ	0xFE8
  2480                           postdec1	equ	0xFE5
  2481                           fsr1h	equ	0xFE2
  2482                           fsr1l	equ	0xFE1
  2483                           indf2	equ	0xFDF
  2484                           postinc2	equ	0xFDE
  2485                           fsr2h	equ	0xFDA
  2486                           fsr2l	equ	0xFD9
  2487                           status	equ	0xFD8
  2488                           
  2489 ;; *************** function _sample_init *****************
  2490 ;; Defined at:
  2491 ;;		line 13 in file "../sample.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;		None
  2494 ;; Auto vars:     Size  Location     Type
  2495 ;;		None
  2496 ;; Return value:  Size  Location     Type
  2497 ;;		None               void
  2498 ;; Registers used:
  2499 ;;		wreg, status,2
  2500 ;; Tracked objects:
  2501 ;;		On entry : 0/0
  2502 ;;		On exit  : 0/0
  2503 ;;		Unchanged: 0/0
  2504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2509 ;;Total ram usage:        0 bytes
  2510 ;; Hardware stack levels used:    1
  2511 ;; Hardware stack levels required when called:    2
  2512 ;; This function calls:
  2513 ;;		Nothing
  2514 ;; This function is called by:
  2515 ;;		_main
  2516 ;; This function uses a non-reentrant model
  2517 ;;
  2518                           
  2519                           	psect	text8
  2520  002942                     __ptext8:
  2521                           	opt stack 0
  2522  002942                     _sample_init:
  2523                           	opt stack 28
  2524                           
  2525                           ;sample.c: 15: T0CON = 0b10000110;
  2526                           
  2527                           ;incstack = 0
  2528  002942  0E86               	movlw	134
  2529  002944  6ED5               	movwf	4053,c	;volatile
  2530                           
  2531                           ;sample.c: 18: ANSEL = 0b00000000;
  2532  002946  0E00               	movlw	0
  2533  002948  6E7E               	movwf	3966,c	;volatile
  2534                           
  2535                           ;sample.c: 19: ANSELH = 0b00000100;
  2536  00294A  0E04               	movlw	4
  2537  00294C  6E7F               	movwf	3967,c	;volatile
  2538                           
  2539                           ;sample.c: 20: ADCON0 = 0b00101001;
  2540  00294E  0E29               	movlw	41
  2541  002950  6EC2               	movwf	4034,c	;volatile
  2542                           
  2543                           ;sample.c: 21: ADCON1 = 0b00000000;
  2544  002952  0E00               	movlw	0
  2545  002954  6EC1               	movwf	4033,c	;volatile
  2546                           
  2547                           ;sample.c: 22: ADCON2 = 0b10001000;
  2548  002956  0E88               	movlw	136
  2549  002958  6EC0               	movwf	4032,c	;volatile
  2550  00295A  0012               	return		;funcret
  2551  00295C                     __end_of_sample_init:
  2552                           	opt stack 0
  2553                           tblptru	equ	0xFF8
  2554                           tblptrh	equ	0xFF7
  2555                           tblptrl	equ	0xFF6
  2556                           tablat	equ	0xFF5
  2557                           prodh	equ	0xFF4
  2558                           prodl	equ	0xFF3
  2559                           intcon	equ	0xFF2
  2560                           postinc0	equ	0xFEE
  2561                           wreg	equ	0xFE8
  2562                           postdec1	equ	0xFE5
  2563                           fsr1h	equ	0xFE2
  2564                           fsr1l	equ	0xFE1
  2565                           indf2	equ	0xFDF
  2566                           postinc2	equ	0xFDE
  2567                           fsr2h	equ	0xFDA
  2568                           fsr2l	equ	0xFD9
  2569                           status	equ	0xFD8
  2570                           
  2571 ;; *************** function _parseCmd *****************
  2572 ;; Defined at:
  2573 ;;		line 184 in file "../helpers.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;  linep           2   12[BANK0 ] PTR unsigned char 
  2576 ;;		 -> main@line(32), 
  2577 ;;  line_len        1   14[BANK0 ] unsigned char 
  2578 ;;  settingsp       2   15[BANK0 ] PTR struct .
  2579 ;;		 -> main@settings(12), 
  2580 ;; Auto vars:     Size  Location     Type
  2581 ;;		None
  2582 ;; Return value:  Size  Location     Type
  2583 ;;		None               void
  2584 ;; Registers used:
  2585 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2591 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2594 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2595 ;;Total ram usage:        5 bytes
  2596 ;; Hardware stack levels used:    1
  2597 ;; Hardware stack levels required when called:    6
  2598 ;; This function calls:
  2599 ;;		_delayms
  2600 ;;		_enter_rx
  2601 ;;		_enter_tx
  2602 ;;		_gaoTx
  2603 ;;		_kangthaiTx
  2604 ;;		_nexaTx
  2605 ;;		_parseSettings
  2606 ;;		_uart_puts
  2607 ;;		_wavemanTx
  2608 ;; This function is called by:
  2609 ;;		_main
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613                           	psect	text9
  2614  001786                     __ptext9:
  2615                           	opt stack 0
  2616  001786                     _parseCmd:
  2617                           	opt stack 24
  2618                           
  2619                           ;helpers.c: 185: switch(linep[1]){
  2620                           
  2621                           ;incstack = 0
  2622  001786  D095               	goto	l5726
  2623  001788                     l5696:
  2624                           
  2625                           ;helpers.c: 187: if (line_len == 8) gaoTx(linep+2, settingsp->gao_sends);
  2626  001788  0E08               	movlw	8
  2627  00178A  0100               	movlb	0	; () banked
  2628  00178C  196E               	xorwf	parseCmd@line_len& (0+255),w,b
  2629  00178E  A4D8               	btfss	status,2,c
  2630  001790  0012               	return	
  2631                           
  2632                           ; BSR set to: 0
  2633  001792  0E02               	movlw	2
  2634  001794  0100               	movlb	0	; () banked
  2635  001796  256C               	addwf	parseCmd@linep& (0+255),w,b
  2636  001798  6E16               	movwf	gaoTx@s,c
  2637  00179A  0E00               	movlw	0
  2638  00179C  0100               	movlb	0	; () banked
  2639  00179E  216D               	addwfc	(parseCmd@linep+1)& (0+255),w,b
  2640  0017A0  6E17               	movwf	gaoTx@s+1,c
  2641  0017A2  0100               	movlb	0	; () banked
  2642  0017A4  EE20 F003          	lfsr	2,3
  2643  0017A8  516F               	movf	parseCmd@settingsp& (0+255),w,b
  2644  0017AA  26D9               	addwf	fsr2l,f,c
  2645  0017AC  5170               	movf	(parseCmd@settingsp+1)& (0+255),w,b
  2646  0017AE  22DA               	addwfc	fsr2h,f,c
  2647  0017B0  50DF               	movf	indf2,w,c
  2648  0017B2  6E18               	movwf	gaoTx@resends,c
  2649  0017B4  ECBA  F007         	call	_gaoTx	;wreg free
  2650                           
  2651                           ;helpers.c: 188: break;
  2652  0017B8  0012               	return	
  2653  0017BA                     l5700:
  2654                           
  2655                           ;helpers.c: 190: if (line_len == 6) wavemanTx(linep+2, settingsp->waveman_sends);
  2656  0017BA  0E06               	movlw	6
  2657  0017BC  0100               	movlb	0	; () banked
  2658  0017BE  196E               	xorwf	parseCmd@line_len& (0+255),w,b
  2659  0017C0  A4D8               	btfss	status,2,c
  2660  0017C2  0012               	return	
  2661                           
  2662                           ; BSR set to: 0
  2663  0017C4  0E02               	movlw	2
  2664  0017C6  0100               	movlb	0	; () banked
  2665  0017C8  256C               	addwf	parseCmd@linep& (0+255),w,b
  2666  0017CA  6E17               	movwf	wavemanTx@s,c
  2667  0017CC  0E00               	movlw	0
  2668  0017CE  0100               	movlb	0	; () banked
  2669  0017D0  216D               	addwfc	(parseCmd@linep+1)& (0+255),w,b
  2670  0017D2  6E18               	movwf	wavemanTx@s+1,c
  2671  0017D4  0100               	movlb	0	; () banked
  2672  0017D6  EE20 F008          	lfsr	2,8
  2673  0017DA  516F               	movf	parseCmd@settingsp& (0+255),w,b
  2674  0017DC  26D9               	addwf	fsr2l,f,c
  2675  0017DE  5170               	movf	(parseCmd@settingsp+1)& (0+255),w,b
  2676  0017E0  22DA               	addwfc	fsr2h,f,c
  2677  0017E2  50DF               	movf	indf2,w,c
  2678  0017E4  6E19               	movwf	wavemanTx@resends,c
  2679  0017E6  EC37  F00A         	call	_wavemanTx	;wreg free
  2680                           
  2681                           ;helpers.c: 191: break;
  2682  0017EA  0012               	return	
  2683  0017EC                     l5704:
  2684                           
  2685                           ;helpers.c: 193: if ((line_len == 12)||(line_len == 13)) nexaTx(linep+2, line_len-2, set
      +                          tingsp->nexa_sends);
  2686  0017EC  0E0C               	movlw	12
  2687  0017EE  0100               	movlb	0	; () banked
  2688  0017F0  196E               	xorwf	parseCmd@line_len& (0+255),w,b
  2689  0017F2  B4D8               	btfsc	status,2,c
  2690  0017F4  D005               	goto	l5708
  2691                           
  2692                           ; BSR set to: 0
  2693  0017F6  0E0D               	movlw	13
  2694  0017F8  0100               	movlb	0	; () banked
  2695  0017FA  196E               	xorwf	parseCmd@line_len& (0+255),w,b
  2696  0017FC  A4D8               	btfss	status,2,c
  2697  0017FE  0012               	return	
  2698  001800                     l5708:
  2699                           
  2700                           ; BSR set to: 0
  2701  001800  0E02               	movlw	2
  2702  001802  0100               	movlb	0	; () banked
  2703  001804  256C               	addwf	parseCmd@linep& (0+255),w,b
  2704  001806  6E16               	movwf	nexaTx@s,c
  2705  001808  0E00               	movlw	0
  2706  00180A  0100               	movlb	0	; () banked
  2707  00180C  216D               	addwfc	(parseCmd@linep+1)& (0+255),w,b
  2708  00180E  6E17               	movwf	nexaTx@s+1,c
  2709  001810  0100               	movlb	0	; () banked
  2710  001812  516E               	movf	parseCmd@line_len& (0+255),w,b
  2711  001814  0FFE               	addlw	254
  2712  001816  6E18               	movwf	nexaTx@len,c
  2713  001818  0100               	movlb	0	; () banked
  2714  00181A  EE20 F006          	lfsr	2,6
  2715  00181E  516F               	movf	parseCmd@settingsp& (0+255),w,b
  2716  001820  26D9               	addwf	fsr2l,f,c
  2717  001822  5170               	movf	(parseCmd@settingsp+1)& (0+255),w,b
  2718  001824  22DA               	addwfc	fsr2h,f,c
  2719  001826  50DF               	movf	indf2,w,c
  2720  001828  6E19               	movwf	nexaTx@resends,c
  2721  00182A  EC8B  F006         	call	_nexaTx	;wreg free
  2722                           
  2723                           ;helpers.c: 194: break;
  2724  00182E  0012               	return	
  2725  001830                     l5710:
  2726                           
  2727                           ;helpers.c: 196: if (line_len == 9) kangthaiTx(linep+2, settingsp->kangthai_sends);
  2728  001830  0E09               	movlw	9
  2729  001832  0100               	movlb	0	; () banked
  2730  001834  196E               	xorwf	parseCmd@line_len& (0+255),w,b
  2731  001836  A4D8               	btfss	status,2,c
  2732  001838  0012               	return	
  2733                           
  2734                           ; BSR set to: 0
  2735  00183A  0E02               	movlw	2
  2736  00183C  0100               	movlb	0	; () banked
  2737  00183E  256C               	addwf	parseCmd@linep& (0+255),w,b
  2738  001840  6E16               	movwf	kangthaiTx@s,c
  2739  001842  0E00               	movlw	0
  2740  001844  0100               	movlb	0	; () banked
  2741  001846  216D               	addwfc	(parseCmd@linep+1)& (0+255),w,b
  2742  001848  6E17               	movwf	kangthaiTx@s+1,c
  2743  00184A  0100               	movlb	0	; () banked
  2744  00184C  EE20 F009          	lfsr	2,9
  2745  001850  516F               	movf	parseCmd@settingsp& (0+255),w,b
  2746  001852  26D9               	addwf	fsr2l,f,c
  2747  001854  5170               	movf	(parseCmd@settingsp+1)& (0+255),w,b
  2748  001856  22DA               	addwfc	fsr2h,f,c
  2749  001858  50DF               	movf	indf2,w,c
  2750  00185A  6E18               	movwf	kangthaiTx@resends,c
  2751  00185C  EC65  F009         	call	_kangthaiTx	;wreg free
  2752                           
  2753                           ;helpers.c: 197: break;
  2754  001860  0012               	return	
  2755  001862                     l5714:
  2756                           
  2757                           ;helpers.c: 199: uart_puts("MultiTRX HWID 1.1, FWID 1.3 - skagmo.com\r\n");
  2758  001862  0E37               	movlw	low STR_61
  2759  001864  6E14               	movwf	uart_puts@s,c
  2760  001866  0EFE               	movlw	high STR_61
  2761  001868  6E15               	movwf	uart_puts@s+1,c
  2762  00186A  ECCC  F012         	call	_uart_puts	;wreg free
  2763                           
  2764                           ;helpers.c: 200: break;
  2765  00186E  0012               	return	
  2766  001870                     l5716:
  2767                           
  2768                           ;helpers.c: 202: parseSettings(linep+2, line_len-2, settingsp);
  2769  001870  0E02               	movlw	2
  2770  001872  0100               	movlb	0	; () banked
  2771  001874  256C               	addwf	parseCmd@linep& (0+255),w,b
  2772  001876  6E2F               	movwf	parseSettings@linep,c
  2773  001878  0E00               	movlw	0
  2774  00187A  0100               	movlb	0	; () banked
  2775  00187C  216D               	addwfc	(parseCmd@linep+1)& (0+255),w,b
  2776  00187E  6E30               	movwf	parseSettings@linep+1,c
  2777  001880  0100               	movlb	0	; () banked
  2778  001882  516E               	movf	parseCmd@line_len& (0+255),w,b
  2779  001884  0FFE               	addlw	254
  2780  001886  6E31               	movwf	parseSettings@line_len,c
  2781  001888  C06F  F032         	movff	parseCmd@settingsp,parseSettings@settingsp
  2782  00188C  C070  F033         	movff	parseCmd@settingsp+1,parseSettings@settingsp+1
  2783  001890  EC43  F000         	call	_parseSettings	;wreg free
  2784                           
  2785                           ;helpers.c: 203: break;
  2786  001894  0012               	return	
  2787  001896                     l312:
  2788                           
  2789                           ; BSR set to: 0
  2790  001896  00FF               	reset		;# 
  2791                           
  2792                           ;helpers.c: 206: break;
  2793  001898  0012               	return	
  2794  00189A                     l5718:
  2795                           
  2796                           ;helpers.c: 208: enter_tx();
  2797  00189A  ECBB  F014         	call	_enter_tx	;wreg free
  2798                           
  2799                           ;helpers.c: 209: LATB2 = 1;
  2800  00189E  848A               	bsf	3978,2,c	;volatile
  2801                           
  2802                           ;helpers.c: 210: delayms(5000);
  2803  0018A0  0E13               	movlw	19
  2804  0018A2  6E12               	movwf	delayms@ms+1,c
  2805  0018A4  0E88               	movlw	136
  2806  0018A6  6E11               	movwf	delayms@ms,c
  2807  0018A8  ECEA  F013         	call	_delayms	;wreg free
  2808                           
  2809                           ;helpers.c: 211: enter_rx();
  2810  0018AC  EC5C  F014         	call	_enter_rx	;wreg free
  2811                           
  2812                           ;helpers.c: 213: }
  2813                           
  2814                           ;helpers.c: 212: break;
  2815  0018B0  0012               	return	
  2816  0018B2                     l5726:
  2817  0018B2  0100               	movlb	0	; () banked
  2818  0018B4  EE20 F001          	lfsr	2,1
  2819  0018B8  516C               	movf	parseCmd@linep& (0+255),w,b
  2820  0018BA  26D9               	addwf	fsr2l,f,c
  2821  0018BC  516D               	movf	(parseCmd@linep+1)& (0+255),w,b
  2822  0018BE  22DA               	addwfc	fsr2h,f,c
  2823  0018C0  50DF               	movf	indf2,w,c
  2824                           
  2825                           ; Switch size 1, requested type "space"
  2826                           ; Number of cases is 8, Range of values is 33 to 88
  2827                           ; switch strategies available:
  2828                           ; Name         Instructions Cycles
  2829                           ; simple_byte           25    13 (average)
  2830                           ;	Chosen strategy is simple_byte
  2831  0018C2  0A21               	xorlw	33	; case 33
  2832  0018C4  B4D8               	btfsc	status,2,c
  2833  0018C6  D7E9               	goto	l5718
  2834  0018C8  0A66               	xorlw	102	; case 71
  2835  0018CA  B4D8               	btfsc	status,2,c
  2836  0018CC  D75D               	goto	l5696
  2837  0018CE  0A0C               	xorlw	12	; case 75
  2838  0018D0  B4D8               	btfsc	status,2,c
  2839  0018D2  D7AE               	goto	l5710
  2840  0018D4  0A05               	xorlw	5	; case 78
  2841  0018D6  B4D8               	btfsc	status,2,c
  2842  0018D8  D789               	goto	l5704
  2843  0018DA  0A1E               	xorlw	30	; case 80
  2844  0018DC  B4D8               	btfsc	status,2,c
  2845  0018DE  D7C1               	goto	l5714
  2846  0018E0  0A03               	xorlw	3	; case 83
  2847  0018E2  B4D8               	btfsc	status,2,c
  2848  0018E4  D7C5               	goto	l5716
  2849  0018E6  0A04               	xorlw	4	; case 87
  2850  0018E8  B4D8               	btfsc	status,2,c
  2851  0018EA  D767               	goto	l5700
  2852  0018EC  0A0F               	xorlw	15	; case 88
  2853  0018EE  A4D8               	btfss	status,2,c
  2854  0018F0  0012               	return	
  2855  0018F2  D7D1               	goto	l312
  2856                           
  2857                           ; BSR set to: 0
  2858  0018F4  0012               	return		;funcret
  2859  0018F6                     __end_of_parseCmd:
  2860                           	opt stack 0
  2861                           tblptru	equ	0xFF8
  2862                           tblptrh	equ	0xFF7
  2863                           tblptrl	equ	0xFF6
  2864                           tablat	equ	0xFF5
  2865                           prodh	equ	0xFF4
  2866                           prodl	equ	0xFF3
  2867                           intcon	equ	0xFF2
  2868                           postinc0	equ	0xFEE
  2869                           wreg	equ	0xFE8
  2870                           postdec1	equ	0xFE5
  2871                           fsr1h	equ	0xFE2
  2872                           fsr1l	equ	0xFE1
  2873                           indf2	equ	0xFDF
  2874                           postinc2	equ	0xFDE
  2875                           fsr2h	equ	0xFDA
  2876                           fsr2l	equ	0xFD9
  2877                           status	equ	0xFD8
  2878                           
  2879 ;; *************** function _wavemanTx *****************
  2880 ;; Defined at:
  2881 ;;		line 6 in file "../waveman.c"
  2882 ;; Parameters:    Size  Location     Type
  2883 ;;  s               2   22[COMRAM] PTR unsigned char 
  2884 ;;		 -> main@line(32), 
  2885 ;;  resends         1   24[COMRAM] unsigned char 
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;  resend          1   29[COMRAM] unsigned char 
  2888 ;;  temp            2   33[COMRAM] unsigned int 
  2889 ;;  data            2   30[COMRAM] unsigned int 
  2890 ;;  bitnr           1   32[COMRAM] unsigned char 
  2891 ;; Return value:  Size  Location     Type
  2892 ;;		None               void
  2893 ;; Registers used:
  2894 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2900 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2901 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2902 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2903 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2904 ;;Total ram usage:       13 bytes
  2905 ;; Hardware stack levels used:    1
  2906 ;; Hardware stack levels required when called:    5
  2907 ;; This function calls:
  2908 ;;		___wmul
  2909 ;;		_enter_rx
  2910 ;;		_enter_tx
  2911 ;;		_reverse
  2912 ;;		_waitTimer
  2913 ;; This function is called by:
  2914 ;;		_parseCmd
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918                           	psect	text10
  2919  00146E                     __ptext10:
  2920                           	opt stack 0
  2921  00146E                     _wavemanTx:
  2922                           	opt stack 24
  2923                           
  2924                           ;waveman.c: 13: unsigned int data;
  2925                           ;waveman.c: 14: unsigned int temp;
  2926                           ;waveman.c: 15: char bitnr;
  2927                           ;waveman.c: 17: data = reverse(s[0] - 65);
  2928                           
  2929                           ;incstack = 0
  2930  00146E  C017  FFD9         	movff	wavemanTx@s,fsr2l
  2931  001472  C018  FFDA         	movff	wavemanTx@s+1,fsr2h
  2932  001476  50DF               	movf	indf2,w,c
  2933  001478  0FBF               	addlw	191
  2934  00147A  EC1D  F014         	call	_reverse
  2935  00147E  6E1A               	movwf	??_wavemanTx& (0+255),c
  2936  001480  501A               	movf	??_wavemanTx,w,c
  2937  001482  6E1F               	movwf	wavemanTx@data,c
  2938  001484  6A20               	clrf	wavemanTx@data+1,c
  2939                           
  2940                           ;waveman.c: 18: data <<= 8;
  2941  001486  501F               	movf	wavemanTx@data,w,c
  2942  001488  6E20               	movwf	wavemanTx@data+1,c
  2943  00148A  6A1F               	clrf	wavemanTx@data,c
  2944                           
  2945                           ;waveman.c: 19: temp = (s[1] - '0') * 10;
  2946  00148C  EE20 F001          	lfsr	2,1
  2947  001490  5017               	movf	wavemanTx@s,w,c
  2948  001492  26D9               	addwf	fsr2l,f,c
  2949  001494  5018               	movf	wavemanTx@s+1,w,c
  2950  001496  22DA               	addwfc	fsr2h,f,c
  2951  001498  50DF               	movf	indf2,w,c
  2952  00149A  6E1A               	movwf	??_wavemanTx& (0+255),c
  2953  00149C  0ED0               	movlw	208
  2954  00149E  241A               	addwf	??_wavemanTx,w,c
  2955  0014A0  6E11               	movwf	___wmul@multiplier,c
  2956  0014A2  6A12               	clrf	___wmul@multiplier+1,c
  2957  0014A4  0EFF               	movlw	255
  2958  0014A6  2212               	addwfc	___wmul@multiplier+1,f,c
  2959  0014A8  0E00               	movlw	0
  2960  0014AA  6E14               	movwf	___wmul@multiplicand+1,c
  2961  0014AC  0E0A               	movlw	10
  2962  0014AE  6E13               	movwf	___wmul@multiplicand,c
  2963  0014B0  EC48  F014         	call	___wmul	;wreg free
  2964  0014B4  C011  F022         	movff	?___wmul,wavemanTx@temp
  2965  0014B8  C012  F023         	movff	?___wmul+1,wavemanTx@temp+1
  2966                           
  2967                           ;waveman.c: 20: temp += (s[2] - '0');
  2968  0014BC  0ED0               	movlw	208
  2969  0014BE  6E1A               	movwf	??_wavemanTx& (0+255),c
  2970  0014C0  0EFF               	movlw	255
  2971  0014C2  6E1B               	movwf	(??_wavemanTx+1)& (0+255),c
  2972  0014C4  EE20 F002          	lfsr	2,2
  2973  0014C8  5017               	movf	wavemanTx@s,w,c
  2974  0014CA  26D9               	addwf	fsr2l,f,c
  2975  0014CC  5018               	movf	wavemanTx@s+1,w,c
  2976  0014CE  22DA               	addwfc	fsr2h,f,c
  2977  0014D0  50DF               	movf	indf2,w,c
  2978  0014D2  6E1C               	movwf	(??_wavemanTx+2)& (0+255),c
  2979  0014D4  6A1D               	clrf	(??_wavemanTx+3)& (0+255),c
  2980  0014D6  501A               	movf	??_wavemanTx,w,c
  2981  0014D8  261C               	addwf	??_wavemanTx+2,f,c
  2982  0014DA  501B               	movf	??_wavemanTx+1,w,c
  2983  0014DC  221D               	addwfc	??_wavemanTx+3,f,c
  2984  0014DE  501C               	movf	??_wavemanTx+2,w,c
  2985  0014E0  2622               	addwf	wavemanTx@temp,f,c
  2986  0014E2  501D               	movf	??_wavemanTx+3,w,c
  2987  0014E4  2223               	addwfc	wavemanTx@temp+1,f,c
  2988                           
  2989                           ;waveman.c: 21: temp--;
  2990  0014E6  0622               	decf	wavemanTx@temp,f,c
  2991  0014E8  A0D8               	btfss	status,0,c
  2992  0014EA  0623               	decf	wavemanTx@temp+1,f,c
  2993                           
  2994                           ;waveman.c: 22: temp = reverse(temp);
  2995  0014EC  5022               	movf	wavemanTx@temp,w,c
  2996  0014EE  EC1D  F014         	call	_reverse
  2997  0014F2  6E1A               	movwf	??_wavemanTx& (0+255),c
  2998  0014F4  501A               	movf	??_wavemanTx,w,c
  2999  0014F6  6E22               	movwf	wavemanTx@temp,c
  3000  0014F8  6A23               	clrf	wavemanTx@temp+1,c
  3001                           
  3002                           ;waveman.c: 23: temp <<= 4;
  3003  0014FA  3A22               	swapf	wavemanTx@temp,f,c
  3004  0014FC  3A23               	swapf	wavemanTx@temp+1,f,c
  3005  0014FE  0EF0               	movlw	240
  3006  001500  1623               	andwf	wavemanTx@temp+1,f,c
  3007  001502  5022               	movf	wavemanTx@temp,w,c
  3008  001504  0B0F               	andlw	15
  3009  001506  1223               	iorwf	wavemanTx@temp+1,f,c
  3010  001508  0EF0               	movlw	240
  3011  00150A  1622               	andwf	wavemanTx@temp,f,c
  3012                           
  3013                           ;waveman.c: 24: data += temp;
  3014  00150C  5022               	movf	wavemanTx@temp,w,c
  3015  00150E  261F               	addwf	wavemanTx@data,f,c
  3016  001510  5023               	movf	wavemanTx@temp+1,w,c
  3017  001512  2220               	addwfc	wavemanTx@data+1,f,c
  3018                           
  3019                           ;waveman.c: 25: if (s[3] - '0') data |= 0x7;
  3020  001514  0ED0               	movlw	208
  3021  001516  6E1A               	movwf	??_wavemanTx& (0+255),c
  3022  001518  0EFF               	movlw	255
  3023  00151A  6E1B               	movwf	(??_wavemanTx+1)& (0+255),c
  3024  00151C  EE20 F003          	lfsr	2,3
  3025  001520  5017               	movf	wavemanTx@s,w,c
  3026  001522  26D9               	addwf	fsr2l,f,c
  3027  001524  5018               	movf	wavemanTx@s+1,w,c
  3028  001526  22DA               	addwfc	fsr2h,f,c
  3029  001528  50DF               	movf	indf2,w,c
  3030  00152A  6E1C               	movwf	(??_wavemanTx+2)& (0+255),c
  3031  00152C  6A1D               	clrf	(??_wavemanTx+3)& (0+255),c
  3032  00152E  501A               	movf	??_wavemanTx,w,c
  3033  001530  261C               	addwf	??_wavemanTx+2,f,c
  3034  001532  501B               	movf	??_wavemanTx+1,w,c
  3035  001534  221D               	addwfc	??_wavemanTx+3,f,c
  3036  001536  501C               	movf	??_wavemanTx+2,w,c
  3037  001538  101D               	iorwf	??_wavemanTx+3,w,c
  3038  00153A  B4D8               	btfsc	status,2,c
  3039  00153C  D003               	goto	l5280
  3040  00153E  0E07               	movlw	7
  3041  001540  121F               	iorwf	wavemanTx@data,f,c
  3042  001542  D000               	goto	l5280
  3043  001544                     l5280:
  3044                           
  3045                           ;waveman.c: 27: enter_tx();
  3046  001544  ECBB  F014         	call	_enter_tx	;wreg free
  3047                           
  3048                           ;waveman.c: 28: for (char resend = 0; resend < resends; resend++){
  3049  001548  0E00               	movlw	0
  3050  00154A  6E1E               	movwf	wavemanTx@resend,c
  3051  00154C  D053               	goto	l5318
  3052  00154E                     l560:
  3053                           
  3054                           ;waveman.c: 29: temp = data;
  3055  00154E  C01F  F022         	movff	wavemanTx@data,wavemanTx@temp
  3056  001552  C020  F023         	movff	wavemanTx@data+1,wavemanTx@temp+1
  3057                           
  3058                           ;waveman.c: 30: LATB2 = 1;
  3059  001556  848A               	bsf	3978,2,c	;volatile
  3060                           
  3061                           ;waveman.c: 31: waitTimer(272);
  3062  001558  0E01               	movlw	1
  3063  00155A  6E12               	movwf	waitTimer@value+1,c
  3064  00155C  0E10               	movlw	16
  3065  00155E  6E11               	movwf	waitTimer@value,c
  3066  001560  EC04  F014         	call	_waitTimer	;wreg free
  3067                           
  3068                           ;waveman.c: 32: LATB2 = 0;
  3069  001564  948A               	bcf	3978,2,c	;volatile
  3070                           
  3071                           ;waveman.c: 33: waitTimer((1714-272));
  3072  001566  0E05               	movlw	5
  3073  001568  6E12               	movwf	waitTimer@value+1,c
  3074  00156A  0EA2               	movlw	162
  3075  00156C  6E11               	movwf	waitTimer@value,c
  3076  00156E  EC04  F014         	call	_waitTimer	;wreg free
  3077                           
  3078                           ;waveman.c: 34: for (bitnr = 0; bitnr < 12; bitnr++){
  3079  001572  0E00               	movlw	0
  3080  001574  6E21               	movwf	wavemanTx@bitnr,c
  3081  001576                     l5290:
  3082  001576  0E0B               	movlw	11
  3083  001578  6421               	cpfsgt	wavemanTx@bitnr,c
  3084  00157A  D001               	goto	l561
  3085  00157C  D033               	goto	l5314
  3086  00157E                     l561:
  3087                           
  3088                           ;waveman.c: 35: if(temp & 0x800){
  3089  00157E  A623               	btfss	wavemanTx@temp+1,3,c
  3090  001580  D00F               	goto	l563
  3091                           
  3092                           ;waveman.c: 36: LATB2 = 1;
  3093  001582  848A               	bsf	3978,2,c	;volatile
  3094                           
  3095                           ;waveman.c: 37: waitTimer(1156);
  3096  001584  0E04               	movlw	4
  3097  001586  6E12               	movwf	waitTimer@value+1,c
  3098  001588  0E84               	movlw	132
  3099  00158A  6E11               	movwf	waitTimer@value,c
  3100  00158C  EC04  F014         	call	_waitTimer	;wreg free
  3101                           
  3102                           ;waveman.c: 38: LATB2 = 0;
  3103  001590  948A               	bcf	3978,2,c	;volatile
  3104                           
  3105                           ;waveman.c: 39: waitTimer((1714-1156));
  3106  001592  0E02               	movlw	2
  3107  001594  6E12               	movwf	waitTimer@value+1,c
  3108  001596  0E2E               	movlw	46
  3109  001598  6E11               	movwf	waitTimer@value,c
  3110  00159A  EC04  F014         	call	_waitTimer	;wreg free
  3111                           
  3112                           ;waveman.c: 40: }
  3113  00159E  D00F               	goto	l5304
  3114  0015A0                     l563:
  3115                           
  3116                           ;waveman.c: 41: else{
  3117                           ;waveman.c: 42: LATB2 = 1;
  3118  0015A0  848A               	bsf	3978,2,c	;volatile
  3119                           
  3120                           ;waveman.c: 43: waitTimer(272);
  3121  0015A2  0E01               	movlw	1
  3122  0015A4  6E12               	movwf	waitTimer@value+1,c
  3123  0015A6  0E10               	movlw	16
  3124  0015A8  6E11               	movwf	waitTimer@value,c
  3125  0015AA  EC04  F014         	call	_waitTimer	;wreg free
  3126                           
  3127                           ;waveman.c: 44: LATB2 = 0;
  3128  0015AE  948A               	bcf	3978,2,c	;volatile
  3129                           
  3130                           ;waveman.c: 45: waitTimer((1714-272));
  3131  0015B0  0E05               	movlw	5
  3132  0015B2  6E12               	movwf	waitTimer@value+1,c
  3133  0015B4  0EA2               	movlw	162
  3134  0015B6  6E11               	movwf	waitTimer@value,c
  3135  0015B8  EC04  F014         	call	_waitTimer	;wreg free
  3136  0015BC  D000               	goto	l5304
  3137  0015BE                     l5304:
  3138                           
  3139                           ;waveman.c: 46: }
  3140                           ;waveman.c: 47: LATB2 = 1;
  3141  0015BE  848A               	bsf	3978,2,c	;volatile
  3142                           
  3143                           ;waveman.c: 48: waitTimer(272);
  3144  0015C0  0E01               	movlw	1
  3145  0015C2  6E12               	movwf	waitTimer@value+1,c
  3146  0015C4  0E10               	movlw	16
  3147  0015C6  6E11               	movwf	waitTimer@value,c
  3148  0015C8  EC04  F014         	call	_waitTimer	;wreg free
  3149                           
  3150                           ;waveman.c: 49: LATB2 = 0;
  3151  0015CC  948A               	bcf	3978,2,c	;volatile
  3152                           
  3153                           ;waveman.c: 50: waitTimer((1714-272));
  3154  0015CE  0E05               	movlw	5
  3155  0015D0  6E12               	movwf	waitTimer@value+1,c
  3156  0015D2  0EA2               	movlw	162
  3157  0015D4  6E11               	movwf	waitTimer@value,c
  3158  0015D6  EC04  F014         	call	_waitTimer	;wreg free
  3159                           
  3160                           ;waveman.c: 51: temp <<= 1;
  3161  0015DA  90D8               	bcf	status,0,c
  3162  0015DC  3622               	rlcf	wavemanTx@temp,f,c
  3163  0015DE  3623               	rlcf	wavemanTx@temp+1,f,c
  3164  0015E0  2A21               	incf	wavemanTx@bitnr,f,c
  3165  0015E2  D7C9               	goto	l5290
  3166  0015E4                     l5314:
  3167                           
  3168                           ;waveman.c: 52: }
  3169                           ;waveman.c: 53: waitTimer(11500);
  3170  0015E4  0E2C               	movlw	44
  3171  0015E6  6E12               	movwf	waitTimer@value+1,c
  3172  0015E8  0EEC               	movlw	236
  3173  0015EA  6E11               	movwf	waitTimer@value,c
  3174  0015EC  EC04  F014         	call	_waitTimer	;wreg free
  3175  0015F0  2A1E               	incf	wavemanTx@resend,f,c
  3176  0015F2  D000               	goto	l5318
  3177  0015F4                     l5318:
  3178  0015F4  5019               	movf	wavemanTx@resends,w,c
  3179  0015F6  5C1E               	subwf	wavemanTx@resend,w,c
  3180  0015F8  A0D8               	btfss	status,0,c
  3181  0015FA  D7A9               	goto	l560
  3182                           
  3183                           ;waveman.c: 54: }
  3184                           ;waveman.c: 55: enter_rx();
  3185  0015FC  EC5C  F014         	call	_enter_rx	;wreg free
  3186  001600  0012               	return		;funcret
  3187  001602                     __end_of_wavemanTx:
  3188                           	opt stack 0
  3189                           tblptru	equ	0xFF8
  3190                           tblptrh	equ	0xFF7
  3191                           tblptrl	equ	0xFF6
  3192                           tablat	equ	0xFF5
  3193                           prodh	equ	0xFF4
  3194                           prodl	equ	0xFF3
  3195                           intcon	equ	0xFF2
  3196                           postinc0	equ	0xFEE
  3197                           wreg	equ	0xFE8
  3198                           postdec1	equ	0xFE5
  3199                           fsr1h	equ	0xFE2
  3200                           fsr1l	equ	0xFE1
  3201                           indf2	equ	0xFDF
  3202                           postinc2	equ	0xFDE
  3203                           fsr2h	equ	0xFDA
  3204                           fsr2l	equ	0xFD9
  3205                           status	equ	0xFD8
  3206                           
  3207 ;; *************** function _reverse *****************
  3208 ;; Defined at:
  3209 ;;		line 35 in file "../helpers.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;  input           1    wreg     unsigned char 
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;  input           1   17[COMRAM] unsigned char 
  3214 ;;  output          1   16[COMRAM] unsigned char 
  3215 ;; Return value:  Size  Location     Type
  3216 ;;                  1    wreg      unsigned char 
  3217 ;; Registers used:
  3218 ;;		wreg, status,2, status,0
  3219 ;; Tracked objects:
  3220 ;;		On entry : 0/0
  3221 ;;		On exit  : 0/0
  3222 ;;		Unchanged: 0/0
  3223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3225 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3227 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3228 ;;Total ram usage:        2 bytes
  3229 ;; Hardware stack levels used:    1
  3230 ;; Hardware stack levels required when called:    2
  3231 ;; This function calls:
  3232 ;;		Nothing
  3233 ;; This function is called by:
  3234 ;;		_wavemanTx
  3235 ;; This function uses a non-reentrant model
  3236 ;;
  3237                           
  3238                           	psect	text11
  3239  00283A                     __ptext11:
  3240                           	opt stack 0
  3241  00283A                     _reverse:
  3242                           	opt stack 26
  3243                           
  3244                           ;incstack = 0
  3245                           ;reverse@input stored from wreg
  3246  00283A  6E12               	movwf	reverse@input,c
  3247                           
  3248                           ;helpers.c: 36: char output = 0;
  3249  00283C  0E00               	movlw	0
  3250  00283E  6E11               	movwf	reverse@output,c
  3251                           
  3252                           ;helpers.c: 37: if (input & 0b00000001) output |= 0b00001000;
  3253  002840  A012               	btfss	reverse@input,0,c
  3254  002842  D002               	goto	l3340
  3255  002844  8611               	bsf	reverse@output,3,c
  3256  002846  D000               	goto	l3340
  3257  002848                     l3340:
  3258                           
  3259                           ;helpers.c: 38: if (input & 0b00000010) output |= 0b00000100;
  3260  002848  A212               	btfss	reverse@input,1,c
  3261  00284A  D002               	goto	l3344
  3262  00284C  8411               	bsf	reverse@output,2,c
  3263  00284E  D000               	goto	l3344
  3264  002850                     l3344:
  3265                           
  3266                           ;helpers.c: 39: if (input & 0b00000100) output |= 0b00000010;
  3267  002850  A412               	btfss	reverse@input,2,c
  3268  002852  D002               	goto	l3348
  3269  002854  8211               	bsf	reverse@output,1,c
  3270  002856  D000               	goto	l3348
  3271  002858                     l3348:
  3272                           
  3273                           ;helpers.c: 40: if (input & 0b00001000) output |= 0b00000001;
  3274  002858  A612               	btfss	reverse@input,3,c
  3275  00285A  D002               	goto	l3352
  3276  00285C  8011               	bsf	reverse@output,0,c
  3277  00285E  D000               	goto	l3352
  3278  002860                     l3352:
  3279                           
  3280                           ;helpers.c: 41: return output;
  3281  002860  5011               	movf	reverse@output,w,c
  3282  002862  0012               	return	
  3283  002864  0012               	return		;funcret
  3284  002866                     __end_of_reverse:
  3285                           	opt stack 0
  3286                           tblptru	equ	0xFF8
  3287                           tblptrh	equ	0xFF7
  3288                           tblptrl	equ	0xFF6
  3289                           tablat	equ	0xFF5
  3290                           prodh	equ	0xFF4
  3291                           prodl	equ	0xFF3
  3292                           intcon	equ	0xFF2
  3293                           postinc0	equ	0xFEE
  3294                           wreg	equ	0xFE8
  3295                           postdec1	equ	0xFE5
  3296                           fsr1h	equ	0xFE2
  3297                           fsr1l	equ	0xFE1
  3298                           indf2	equ	0xFDF
  3299                           postinc2	equ	0xFDE
  3300                           fsr2h	equ	0xFDA
  3301                           fsr2l	equ	0xFD9
  3302                           status	equ	0xFD8
  3303                           
  3304 ;; *************** function ___wmul *****************
  3305 ;; Defined at:
  3306 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/Umul16.c"
  3307 ;; Parameters:    Size  Location     Type
  3308 ;;  multiplier      2   16[COMRAM] unsigned int 
  3309 ;;  multiplicand    2   18[COMRAM] unsigned int 
  3310 ;; Auto vars:     Size  Location     Type
  3311 ;;  product         2   20[COMRAM] unsigned int 
  3312 ;; Return value:  Size  Location     Type
  3313 ;;                  2   16[COMRAM] unsigned int 
  3314 ;; Registers used:
  3315 ;;		wreg, status,2, status,0, prodl, prodh
  3316 ;; Tracked objects:
  3317 ;;		On entry : 0/0
  3318 ;;		On exit  : 0/0
  3319 ;;		Unchanged: 0/0
  3320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3321 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3322 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3324 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;Total ram usage:        6 bytes
  3326 ;; Hardware stack levels used:    1
  3327 ;; Hardware stack levels required when called:    2
  3328 ;; This function calls:
  3329 ;;		Nothing
  3330 ;; This function is called by:
  3331 ;;		_wavemanTx
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335                           	psect	text12
  3336  002890                     __ptext12:
  3337                           	opt stack 0
  3338  002890                     ___wmul:
  3339                           	opt stack 26
  3340                           
  3341                           ;incstack = 0
  3342  002890  5011               	movf	___wmul@multiplier,w,c
  3343  002892  0213               	mulwf	___wmul@multiplicand,c
  3344  002894  CFF3 F015          	movff	prodl,___wmul@product
  3345  002898  CFF4 F016          	movff	prodh,___wmul@product+1
  3346  00289C  5011               	movf	___wmul@multiplier,w,c
  3347  00289E  0214               	mulwf	___wmul@multiplicand+1,c
  3348  0028A0  50F3               	movf	prodl,w,c
  3349  0028A2  2616               	addwf	___wmul@product+1,f,c
  3350  0028A4  5012               	movf	___wmul@multiplier+1,w,c
  3351  0028A6  0213               	mulwf	___wmul@multiplicand,c
  3352  0028A8  50F3               	movf	prodl,w,c
  3353  0028AA  2616               	addwf	___wmul@product+1,f,c
  3354  0028AC  C015  F011         	movff	___wmul@product,?___wmul
  3355  0028B0  C016  F012         	movff	___wmul@product+1,?___wmul+1
  3356  0028B4  0012               	return	
  3357  0028B6  0012               	return		;funcret
  3358  0028B8                     __end_of___wmul:
  3359                           	opt stack 0
  3360                           tblptru	equ	0xFF8
  3361                           tblptrh	equ	0xFF7
  3362                           tblptrl	equ	0xFF6
  3363                           tablat	equ	0xFF5
  3364                           prodh	equ	0xFF4
  3365                           prodl	equ	0xFF3
  3366                           intcon	equ	0xFF2
  3367                           postinc0	equ	0xFEE
  3368                           wreg	equ	0xFE8
  3369                           postdec1	equ	0xFE5
  3370                           fsr1h	equ	0xFE2
  3371                           fsr1l	equ	0xFE1
  3372                           indf2	equ	0xFDF
  3373                           postinc2	equ	0xFDE
  3374                           fsr2h	equ	0xFDA
  3375                           fsr2l	equ	0xFD9
  3376                           status	equ	0xFD8
  3377                           
  3378 ;; *************** function _parseSettings *****************
  3379 ;; Defined at:
  3380 ;;		line 92 in file "../helpers.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;  linep           2   46[COMRAM] PTR unsigned char 
  3383 ;;		 -> main@line(32), 
  3384 ;;  line_len        1   48[COMRAM] unsigned char 
  3385 ;;  settingsp       2   49[COMRAM] PTR struct .
  3386 ;;		 -> main@settings(12), 
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;		None
  3389 ;; Return value:  Size  Location     Type
  3390 ;;		None               void
  3391 ;; Registers used:
  3392 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3393 ;; Tracked objects:
  3394 ;;		On entry : 0/0
  3395 ;;		On exit  : 0/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3398 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3400 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3401 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3402 ;;Total ram usage:        6 bytes
  3403 ;; Hardware stack levels used:    1
  3404 ;; Hardware stack levels required when called:    5
  3405 ;; This function calls:
  3406 ;;		_loadDefaults
  3407 ;;		_loadEeprom
  3408 ;;		_readAd
  3409 ;;		_saveEeprom
  3410 ;;		_uart_put
  3411 ;;		_uart_put_int
  3412 ;;		_uart_puts
  3413 ;; This function is called by:
  3414 ;;		_parseCmd
  3415 ;; This function uses a non-reentrant model
  3416 ;;
  3417                           
  3418                           	psect	text13
  3419  000086                     __ptext13:
  3420                           	opt stack 0
  3421  000086                     _parseSettings:
  3422                           	opt stack 24
  3423                           
  3424                           ;helpers.c: 93: if(line_len == 0){
  3425                           
  3426                           ;incstack = 0
  3427  000086  5031               	movf	parseSettings@line_len,w,c
  3428  000088  A4D8               	btfss	status,2,c
  3429  00008A  D27A               	goto	l5258
  3430                           
  3431                           ;helpers.c: 94: uart_puts("\r\n");
  3432  00008C  0E7F               	movlw	low (STR_9+29)
  3433  00008E  6E14               	movwf	uart_puts@s,c
  3434  000090  0EFE               	movlw	high (STR_9+29)
  3435  000092  6E15               	movwf	uart_puts@s+1,c
  3436  000094  ECCC  F012         	call	_uart_puts	;wreg free
  3437                           
  3438                           ;helpers.c: 95: uart_puts("--------- Settings ----------\r\n");
  3439  000098  0E62               	movlw	low STR_9
  3440  00009A  6E14               	movwf	uart_puts@s,c
  3441  00009C  0EFE               	movlw	high STR_9
  3442  00009E  6E15               	movwf	uart_puts@s+1,c
  3443  0000A0  ECCC  F012         	call	_uart_puts	;wreg free
  3444                           
  3445                           ;helpers.c: 96: uart_puts("Doro:\r\n");
  3446  0000A4  0EDA               	movlw	low STR_10
  3447  0000A6  6E14               	movwf	uart_puts@s,c
  3448  0000A8  0EFF               	movlw	high STR_10
  3449  0000AA  6E15               	movwf	uart_puts@s+1,c
  3450  0000AC  ECCC  F012         	call	_uart_puts	;wreg free
  3451                           
  3452                           ;helpers.c: 97: uart_puts(" [D] En. RX = "); uart_put('0' + settingsp->doro_en_rx); uart
      +                          _puts("\r\n");
  3453  0000B0  0E1F               	movlw	low STR_11
  3454  0000B2  6E14               	movwf	uart_puts@s,c
  3455  0000B4  0EFF               	movlw	high STR_11
  3456  0000B6  6E15               	movwf	uart_puts@s+1,c
  3457  0000B8  ECCC  F012         	call	_uart_puts	;wreg free
  3458  0000BC  EE20 F001          	lfsr	2,1
  3459  0000C0  5032               	movf	parseSettings@settingsp,w,c
  3460  0000C2  26D9               	addwf	fsr2l,f,c
  3461  0000C4  5033               	movf	parseSettings@settingsp+1,w,c
  3462  0000C6  22DA               	addwfc	fsr2h,f,c
  3463  0000C8  50DF               	movf	indf2,w,c
  3464  0000CA  0F30               	addlw	48
  3465  0000CC  ECF8  F012         	call	_uart_put
  3466  0000D0  0E7F               	movlw	low (STR_9+29)
  3467  0000D2  6E14               	movwf	uart_puts@s,c
  3468  0000D4  0EFE               	movlw	high (STR_9+29)
  3469  0000D6  6E15               	movwf	uart_puts@s+1,c
  3470  0000D8  ECCC  F012         	call	_uart_puts	;wreg free
  3471                           
  3472                           ;helpers.c: 98: uart_puts("GAO:\r\n");
  3473  0000DC  0EE2               	movlw	low STR_13
  3474  0000DE  6E14               	movwf	uart_puts@s,c
  3475  0000E0  0EFF               	movlw	high STR_13
  3476  0000E2  6E15               	movwf	uart_puts@s+1,c
  3477  0000E4  ECCC  F012         	call	_uart_puts	;wreg free
  3478                           
  3479                           ;helpers.c: 99: uart_puts(" [G] En. RX = "); uart_put('0' + settingsp->gao_en_rx); uart_
      +                          puts("\r\n");
  3480  0000E8  0E3D               	movlw	low STR_14
  3481  0000EA  6E14               	movwf	uart_puts@s,c
  3482  0000EC  0EFF               	movlw	high STR_14
  3483  0000EE  6E15               	movwf	uart_puts@s+1,c
  3484  0000F0  ECCC  F012         	call	_uart_puts	;wreg free
  3485  0000F4  EE20 F002          	lfsr	2,2
  3486  0000F8  5032               	movf	parseSettings@settingsp,w,c
  3487  0000FA  26D9               	addwf	fsr2l,f,c
  3488  0000FC  5033               	movf	parseSettings@settingsp+1,w,c
  3489  0000FE  22DA               	addwfc	fsr2h,f,c
  3490  000100  50DF               	movf	indf2,w,c
  3491  000102  0F30               	addlw	48
  3492  000104  ECF8  F012         	call	_uart_put
  3493  000108  0E7F               	movlw	low (STR_9+29)
  3494  00010A  6E14               	movwf	uart_puts@s,c
  3495  00010C  0EFE               	movlw	high (STR_9+29)
  3496  00010E  6E15               	movwf	uart_puts@s+1,c
  3497  000110  ECCC  F012         	call	_uart_puts	;wreg free
  3498                           
  3499                           ;helpers.c: 100: uart_puts(" [A] Sends = "); uart_put('0' + settingsp->gao_sends); uart_
      +                          puts("\r\n");
  3500  000114  0E5A               	movlw	low STR_16
  3501  000116  6E14               	movwf	uart_puts@s,c
  3502  000118  0EFF               	movlw	high STR_16
  3503  00011A  6E15               	movwf	uart_puts@s+1,c
  3504  00011C  ECCC  F012         	call	_uart_puts	;wreg free
  3505  000120  EE20 F003          	lfsr	2,3
  3506  000124  5032               	movf	parseSettings@settingsp,w,c
  3507  000126  26D9               	addwf	fsr2l,f,c
  3508  000128  5033               	movf	parseSettings@settingsp+1,w,c
  3509  00012A  22DA               	addwfc	fsr2h,f,c
  3510  00012C  50DF               	movf	indf2,w,c
  3511  00012E  0F30               	addlw	48
  3512  000130  ECF8  F012         	call	_uart_put
  3513  000134  0E7F               	movlw	low (STR_9+29)
  3514  000136  6E14               	movwf	uart_puts@s,c
  3515  000138  0EFE               	movlw	high (STR_9+29)
  3516  00013A  6E15               	movwf	uart_puts@s+1,c
  3517  00013C  ECCC  F012         	call	_uart_puts	;wreg free
  3518                           
  3519                           ;helpers.c: 101: uart_puts("Esic:\r\n");
  3520  000140  0ED2               	movlw	low STR_18
  3521  000142  6E14               	movwf	uart_puts@s,c
  3522  000144  0EFF               	movlw	high STR_18
  3523  000146  6E15               	movwf	uart_puts@s+1,c
  3524  000148  ECCC  F012         	call	_uart_puts	;wreg free
  3525                           
  3526                           ;helpers.c: 102: uart_puts(" [E] En. RX = "); uart_put('0' + settingsp->esic_en_rx); uar
      +                          t_puts("\r\n");
  3527  00014C  0E2E               	movlw	low STR_19
  3528  00014E  6E14               	movwf	uart_puts@s,c
  3529  000150  0EFF               	movlw	high STR_19
  3530  000152  6E15               	movwf	uart_puts@s+1,c
  3531  000154  ECCC  F012         	call	_uart_puts	;wreg free
  3532  000158  EE20 F004          	lfsr	2,4
  3533  00015C  5032               	movf	parseSettings@settingsp,w,c
  3534  00015E  26D9               	addwf	fsr2l,f,c
  3535  000160  5033               	movf	parseSettings@settingsp+1,w,c
  3536  000162  22DA               	addwfc	fsr2h,f,c
  3537  000164  50DF               	movf	indf2,w,c
  3538  000166  0F30               	addlw	48
  3539  000168  ECF8  F012         	call	_uart_put
  3540  00016C  0E7F               	movlw	low (STR_9+29)
  3541  00016E  6E14               	movwf	uart_puts@s,c
  3542  000170  0EFE               	movlw	high (STR_9+29)
  3543  000172  6E15               	movwf	uart_puts@s+1,c
  3544  000174  ECCC  F012         	call	_uart_puts	;wreg free
  3545                           
  3546                           ;helpers.c: 103: uart_puts("Nexa:\r\n");
  3547  000178  0ECA               	movlw	low STR_21
  3548  00017A  6E14               	movwf	uart_puts@s,c
  3549  00017C  0EFF               	movlw	high STR_21
  3550  00017E  6E15               	movwf	uart_puts@s+1,c
  3551  000180  ECCC  F012         	call	_uart_puts	;wreg free
  3552                           
  3553                           ;helpers.c: 104: uart_puts(" [N] En. RX learning = "); uart_put('0' + settingsp->nexa_en
      +                          _rx); uart_puts("\r\n");
  3554  000184  0E82               	movlw	low STR_22
  3555  000186  6E14               	movwf	uart_puts@s,c
  3556  000188  0EFE               	movlw	high STR_22
  3557  00018A  6E15               	movwf	uart_puts@s+1,c
  3558  00018C  ECCC  F012         	call	_uart_puts	;wreg free
  3559  000190  EE20 F005          	lfsr	2,5
  3560  000194  5032               	movf	parseSettings@settingsp,w,c
  3561  000196  26D9               	addwf	fsr2l,f,c
  3562  000198  5033               	movf	parseSettings@settingsp+1,w,c
  3563  00019A  22DA               	addwfc	fsr2h,f,c
  3564  00019C  50DF               	movf	indf2,w,c
  3565  00019E  0F30               	addlw	48
  3566  0001A0  ECF8  F012         	call	_uart_put
  3567  0001A4  0E7F               	movlw	low (STR_9+29)
  3568  0001A6  6E14               	movwf	uart_puts@s,c
  3569  0001A8  0EFE               	movlw	high (STR_9+29)
  3570  0001AA  6E15               	movwf	uart_puts@s+1,c
  3571  0001AC  ECCC  F012         	call	_uart_puts	;wreg free
  3572                           
  3573                           ;helpers.c: 105: uart_puts(" [Y] En. RX code = "); uart_put('0' + settingsp->nexa_code_e
      +                          n); uart_puts("\r\n");
  3574  0001B0  0EC6               	movlw	low STR_24
  3575  0001B2  6E14               	movwf	uart_puts@s,c
  3576  0001B4  0EFE               	movlw	high STR_24
  3577  0001B6  6E15               	movwf	uart_puts@s+1,c
  3578  0001B8  ECCC  F012         	call	_uart_puts	;wreg free
  3579  0001BC  EE20 F007          	lfsr	2,7
  3580  0001C0  5032               	movf	parseSettings@settingsp,w,c
  3581  0001C2  26D9               	addwf	fsr2l,f,c
  3582  0001C4  5033               	movf	parseSettings@settingsp+1,w,c
  3583  0001C6  22DA               	addwfc	fsr2h,f,c
  3584  0001C8  50DF               	movf	indf2,w,c
  3585  0001CA  0F30               	addlw	48
  3586  0001CC  ECF8  F012         	call	_uart_put
  3587  0001D0  0E7F               	movlw	low (STR_9+29)
  3588  0001D2  6E14               	movwf	uart_puts@s,c
  3589  0001D4  0EFE               	movlw	high (STR_9+29)
  3590  0001D6  6E15               	movwf	uart_puts@s+1,c
  3591  0001D8  ECCC  F012         	call	_uart_puts	;wreg free
  3592                           
  3593                           ;helpers.c: 106: uart_puts(" [X] Sends = "); uart_put('0' + settingsp->nexa_sends); uart
      +                          _puts("\r\n");
  3594  0001DC  0E84               	movlw	low STR_26
  3595  0001DE  6E14               	movwf	uart_puts@s,c
  3596  0001E0  0EFF               	movlw	high STR_26
  3597  0001E2  6E15               	movwf	uart_puts@s+1,c
  3598  0001E4  ECCC  F012         	call	_uart_puts	;wreg free
  3599  0001E8  EE20 F006          	lfsr	2,6
  3600  0001EC  5032               	movf	parseSettings@settingsp,w,c
  3601  0001EE  26D9               	addwf	fsr2l,f,c
  3602  0001F0  5033               	movf	parseSettings@settingsp+1,w,c
  3603  0001F2  22DA               	addwfc	fsr2h,f,c
  3604  0001F4  50DF               	movf	indf2,w,c
  3605  0001F6  0F30               	addlw	48
  3606  0001F8  ECF8  F012         	call	_uart_put
  3607  0001FC  0E7F               	movlw	low (STR_9+29)
  3608  0001FE  6E14               	movwf	uart_puts@s,c
  3609  000200  0EFE               	movlw	high (STR_9+29)
  3610  000202  6E15               	movwf	uart_puts@s+1,c
  3611  000204  ECCC  F012         	call	_uart_puts	;wreg free
  3612                           
  3613                           ;helpers.c: 107: uart_puts("Waveman:\r\n");
  3614  000208  0EB6               	movlw	low STR_28
  3615  00020A  6E14               	movwf	uart_puts@s,c
  3616  00020C  0EFF               	movlw	high STR_28
  3617  00020E  6E15               	movwf	uart_puts@s+1,c
  3618  000210  ECCC  F012         	call	_uart_puts	;wreg free
  3619                           
  3620                           ;helpers.c: 108: uart_puts(" [W] Sends = "); uart_put('0' + settingsp->waveman_sends); u
      +                          art_puts("\r\n");
  3621  000214  0E76               	movlw	low STR_29
  3622  000216  6E14               	movwf	uart_puts@s,c
  3623  000218  0EFF               	movlw	high STR_29
  3624  00021A  6E15               	movwf	uart_puts@s+1,c
  3625  00021C  ECCC  F012         	call	_uart_puts	;wreg free
  3626  000220  EE20 F008          	lfsr	2,8
  3627  000224  5032               	movf	parseSettings@settingsp,w,c
  3628  000226  26D9               	addwf	fsr2l,f,c
  3629  000228  5033               	movf	parseSettings@settingsp+1,w,c
  3630  00022A  22DA               	addwfc	fsr2h,f,c
  3631  00022C  50DF               	movf	indf2,w,c
  3632  00022E  0F30               	addlw	48
  3633  000230  ECF8  F012         	call	_uart_put
  3634  000234  0E7F               	movlw	low (STR_9+29)
  3635  000236  6E14               	movwf	uart_puts@s,c
  3636  000238  0EFE               	movlw	high (STR_9+29)
  3637  00023A  6E15               	movwf	uart_puts@s+1,c
  3638  00023C  ECCC  F012         	call	_uart_puts	;wreg free
  3639                           
  3640                           ;helpers.c: 109: uart_puts("Kangthai:\r\n");
  3641  000240  0E9E               	movlw	low STR_31
  3642  000242  6E14               	movwf	uart_puts@s,c
  3643  000244  0EFF               	movlw	high STR_31
  3644  000246  6E15               	movwf	uart_puts@s+1,c
  3645  000248  ECCC  F012         	call	_uart_puts	;wreg free
  3646                           
  3647                           ;helpers.c: 110: uart_puts(" [K] Sends = "); uart_put('0' + settingsp->kangthai_sends); 
      +                          uart_puts("\r\n");
  3648  00024C  0E68               	movlw	low STR_32
  3649  00024E  6E14               	movwf	uart_puts@s,c
  3650  000250  0EFF               	movlw	high STR_32
  3651  000252  6E15               	movwf	uart_puts@s+1,c
  3652  000254  ECCC  F012         	call	_uart_puts	;wreg free
  3653  000258  EE20 F009          	lfsr	2,9
  3654  00025C  5032               	movf	parseSettings@settingsp,w,c
  3655  00025E  26D9               	addwf	fsr2l,f,c
  3656  000260  5033               	movf	parseSettings@settingsp+1,w,c
  3657  000262  22DA               	addwfc	fsr2h,f,c
  3658  000264  50DF               	movf	indf2,w,c
  3659  000266  0F30               	addlw	48
  3660  000268  ECF8  F012         	call	_uart_put
  3661  00026C  0E7F               	movlw	low (STR_9+29)
  3662  00026E  6E14               	movwf	uart_puts@s,c
  3663  000270  0EFE               	movlw	high (STR_9+29)
  3664  000272  6E15               	movwf	uart_puts@s+1,c
  3665  000274  ECCC  F012         	call	_uart_puts	;wreg free
  3666                           
  3667                           ;helpers.c: 111: uart_puts("Raw data:\r\n");
  3668  000278  0E92               	movlw	low STR_34
  3669  00027A  6E14               	movwf	uart_puts@s,c
  3670  00027C  0EFF               	movlw	high STR_34
  3671  00027E  6E15               	movwf	uart_puts@s+1,c
  3672  000280  ECCC  F012         	call	_uart_puts	;wreg free
  3673                           
  3674                           ;helpers.c: 112: uart_puts(" [R] En RX = "); uart_put('0' + settingsp->raw_en); uart_put
      +                          s("\r\n");
  3675  000284  0E4C               	movlw	low STR_35
  3676  000286  6E14               	movwf	uart_puts@s,c
  3677  000288  0EFF               	movlw	high STR_35
  3678  00028A  6E15               	movwf	uart_puts@s+1,c
  3679  00028C  ECCC  F012         	call	_uart_puts	;wreg free
  3680  000290  EE20 F00A          	lfsr	2,10
  3681  000294  5032               	movf	parseSettings@settingsp,w,c
  3682  000296  26D9               	addwf	fsr2l,f,c
  3683  000298  5033               	movf	parseSettings@settingsp+1,w,c
  3684  00029A  22DA               	addwfc	fsr2h,f,c
  3685  00029C  50DF               	movf	indf2,w,c
  3686  00029E  0F30               	addlw	48
  3687  0002A0  ECF8  F012         	call	_uart_put
  3688  0002A4  0E7F               	movlw	low (STR_9+29)
  3689  0002A6  6E14               	movwf	uart_puts@s,c
  3690  0002A8  0EFE               	movlw	high (STR_9+29)
  3691  0002AA  6E15               	movwf	uart_puts@s+1,c
  3692  0002AC  ECCC  F012         	call	_uart_puts	;wreg free
  3693                           
  3694                           ;helpers.c: 113: uart_puts("Settings:\r\n");
  3695  0002B0  0EAA               	movlw	low STR_37
  3696  0002B2  6E14               	movwf	uart_puts@s,c
  3697  0002B4  0EFF               	movlw	high STR_37
  3698  0002B6  6E15               	movwf	uart_puts@s+1,c
  3699  0002B8  ECCC  F012         	call	_uart_puts	;wreg free
  3700                           
  3701                           ;helpers.c: 114: uart_puts(" [S] EEPROM save\r\n");
  3702  0002BC  0EED               	movlw	low STR_38
  3703  0002BE  6E14               	movwf	uart_puts@s,c
  3704  0002C0  0EFE               	movlw	high STR_38
  3705  0002C2  6E15               	movwf	uart_puts@s+1,c
  3706  0002C4  ECCC  F012         	call	_uart_puts	;wreg free
  3707                           
  3708                           ;helpers.c: 115: uart_puts(" [L] EEPROM load\r\n");
  3709  0002C8  0EDA               	movlw	low STR_39
  3710  0002CA  6E14               	movwf	uart_puts@s,c
  3711  0002CC  0EFE               	movlw	high STR_39
  3712  0002CE  6E15               	movwf	uart_puts@s+1,c
  3713  0002D0  ECCC  F012         	call	_uart_puts	;wreg free
  3714                           
  3715                           ;helpers.c: 116: uart_puts(" [F] Load defaults\r\n");
  3716  0002D4  0EB1               	movlw	low STR_40
  3717  0002D6  6E14               	movwf	uart_puts@s,c
  3718  0002D8  0EFE               	movlw	high STR_40
  3719  0002DA  6E15               	movwf	uart_puts@s+1,c
  3720  0002DC  ECCC  F012         	call	_uart_puts	;wreg free
  3721                           
  3722                           ;helpers.c: 117: uart_puts("Other:\r\n");
  3723  0002E0  0EC1               	movlw	low STR_41
  3724  0002E2  6E14               	movwf	uart_puts@s,c
  3725  0002E4  0EFF               	movlw	high STR_41
  3726  0002E6  6E15               	movwf	uart_puts@s+1,c
  3727  0002E8  ECCC  F012         	call	_uart_puts	;wreg free
  3728                           
  3729                           ;helpers.c: 118: uart_puts(" [I] Set noise floor\r\n");
  3730  0002EC  0E9A               	movlw	low STR_42
  3731  0002EE  6E14               	movwf	uart_puts@s,c
  3732  0002F0  0EFE               	movlw	high STR_42
  3733  0002F2  6E15               	movwf	uart_puts@s+1,c
  3734  0002F4  ECCC  F012         	call	_uart_puts	;wreg free
  3735                           
  3736                           ;helpers.c: 119: uart_puts(" Curr. RSSI = "); uart_put_int(readAd()); uart_puts("\r\n");
  3737  0002F8  0E10               	movlw	low STR_43
  3738  0002FA  6E14               	movwf	uart_puts@s,c
  3739  0002FC  0EFF               	movlw	high STR_43
  3740  0002FE  6E15               	movwf	uart_puts@s+1,c
  3741  000300  ECCC  F012         	call	_uart_puts	;wreg free
  3742  000304  EC65  F011         	call	_readAd	;wreg free
  3743  000308  C011  F02B         	movff	?_readAd,uart_put_int@input
  3744  00030C  C012  F02C         	movff	?_readAd+1,uart_put_int@input+1
  3745  000310  EC31  F00D         	call	_uart_put_int	;wreg free
  3746  000314  0E7F               	movlw	low (STR_9+29)
  3747  000316  6E14               	movwf	uart_puts@s,c
  3748  000318  0EFE               	movlw	high (STR_9+29)
  3749  00031A  6E15               	movwf	uart_puts@s+1,c
  3750  00031C  ECCC  F012         	call	_uart_puts	;wreg free
  3751                           
  3752                           ;helpers.c: 120: uart_puts(" Noise floor = "); uart_put_int(settingsp->noise_floor); uar
      +                          t_puts("\r\n");
  3753  000320  0E00               	movlw	low STR_45
  3754  000322  6E14               	movwf	uart_puts@s,c
  3755  000324  0EFF               	movlw	high STR_45
  3756  000326  6E15               	movwf	uart_puts@s+1,c
  3757  000328  ECCC  F012         	call	_uart_puts	;wreg free
  3758  00032C  EE20 F00B          	lfsr	2,11
  3759  000330  5032               	movf	parseSettings@settingsp,w,c
  3760  000332  26D9               	addwf	fsr2l,f,c
  3761  000334  5033               	movf	parseSettings@settingsp+1,w,c
  3762  000336  22DA               	addwfc	fsr2h,f,c
  3763  000338  50DF               	movf	indf2,w,c
  3764  00033A  6E34               	movwf	??_parseSettings& (0+255),c
  3765  00033C  5034               	movf	??_parseSettings,w,c
  3766  00033E  6E2B               	movwf	uart_put_int@input,c
  3767  000340  6A2C               	clrf	uart_put_int@input+1,c
  3768  000342  EC31  F00D         	call	_uart_put_int	;wreg free
  3769  000346  0E7F               	movlw	low (STR_9+29)
  3770  000348  6E14               	movwf	uart_puts@s,c
  3771  00034A  0EFE               	movlw	high (STR_9+29)
  3772  00034C  6E15               	movwf	uart_puts@s+1,c
  3773  00034E  ECCC  F012         	call	_uart_puts	;wreg free
  3774                           
  3775                           ;helpers.c: 121: }
  3776  000352  0012               	return	
  3777                           
  3778                           ;helpers.c: 122: else{
  3779                           ;helpers.c: 123: switch (linep[0]){
  3780  000354  D115               	goto	l5258
  3781  000356                     l5200:
  3782                           
  3783                           ;helpers.c: 125: settingsp->doro_en_rx = linep[1] - '0';
  3784  000356  EE20 F001          	lfsr	2,1
  3785  00035A  5032               	movf	parseSettings@settingsp,w,c
  3786  00035C  26D9               	addwf	fsr2l,f,c
  3787  00035E  5033               	movf	parseSettings@settingsp+1,w,c
  3788  000360  22DA               	addwfc	fsr2h,f,c
  3789  000362  EE10 F001          	lfsr	1,1
  3790  000366  502F               	movf	parseSettings@linep,w,c
  3791  000368  26E1               	addwf	fsr1l,f,c
  3792  00036A  5030               	movf	parseSettings@linep+1,w,c
  3793  00036C  22E2               	addwfc	fsr1h,f,c
  3794  00036E  50E7               	movf	indf1,w,c
  3795  000370  0FD0               	addlw	208
  3796  000372  6EDF               	movwf	indf2,c
  3797                           
  3798                           ;helpers.c: 126: uart_puts("$OK\r\n");
  3799  000374  0EE9               	movlw	low STR_7
  3800  000376  6E14               	movwf	uart_puts@s,c
  3801  000378  0EFF               	movlw	high STR_7
  3802  00037A  6E15               	movwf	uart_puts@s+1,c
  3803  00037C  ECCC  F012         	call	_uart_puts	;wreg free
  3804                           
  3805                           ;helpers.c: 127: break;
  3806  000380  0012               	return	
  3807  000382                     l5204:
  3808                           
  3809                           ;helpers.c: 129: settingsp->gao_en_rx = linep[1] - '0';
  3810  000382  EE20 F002          	lfsr	2,2
  3811  000386  5032               	movf	parseSettings@settingsp,w,c
  3812  000388  26D9               	addwf	fsr2l,f,c
  3813  00038A  5033               	movf	parseSettings@settingsp+1,w,c
  3814  00038C  22DA               	addwfc	fsr2h,f,c
  3815  00038E  EE10 F001          	lfsr	1,1
  3816  000392  502F               	movf	parseSettings@linep,w,c
  3817  000394  26E1               	addwf	fsr1l,f,c
  3818  000396  5030               	movf	parseSettings@linep+1,w,c
  3819  000398  22E2               	addwfc	fsr1h,f,c
  3820  00039A  50E7               	movf	indf1,w,c
  3821  00039C  0FD0               	addlw	208
  3822  00039E  6EDF               	movwf	indf2,c
  3823                           
  3824                           ;helpers.c: 130: uart_puts("$OK\r\n");
  3825  0003A0  0EE9               	movlw	low STR_7
  3826  0003A2  6E14               	movwf	uart_puts@s,c
  3827  0003A4  0EFF               	movlw	high STR_7
  3828  0003A6  6E15               	movwf	uart_puts@s+1,c
  3829  0003A8  ECCC  F012         	call	_uart_puts	;wreg free
  3830                           
  3831                           ;helpers.c: 131: break;
  3832  0003AC  0012               	return	
  3833  0003AE                     l5208:
  3834                           
  3835                           ;helpers.c: 133: settingsp->gao_sends = linep[1] - '0';
  3836  0003AE  EE20 F003          	lfsr	2,3
  3837  0003B2  5032               	movf	parseSettings@settingsp,w,c
  3838  0003B4  26D9               	addwf	fsr2l,f,c
  3839  0003B6  5033               	movf	parseSettings@settingsp+1,w,c
  3840  0003B8  22DA               	addwfc	fsr2h,f,c
  3841  0003BA  EE10 F001          	lfsr	1,1
  3842  0003BE  502F               	movf	parseSettings@linep,w,c
  3843  0003C0  26E1               	addwf	fsr1l,f,c
  3844  0003C2  5030               	movf	parseSettings@linep+1,w,c
  3845  0003C4  22E2               	addwfc	fsr1h,f,c
  3846  0003C6  50E7               	movf	indf1,w,c
  3847  0003C8  0FD0               	addlw	208
  3848  0003CA  6EDF               	movwf	indf2,c
  3849                           
  3850                           ;helpers.c: 134: uart_puts("$OK\r\n");
  3851  0003CC  0EE9               	movlw	low STR_7
  3852  0003CE  6E14               	movwf	uart_puts@s,c
  3853  0003D0  0EFF               	movlw	high STR_7
  3854  0003D2  6E15               	movwf	uart_puts@s+1,c
  3855  0003D4  ECCC  F012         	call	_uart_puts	;wreg free
  3856                           
  3857                           ;helpers.c: 135: break;
  3858  0003D8  0012               	return	
  3859  0003DA                     l5212:
  3860                           
  3861                           ;helpers.c: 137: settingsp->esic_en_rx = linep[1] - '0';
  3862  0003DA  EE20 F004          	lfsr	2,4
  3863  0003DE  5032               	movf	parseSettings@settingsp,w,c
  3864  0003E0  26D9               	addwf	fsr2l,f,c
  3865  0003E2  5033               	movf	parseSettings@settingsp+1,w,c
  3866  0003E4  22DA               	addwfc	fsr2h,f,c
  3867  0003E6  EE10 F001          	lfsr	1,1
  3868  0003EA  502F               	movf	parseSettings@linep,w,c
  3869  0003EC  26E1               	addwf	fsr1l,f,c
  3870  0003EE  5030               	movf	parseSettings@linep+1,w,c
  3871  0003F0  22E2               	addwfc	fsr1h,f,c
  3872  0003F2  50E7               	movf	indf1,w,c
  3873  0003F4  0FD0               	addlw	208
  3874  0003F6  6EDF               	movwf	indf2,c
  3875                           
  3876                           ;helpers.c: 138: uart_puts("$OK\r\n");
  3877  0003F8  0EE9               	movlw	low STR_7
  3878  0003FA  6E14               	movwf	uart_puts@s,c
  3879  0003FC  0EFF               	movlw	high STR_7
  3880  0003FE  6E15               	movwf	uart_puts@s+1,c
  3881  000400  ECCC  F012         	call	_uart_puts	;wreg free
  3882                           
  3883                           ;helpers.c: 139: break;
  3884  000404  0012               	return	
  3885  000406                     l5216:
  3886                           
  3887                           ;helpers.c: 141: settingsp->nexa_en_rx = linep[1] - '0';
  3888  000406  EE20 F005          	lfsr	2,5
  3889  00040A  5032               	movf	parseSettings@settingsp,w,c
  3890  00040C  26D9               	addwf	fsr2l,f,c
  3891  00040E  5033               	movf	parseSettings@settingsp+1,w,c
  3892  000410  22DA               	addwfc	fsr2h,f,c
  3893  000412  EE10 F001          	lfsr	1,1
  3894  000416  502F               	movf	parseSettings@linep,w,c
  3895  000418  26E1               	addwf	fsr1l,f,c
  3896  00041A  5030               	movf	parseSettings@linep+1,w,c
  3897  00041C  22E2               	addwfc	fsr1h,f,c
  3898  00041E  50E7               	movf	indf1,w,c
  3899  000420  0FD0               	addlw	208
  3900  000422  6EDF               	movwf	indf2,c
  3901                           
  3902                           ;helpers.c: 142: uart_puts("$OK\r\n");
  3903  000424  0EE9               	movlw	low STR_7
  3904  000426  6E14               	movwf	uart_puts@s,c
  3905  000428  0EFF               	movlw	high STR_7
  3906  00042A  6E15               	movwf	uart_puts@s+1,c
  3907  00042C  ECCC  F012         	call	_uart_puts	;wreg free
  3908                           
  3909                           ;helpers.c: 143: break;
  3910  000430  0012               	return	
  3911  000432                     l5220:
  3912                           
  3913                           ;helpers.c: 145: settingsp->nexa_code_en = linep[1] - '0';
  3914  000432  EE20 F007          	lfsr	2,7
  3915  000436  5032               	movf	parseSettings@settingsp,w,c
  3916  000438  26D9               	addwf	fsr2l,f,c
  3917  00043A  5033               	movf	parseSettings@settingsp+1,w,c
  3918  00043C  22DA               	addwfc	fsr2h,f,c
  3919  00043E  EE10 F001          	lfsr	1,1
  3920  000442  502F               	movf	parseSettings@linep,w,c
  3921  000444  26E1               	addwf	fsr1l,f,c
  3922  000446  5030               	movf	parseSettings@linep+1,w,c
  3923  000448  22E2               	addwfc	fsr1h,f,c
  3924  00044A  50E7               	movf	indf1,w,c
  3925  00044C  0FD0               	addlw	208
  3926  00044E  6EDF               	movwf	indf2,c
  3927                           
  3928                           ;helpers.c: 146: uart_puts("$OK\r\n");
  3929  000450  0EE9               	movlw	low STR_7
  3930  000452  6E14               	movwf	uart_puts@s,c
  3931  000454  0EFF               	movlw	high STR_7
  3932  000456  6E15               	movwf	uart_puts@s+1,c
  3933  000458  ECCC  F012         	call	_uart_puts	;wreg free
  3934                           
  3935                           ;helpers.c: 147: break;
  3936  00045C  0012               	return	
  3937  00045E                     l5224:
  3938                           
  3939                           ;helpers.c: 149: settingsp->nexa_sends = linep[1] - '0';
  3940  00045E  EE20 F006          	lfsr	2,6
  3941  000462  5032               	movf	parseSettings@settingsp,w,c
  3942  000464  26D9               	addwf	fsr2l,f,c
  3943  000466  5033               	movf	parseSettings@settingsp+1,w,c
  3944  000468  22DA               	addwfc	fsr2h,f,c
  3945  00046A  EE10 F001          	lfsr	1,1
  3946  00046E  502F               	movf	parseSettings@linep,w,c
  3947  000470  26E1               	addwf	fsr1l,f,c
  3948  000472  5030               	movf	parseSettings@linep+1,w,c
  3949  000474  22E2               	addwfc	fsr1h,f,c
  3950  000476  50E7               	movf	indf1,w,c
  3951  000478  0FD0               	addlw	208
  3952  00047A  6EDF               	movwf	indf2,c
  3953                           
  3954                           ;helpers.c: 150: uart_puts("$OK\r\n");
  3955  00047C  0EE9               	movlw	low STR_7
  3956  00047E  6E14               	movwf	uart_puts@s,c
  3957  000480  0EFF               	movlw	high STR_7
  3958  000482  6E15               	movwf	uart_puts@s+1,c
  3959  000484  ECCC  F012         	call	_uart_puts	;wreg free
  3960                           
  3961                           ;helpers.c: 151: break;
  3962  000488  0012               	return	
  3963  00048A                     l5228:
  3964                           
  3965                           ;helpers.c: 153: settingsp->waveman_sends = linep[1] - '0';
  3966  00048A  EE20 F008          	lfsr	2,8
  3967  00048E  5032               	movf	parseSettings@settingsp,w,c
  3968  000490  26D9               	addwf	fsr2l,f,c
  3969  000492  5033               	movf	parseSettings@settingsp+1,w,c
  3970  000494  22DA               	addwfc	fsr2h,f,c
  3971  000496  EE10 F001          	lfsr	1,1
  3972  00049A  502F               	movf	parseSettings@linep,w,c
  3973  00049C  26E1               	addwf	fsr1l,f,c
  3974  00049E  5030               	movf	parseSettings@linep+1,w,c
  3975  0004A0  22E2               	addwfc	fsr1h,f,c
  3976  0004A2  50E7               	movf	indf1,w,c
  3977  0004A4  0FD0               	addlw	208
  3978  0004A6  6EDF               	movwf	indf2,c
  3979                           
  3980                           ;helpers.c: 154: uart_puts("$OK\r\n");
  3981  0004A8  0EE9               	movlw	low STR_7
  3982  0004AA  6E14               	movwf	uart_puts@s,c
  3983  0004AC  0EFF               	movlw	high STR_7
  3984  0004AE  6E15               	movwf	uart_puts@s+1,c
  3985  0004B0  ECCC  F012         	call	_uart_puts	;wreg free
  3986                           
  3987                           ;helpers.c: 155: break;
  3988  0004B4  0012               	return	
  3989  0004B6                     l5232:
  3990                           
  3991                           ;helpers.c: 157: settingsp->kangthai_sends = linep[1] - '0';
  3992  0004B6  EE20 F009          	lfsr	2,9
  3993  0004BA  5032               	movf	parseSettings@settingsp,w,c
  3994  0004BC  26D9               	addwf	fsr2l,f,c
  3995  0004BE  5033               	movf	parseSettings@settingsp+1,w,c
  3996  0004C0  22DA               	addwfc	fsr2h,f,c
  3997  0004C2  EE10 F001          	lfsr	1,1
  3998  0004C6  502F               	movf	parseSettings@linep,w,c
  3999  0004C8  26E1               	addwf	fsr1l,f,c
  4000  0004CA  5030               	movf	parseSettings@linep+1,w,c
  4001  0004CC  22E2               	addwfc	fsr1h,f,c
  4002  0004CE  50E7               	movf	indf1,w,c
  4003  0004D0  0FD0               	addlw	208
  4004  0004D2  6EDF               	movwf	indf2,c
  4005                           
  4006                           ;helpers.c: 158: uart_puts("$OK\r\n");
  4007  0004D4  0EE9               	movlw	low STR_7
  4008  0004D6  6E14               	movwf	uart_puts@s,c
  4009  0004D8  0EFF               	movlw	high STR_7
  4010  0004DA  6E15               	movwf	uart_puts@s+1,c
  4011  0004DC  ECCC  F012         	call	_uart_puts	;wreg free
  4012                           
  4013                           ;helpers.c: 159: break;
  4014  0004E0  0012               	return	
  4015  0004E2                     l5236:
  4016                           
  4017                           ;helpers.c: 161: settingsp->raw_en = linep[1] - '0';
  4018  0004E2  EE20 F00A          	lfsr	2,10
  4019  0004E6  5032               	movf	parseSettings@settingsp,w,c
  4020  0004E8  26D9               	addwf	fsr2l,f,c
  4021  0004EA  5033               	movf	parseSettings@settingsp+1,w,c
  4022  0004EC  22DA               	addwfc	fsr2h,f,c
  4023  0004EE  EE10 F001          	lfsr	1,1
  4024  0004F2  502F               	movf	parseSettings@linep,w,c
  4025  0004F4  26E1               	addwf	fsr1l,f,c
  4026  0004F6  5030               	movf	parseSettings@linep+1,w,c
  4027  0004F8  22E2               	addwfc	fsr1h,f,c
  4028  0004FA  50E7               	movf	indf1,w,c
  4029  0004FC  0FD0               	addlw	208
  4030  0004FE  6EDF               	movwf	indf2,c
  4031                           
  4032                           ;helpers.c: 162: uart_puts("$OK\r\n");
  4033  000500  0EE9               	movlw	low STR_7
  4034  000502  6E14               	movwf	uart_puts@s,c
  4035  000504  0EFF               	movlw	high STR_7
  4036  000506  6E15               	movwf	uart_puts@s+1,c
  4037  000508  ECCC  F012         	call	_uart_puts	;wreg free
  4038                           
  4039                           ;helpers.c: 163: break;
  4040  00050C  0012               	return	
  4041  00050E                     l5240:
  4042                           
  4043                           ;helpers.c: 165: saveEeprom(settingsp);
  4044  00050E  C032  F015         	movff	parseSettings@settingsp,saveEeprom@settingsp
  4045  000512  C033  F016         	movff	parseSettings@settingsp+1,saveEeprom@settingsp+1
  4046  000516  EC94  F013         	call	_saveEeprom	;wreg free
  4047                           
  4048                           ;helpers.c: 166: uart_puts("$OK\r\n");
  4049  00051A  0EE9               	movlw	low STR_7
  4050  00051C  6E14               	movwf	uart_puts@s,c
  4051  00051E  0EFF               	movlw	high STR_7
  4052  000520  6E15               	movwf	uart_puts@s+1,c
  4053  000522  ECCC  F012         	call	_uart_puts	;wreg free
  4054                           
  4055                           ;helpers.c: 167: break;
  4056  000526  0012               	return	
  4057  000528                     l5244:
  4058                           
  4059                           ;helpers.c: 169: loadEeprom(settingsp);
  4060  000528  C032  F013         	movff	parseSettings@settingsp,loadEeprom@settingsp
  4061  00052C  C033  F014         	movff	parseSettings@settingsp+1,loadEeprom@settingsp+1
  4062  000530  ECA0  F012         	call	_loadEeprom	;wreg free
  4063                           
  4064                           ;helpers.c: 170: uart_puts("$OK\r\n");
  4065  000534  0EE9               	movlw	low STR_7
  4066  000536  6E14               	movwf	uart_puts@s,c
  4067  000538  0EFF               	movlw	high STR_7
  4068  00053A  6E15               	movwf	uart_puts@s+1,c
  4069  00053C  ECCC  F012         	call	_uart_puts	;wreg free
  4070                           
  4071                           ;helpers.c: 171: break;
  4072  000540  0012               	return	
  4073  000542                     l5248:
  4074                           
  4075                           ;helpers.c: 173: loadDefaults(settingsp);
  4076  000542  C032  F011         	movff	parseSettings@settingsp,loadDefaults@settingsp
  4077  000546  C033  F012         	movff	parseSettings@settingsp+1,loadDefaults@settingsp+1
  4078  00054A  ECD3  F00F         	call	_loadDefaults	;wreg free
  4079                           
  4080                           ;helpers.c: 174: uart_puts("$OK\r\n");
  4081  00054E  0EE9               	movlw	low STR_7
  4082  000550  6E14               	movwf	uart_puts@s,c
  4083  000552  0EFF               	movlw	high STR_7
  4084  000554  6E15               	movwf	uart_puts@s+1,c
  4085  000556  ECCC  F012         	call	_uart_puts	;wreg free
  4086                           
  4087                           ;helpers.c: 175: break;
  4088  00055A  0012               	return	
  4089  00055C                     l5252:
  4090                           
  4091                           ;helpers.c: 177: settingsp->noise_floor = readAd() + 15;
  4092  00055C  EE20 F00B          	lfsr	2,11
  4093  000560  5032               	movf	parseSettings@settingsp,w,c
  4094  000562  26D9               	addwf	fsr2l,f,c
  4095  000564  5033               	movf	parseSettings@settingsp+1,w,c
  4096  000566  22DA               	addwfc	fsr2h,f,c
  4097  000568  EC65  F011         	call	_readAd	;wreg free
  4098  00056C  5011               	movf	?_readAd,w,c
  4099  00056E  0F0F               	addlw	15
  4100  000570  6EDF               	movwf	indf2,c
  4101                           
  4102                           ;helpers.c: 178: uart_puts("$OK\r\n");
  4103  000572  0EE9               	movlw	low STR_7
  4104  000574  6E14               	movwf	uart_puts@s,c
  4105  000576  0EFF               	movlw	high STR_7
  4106  000578  6E15               	movwf	uart_puts@s+1,c
  4107  00057A  ECCC  F012         	call	_uart_puts	;wreg free
  4108                           
  4109                           ;helpers.c: 180: }
  4110                           
  4111                           ;helpers.c: 179: break;
  4112  00057E  0012               	return	
  4113  000580                     l5258:
  4114  000580  C02F  FFD9         	movff	parseSettings@linep,fsr2l
  4115  000584  C030  FFDA         	movff	parseSettings@linep+1,fsr2h
  4116  000588  50DF               	movf	indf2,w,c
  4117                           
  4118                           ; Switch size 1, requested type "space"
  4119                           ; Number of cases is 14, Range of values is 65 to 89
  4120                           ; switch strategies available:
  4121                           ; Name         Instructions Cycles
  4122                           ; simple_byte           43    22 (average)
  4123                           ;	Chosen strategy is simple_byte
  4124  00058A  0A41               	xorlw	65	; case 65
  4125  00058C  B4D8               	btfsc	status,2,c
  4126  00058E  D70F               	goto	l5208
  4127  000590  0A05               	xorlw	5	; case 68
  4128  000592  B4D8               	btfsc	status,2,c
  4129  000594  D6E0               	goto	l5200
  4130  000596  0A01               	xorlw	1	; case 69
  4131  000598  B4D8               	btfsc	status,2,c
  4132  00059A  D71F               	goto	l5212
  4133  00059C  0A03               	xorlw	3	; case 70
  4134  00059E  B4D8               	btfsc	status,2,c
  4135  0005A0  D7D0               	goto	l5248
  4136  0005A2  0A01               	xorlw	1	; case 71
  4137  0005A4  B4D8               	btfsc	status,2,c
  4138  0005A6  D6ED               	goto	l5204
  4139  0005A8  0A0E               	xorlw	14	; case 73
  4140  0005AA  B4D8               	btfsc	status,2,c
  4141  0005AC  D7D7               	goto	l5252
  4142  0005AE  0A02               	xorlw	2	; case 75
  4143  0005B0  B4D8               	btfsc	status,2,c
  4144  0005B2  D781               	goto	l5232
  4145  0005B4  0A07               	xorlw	7	; case 76
  4146  0005B6  B4D8               	btfsc	status,2,c
  4147  0005B8  D7B7               	goto	l5244
  4148  0005BA  0A02               	xorlw	2	; case 78
  4149  0005BC  B4D8               	btfsc	status,2,c
  4150  0005BE  D723               	goto	l5216
  4151  0005C0  0A1C               	xorlw	28	; case 82
  4152  0005C2  B4D8               	btfsc	status,2,c
  4153  0005C4  D78E               	goto	l5236
  4154  0005C6  0A01               	xorlw	1	; case 83
  4155  0005C8  B4D8               	btfsc	status,2,c
  4156  0005CA  D7A1               	goto	l5240
  4157  0005CC  0A04               	xorlw	4	; case 87
  4158  0005CE  B4D8               	btfsc	status,2,c
  4159  0005D0  D75C               	goto	l5228
  4160  0005D2  0A0F               	xorlw	15	; case 88
  4161  0005D4  B4D8               	btfsc	status,2,c
  4162  0005D6  D743               	goto	l5224
  4163  0005D8  0A01               	xorlw	1	; case 89
  4164  0005DA  B4D8               	btfsc	status,2,c
  4165  0005DC  D72A               	goto	l5220
  4166  0005DE  0012               	return	
  4167  0005E0  0012               	return		;funcret
  4168  0005E2                     __end_of_parseSettings:
  4169                           	opt stack 0
  4170                           tblptru	equ	0xFF8
  4171                           tblptrh	equ	0xFF7
  4172                           tblptrl	equ	0xFF6
  4173                           tablat	equ	0xFF5
  4174                           prodh	equ	0xFF4
  4175                           prodl	equ	0xFF3
  4176                           intcon	equ	0xFF2
  4177                           postinc0	equ	0xFEE
  4178                           wreg	equ	0xFE8
  4179                           indf1	equ	0xFE7
  4180                           postdec1	equ	0xFE5
  4181                           fsr1h	equ	0xFE2
  4182                           fsr1l	equ	0xFE1
  4183                           indf2	equ	0xFDF
  4184                           postinc2	equ	0xFDE
  4185                           fsr2h	equ	0xFDA
  4186                           fsr2l	equ	0xFD9
  4187                           status	equ	0xFD8
  4188                           
  4189 ;; *************** function _saveEeprom *****************
  4190 ;; Defined at:
  4191 ;;		line 24 in file "../config.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;  settingsp       2   20[COMRAM] PTR struct .
  4194 ;;		 -> main@settings(12), 
  4195 ;; Auto vars:     Size  Location     Type
  4196 ;;  j               1   22[COMRAM] unsigned char 
  4197 ;; Return value:  Size  Location     Type
  4198 ;;		None               void
  4199 ;; Registers used:
  4200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4201 ;; Tracked objects:
  4202 ;;		On entry : 0/0
  4203 ;;		On exit  : 0/0
  4204 ;;		Unchanged: 0/0
  4205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4206 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4207 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4210 ;;Total ram usage:        3 bytes
  4211 ;; Hardware stack levels used:    1
  4212 ;; Hardware stack levels required when called:    3
  4213 ;; This function calls:
  4214 ;;		_Busy_eep
  4215 ;;		_Write_b_eep
  4216 ;; This function is called by:
  4217 ;;		_parseSettings
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           	psect	text14
  4222  002728                     __ptext14:
  4223                           	opt stack 0
  4224  002728                     _saveEeprom:
  4225                           	opt stack 25
  4226                           
  4227                           ;config.c: 25: uint8_t j;
  4228                           ;config.c: 26: for (j=0; j<12; j++) (Busy_eep(), Write_b_eep(j,((uint8_t*)settingsp)[j])
      +                          );
  4229                           
  4230                           ;incstack = 0
  4231  002728  0E00               	movlw	0
  4232  00272A  6E17               	movwf	saveEeprom@j,c
  4233  00272C  0E0B               	movlw	11
  4234  00272E  6417               	cpfsgt	saveEeprom@j,c
  4235  002730  D002               	goto	l3382
  4236  002732  0012               	return	
  4237  002734  0012               	return	
  4238  002736                     l3382:
  4239  002736  ECDB  F014         	call	_Busy_eep	;wreg free
  4240  00273A  C017  F011         	movff	saveEeprom@j,Write_b_eep@badd
  4241  00273E  6A12               	clrf	Write_b_eep@badd+1,c
  4242  002740  5017               	movf	saveEeprom@j,w,c
  4243  002742  0D01               	mullw	1
  4244  002744  50F3               	movf	prodl,w,c
  4245  002746  2415               	addwf	saveEeprom@settingsp,w,c
  4246  002748  6ED9               	movwf	fsr2l,c
  4247  00274A  50F4               	movf	prodh,w,c
  4248  00274C  2016               	addwfc	saveEeprom@settingsp+1,w,c
  4249  00274E  6EDA               	movwf	fsr2h,c
  4250  002750  50DF               	movf	indf2,w,c
  4251  002752  6E13               	movwf	Write_b_eep@bdat,c
  4252  002754  EC74  F013         	call	_Write_b_eep	;wreg free
  4253  002758  2A17               	incf	saveEeprom@j,f,c
  4254  00275A  0E0B               	movlw	11
  4255  00275C  6417               	cpfsgt	saveEeprom@j,c
  4256  00275E  D7EB               	goto	l3382
  4257  002760  0012               	return	
  4258  002762  0012               	return		;funcret
  4259  002764                     __end_of_saveEeprom:
  4260                           	opt stack 0
  4261                           tblptru	equ	0xFF8
  4262                           tblptrh	equ	0xFF7
  4263                           tblptrl	equ	0xFF6
  4264                           tablat	equ	0xFF5
  4265                           prodh	equ	0xFF4
  4266                           prodl	equ	0xFF3
  4267                           intcon	equ	0xFF2
  4268                           postinc0	equ	0xFEE
  4269                           wreg	equ	0xFE8
  4270                           indf1	equ	0xFE7
  4271                           postdec1	equ	0xFE5
  4272                           fsr1h	equ	0xFE2
  4273                           fsr1l	equ	0xFE1
  4274                           indf2	equ	0xFDF
  4275                           postinc2	equ	0xFDE
  4276                           fsr2h	equ	0xFDA
  4277                           fsr2l	equ	0xFD9
  4278                           status	equ	0xFD8
  4279                           
  4280 ;; *************** function _Write_b_eep *****************
  4281 ;; Defined at:
  4282 ;;		line 49 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/write_B.c"
  4283 ;; Parameters:    Size  Location     Type
  4284 ;;  badd            2   16[COMRAM] unsigned int 
  4285 ;;  bdat            1   18[COMRAM] unsigned char 
  4286 ;; Auto vars:     Size  Location     Type
  4287 ;;  GIE_BIT_VAL     1   19[COMRAM] unsigned char 
  4288 ;; Return value:  Size  Location     Type
  4289 ;;		None               void
  4290 ;; Registers used:
  4291 ;;		wreg, status,2, status,0
  4292 ;; Tracked objects:
  4293 ;;		On entry : 0/0
  4294 ;;		On exit  : 0/0
  4295 ;;		Unchanged: 0/0
  4296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4297 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4298 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4300 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4301 ;;Total ram usage:        4 bytes
  4302 ;; Hardware stack levels used:    1
  4303 ;; Hardware stack levels required when called:    2
  4304 ;; This function calls:
  4305 ;;		Nothing
  4306 ;; This function is called by:
  4307 ;;		_saveEeprom
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           	psect	text15
  4312  0026E8                     __ptext15:
  4313                           	opt stack 0
  4314  0026E8                     _Write_b_eep:
  4315                           	opt stack 25
  4316                           
  4317                           ;incstack = 0
  4318  0026E8  0E00               	movlw	0
  4319  0026EA  6E14               	movwf	Write_b_eep@GIE_BIT_VAL,c
  4320  0026EC  5012               	movf	Write_b_eep@badd+1,w,c
  4321  0026EE  0B03               	andlw	3
  4322  0026F0  6EAA               	movwf	4010,c	;volatile
  4323  0026F2  C011  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  4324  0026F6  C013  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  4325  0026FA  9EA6               	bcf	4006,7,c	;volatile
  4326  0026FC  9CA6               	bcf	4006,6,c	;volatile
  4327  0026FE  84A6               	bsf	4006,2,c	;volatile
  4328  002700  0E00               	movlw	0
  4329  002702  BEF2               	btfsc	intcon,7,c	;volatile
  4330  002704  0E01               	movlw	1
  4331  002706  6E14               	movwf	Write_b_eep@GIE_BIT_VAL,c
  4332  002708  9EF2               	bcf	intcon,7,c	;volatile
  4333  00270A  0E55               	movlw	85
  4334  00270C  6EA7               	movwf	4007,c	;volatile
  4335  00270E  0EAA               	movlw	170
  4336  002710  6EA7               	movwf	4007,c	;volatile
  4337  002712  82A6               	bsf	4006,1,c	;volatile
  4338  002714  D000               	goto	l809
  4339  002716                     l809:
  4340  002716  B2A6               	btfsc	4006,1,c	;volatile
  4341  002718  D7FE               	goto	l809
  4342  00271A  B014               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  4343  00271C  D002               	bra	u2795
  4344  00271E  9EF2               	bcf	intcon,7,c	;volatile
  4345  002720  D001               	bra	u2796
  4346  002722                     u2795:
  4347  002722  8EF2               	bsf	intcon,7,c	;volatile
  4348  002724                     u2796:
  4349  002724  94A6               	bcf	4006,2,c	;volatile
  4350  002726  0012               	return		;funcret
  4351  002728                     __end_of_Write_b_eep:
  4352                           	opt stack 0
  4353                           tblptru	equ	0xFF8
  4354                           tblptrh	equ	0xFF7
  4355                           tblptrl	equ	0xFF6
  4356                           tablat	equ	0xFF5
  4357                           prodh	equ	0xFF4
  4358                           prodl	equ	0xFF3
  4359                           intcon	equ	0xFF2
  4360                           postinc0	equ	0xFEE
  4361                           wreg	equ	0xFE8
  4362                           indf1	equ	0xFE7
  4363                           postdec1	equ	0xFE5
  4364                           fsr1h	equ	0xFE2
  4365                           fsr1l	equ	0xFE1
  4366                           indf2	equ	0xFDF
  4367                           postinc2	equ	0xFDE
  4368                           fsr2h	equ	0xFDA
  4369                           fsr2l	equ	0xFD9
  4370                           status	equ	0xFD8
  4371                           
  4372 ;; *************** function _Busy_eep *****************
  4373 ;; Defined at:
  4374 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  4375 ;; Parameters:    Size  Location     Type
  4376 ;;		None
  4377 ;; Auto vars:     Size  Location     Type
  4378 ;;		None
  4379 ;; Return value:  Size  Location     Type
  4380 ;;		None               void
  4381 ;; Registers used:
  4382 ;;		None
  4383 ;; Tracked objects:
  4384 ;;		On entry : 0/0
  4385 ;;		On exit  : 0/0
  4386 ;;		Unchanged: 0/0
  4387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4392 ;;Total ram usage:        0 bytes
  4393 ;; Hardware stack levels used:    1
  4394 ;; Hardware stack levels required when called:    2
  4395 ;; This function calls:
  4396 ;;		Nothing
  4397 ;; This function is called by:
  4398 ;;		_saveEeprom
  4399 ;; This function uses a non-reentrant model
  4400 ;;
  4401                           
  4402                           	psect	text16
  4403  0029B6                     __ptext16:
  4404                           	opt stack 0
  4405  0029B6                     _Busy_eep:
  4406                           	opt stack 25
  4407                           
  4408                           ;incstack = 0
  4409  0029B6  D000               	goto	l778
  4410  0029B8                     l778:
  4411  0029B8  B2A6               	btfsc	4006,1,c	;volatile
  4412  0029BA  D7FE               	goto	l778
  4413  0029BC  0012               	return		;funcret
  4414  0029BE                     __end_of_Busy_eep:
  4415                           	opt stack 0
  4416                           tblptru	equ	0xFF8
  4417                           tblptrh	equ	0xFF7
  4418                           tblptrl	equ	0xFF6
  4419                           tablat	equ	0xFF5
  4420                           prodh	equ	0xFF4
  4421                           prodl	equ	0xFF3
  4422                           intcon	equ	0xFF2
  4423                           postinc0	equ	0xFEE
  4424                           wreg	equ	0xFE8
  4425                           indf1	equ	0xFE7
  4426                           postdec1	equ	0xFE5
  4427                           fsr1h	equ	0xFE2
  4428                           fsr1l	equ	0xFE1
  4429                           indf2	equ	0xFDF
  4430                           postinc2	equ	0xFDE
  4431                           fsr2h	equ	0xFDA
  4432                           fsr2l	equ	0xFD9
  4433                           status	equ	0xFD8
  4434                           
  4435 ;; *************** function _readAd *****************
  4436 ;; Defined at:
  4437 ;;		line 79 in file "../helpers.c"
  4438 ;; Parameters:    Size  Location     Type
  4439 ;;		None
  4440 ;; Auto vars:     Size  Location     Type
  4441 ;;  j               2   22[COMRAM] int 
  4442 ;;  temp            2   24[COMRAM] unsigned int 
  4443 ;;  value           2   20[COMRAM] unsigned int 
  4444 ;; Return value:  Size  Location     Type
  4445 ;;                  2   16[COMRAM] unsigned int 
  4446 ;; Registers used:
  4447 ;;		wreg, status,2, status,0
  4448 ;; Tracked objects:
  4449 ;;		On entry : 0/0
  4450 ;;		On exit  : 0/0
  4451 ;;		Unchanged: 0/0
  4452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4453 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4454 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4455 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4456 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4457 ;;Total ram usage:       10 bytes
  4458 ;; Hardware stack levels used:    1
  4459 ;; Hardware stack levels required when called:    2
  4460 ;; This function calls:
  4461 ;;		Nothing
  4462 ;; This function is called by:
  4463 ;;		_parseSettings
  4464 ;; This function uses a non-reentrant model
  4465 ;;
  4466                           
  4467                           	psect	text17
  4468  0022CA                     __ptext17:
  4469                           	opt stack 0
  4470  0022CA                     _readAd:
  4471                           	opt stack 26
  4472                           
  4473                           ;helpers.c: 80: uint16_t value = 0;
  4474                           
  4475                           ;incstack = 0
  4476  0022CA  0E00               	movlw	0
  4477  0022CC  6E16               	movwf	readAd@value+1,c
  4478  0022CE  0E00               	movlw	0
  4479  0022D0  6E15               	movwf	readAd@value,c
  4480                           
  4481                           ;helpers.c: 81: uint16_t temp = 0;
  4482  0022D2  0E00               	movlw	0
  4483  0022D4  6E1A               	movwf	readAd@temp+1,c
  4484  0022D6  0E00               	movlw	0
  4485  0022D8  6E19               	movwf	readAd@temp,c
  4486                           
  4487                           ;helpers.c: 82: for (int j=0; j<1000; j++){
  4488  0022DA  0E00               	movlw	0
  4489  0022DC  6E18               	movwf	readAd@j+1,c
  4490  0022DE  0E00               	movlw	0
  4491  0022E0  6E17               	movwf	readAd@j,c
  4492  0022E2                     l3358:
  4493  0022E2  BE18               	btfsc	readAd@j+1,7,c
  4494  0022E4  D008               	goto	l3362
  4495  0022E6  0EE8               	movlw	232
  4496  0022E8  5C17               	subwf	readAd@j,w,c
  4497  0022EA  0E03               	movlw	3
  4498  0022EC  5818               	subwfb	readAd@j+1,w,c
  4499  0022EE  B0D8               	btfsc	status,0,c
  4500  0022F0  D026               	goto	l269
  4501  0022F2  D001               	goto	l3362
  4502  0022F4  D024               	goto	l269
  4503  0022F6                     l3362:
  4504                           
  4505                           ;helpers.c: 83: ADCON0 |= 0b00000011;
  4506  0022F6  0E03               	movlw	3
  4507  0022F8  12C2               	iorwf	4034,f,c	;volatile
  4508                           
  4509                           ;helpers.c: 84: while(ADCON0 & 0b00000010);
  4510  0022FA  D000               	goto	l270
  4511  0022FC                     l270:
  4512  0022FC  B2C2               	btfsc	4034,1,c	;volatile
  4513  0022FE  D7FE               	goto	l270
  4514                           
  4515                           ;helpers.c: 85: temp = (ADRESH<<8) | ADRESL;
  4516  002300  50C3               	movf	4035,w,c	;volatile
  4517  002302  CFC4 F013          	movff	4036,??_readAd	;volatile
  4518  002306  6A14               	clrf	(??_readAd+1)& (0+255),c
  4519  002308  C013  F014         	movff	??_readAd,??_readAd+1
  4520  00230C  6A13               	clrf	??_readAd,c
  4521  00230E  1013               	iorwf	??_readAd,w,c
  4522  002310  6E19               	movwf	readAd@temp,c
  4523  002312  5014               	movf	??_readAd+1,w,c
  4524  002314  6E1A               	movwf	readAd@temp+1,c
  4525                           
  4526                           ;helpers.c: 86: temp >>= 2;
  4527  002316  90D8               	bcf	status,0,c
  4528  002318  321A               	rrcf	readAd@temp+1,f,c
  4529  00231A  3219               	rrcf	readAd@temp,f,c
  4530  00231C  90D8               	bcf	status,0,c
  4531  00231E  321A               	rrcf	readAd@temp+1,f,c
  4532  002320  3219               	rrcf	readAd@temp,f,c
  4533                           
  4534                           ;helpers.c: 87: if (temp > value) value = temp;
  4535  002322  5019               	movf	readAd@temp,w,c
  4536  002324  5C15               	subwf	readAd@value,w,c
  4537  002326  501A               	movf	readAd@temp+1,w,c
  4538  002328  5816               	subwfb	readAd@value+1,w,c
  4539  00232A  B0D8               	btfsc	status,0,c
  4540  00232C  D005               	goto	l3372
  4541  00232E  C019  F015         	movff	readAd@temp,readAd@value
  4542  002332  C01A  F016         	movff	readAd@temp+1,readAd@value+1
  4543  002336  D000               	goto	l3372
  4544  002338                     l3372:
  4545  002338  4A17               	infsnz	readAd@j,f,c
  4546  00233A  2A18               	incf	readAd@j+1,f,c
  4547  00233C  D7D2               	goto	l3358
  4548  00233E                     l269:
  4549                           
  4550                           ;helpers.c: 88: }
  4551                           ;helpers.c: 89: return value;
  4552  00233E  C015  F011         	movff	readAd@value,?_readAd
  4553  002342  C016  F012         	movff	readAd@value+1,?_readAd+1
  4554  002346  0012               	return		;funcret
  4555  002348                     __end_of_readAd:
  4556                           	opt stack 0
  4557                           tblptru	equ	0xFF8
  4558                           tblptrh	equ	0xFF7
  4559                           tblptrl	equ	0xFF6
  4560                           tablat	equ	0xFF5
  4561                           prodh	equ	0xFF4
  4562                           prodl	equ	0xFF3
  4563                           intcon	equ	0xFF2
  4564                           postinc0	equ	0xFEE
  4565                           wreg	equ	0xFE8
  4566                           indf1	equ	0xFE7
  4567                           postdec1	equ	0xFE5
  4568                           fsr1h	equ	0xFE2
  4569                           fsr1l	equ	0xFE1
  4570                           indf2	equ	0xFDF
  4571                           postinc2	equ	0xFDE
  4572                           fsr2h	equ	0xFDA
  4573                           fsr2l	equ	0xFD9
  4574                           status	equ	0xFD8
  4575                           
  4576 ;; *************** function _loadEeprom *****************
  4577 ;; Defined at:
  4578 ;;		line 29 in file "../config.c"
  4579 ;; Parameters:    Size  Location     Type
  4580 ;;  settingsp       2   18[COMRAM] PTR struct .
  4581 ;;		 -> main@settings(12), 
  4582 ;; Auto vars:     Size  Location     Type
  4583 ;;  j               1   20[COMRAM] unsigned char 
  4584 ;; Return value:  Size  Location     Type
  4585 ;;		None               void
  4586 ;; Registers used:
  4587 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4588 ;; Tracked objects:
  4589 ;;		On entry : 0/0
  4590 ;;		On exit  : 0/0
  4591 ;;		Unchanged: 0/0
  4592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4593 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4594 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4597 ;;Total ram usage:        3 bytes
  4598 ;; Hardware stack levels used:    1
  4599 ;; Hardware stack levels required when called:    3
  4600 ;; This function calls:
  4601 ;;		_Read_b_eep
  4602 ;;		_loadDefaults
  4603 ;; This function is called by:
  4604 ;;		_parseSettings
  4605 ;;		_main
  4606 ;; This function uses a non-reentrant model
  4607 ;;
  4608                           
  4609                           	psect	text18
  4610  002540                     __ptext18:
  4611                           	opt stack 0
  4612  002540                     _loadEeprom:
  4613                           	opt stack 25
  4614                           
  4615                           ;config.c: 30: uint8_t j;
  4616                           ;config.c: 31: if (Read_b_eep(0) != 1) loadDefaults(settingsp);
  4617                           
  4618                           ;incstack = 0
  4619  002540  0E00               	movlw	0
  4620  002542  6E12               	movwf	Read_b_eep@badd+1,c
  4621  002544  0E00               	movlw	0
  4622  002546  6E11               	movwf	Read_b_eep@badd,c
  4623  002548  ECAE  F014         	call	_Read_b_eep	;wreg free
  4624  00254C  06E8               	decf	wreg,f,c
  4625  00254E  B4D8               	btfsc	status,2,c
  4626  002550  D007               	goto	l3394
  4627  002552  C013  F011         	movff	loadEeprom@settingsp,loadDefaults@settingsp
  4628  002556  C014  F012         	movff	loadEeprom@settingsp+1,loadDefaults@settingsp+1
  4629  00255A  ECD3  F00F         	call	_loadDefaults	;wreg free
  4630  00255E  0012               	return	
  4631  002560                     l3394:
  4632                           
  4633                           ;config.c: 32: else for (j=0; j<12; j++) ((uint8_t*)settingsp)[j] = Read_b_eep(j);
  4634  002560  0E00               	movlw	0
  4635  002562  6E15               	movwf	loadEeprom@j,c
  4636  002564  0E0B               	movlw	11
  4637  002566  6415               	cpfsgt	loadEeprom@j,c
  4638  002568  D002               	goto	l3400
  4639  00256A  0012               	return	
  4640  00256C  0012               	return	
  4641  00256E                     l3400:
  4642  00256E  5015               	movf	loadEeprom@j,w,c
  4643  002570  0D01               	mullw	1
  4644  002572  50F3               	movf	prodl,w,c
  4645  002574  2413               	addwf	loadEeprom@settingsp,w,c
  4646  002576  6ED9               	movwf	fsr2l,c
  4647  002578  50F4               	movf	prodh,w,c
  4648  00257A  2014               	addwfc	loadEeprom@settingsp+1,w,c
  4649  00257C  6EDA               	movwf	fsr2h,c
  4650  00257E  C015  F011         	movff	loadEeprom@j,Read_b_eep@badd
  4651  002582  6A12               	clrf	Read_b_eep@badd+1,c
  4652  002584  ECAE  F014         	call	_Read_b_eep	;wreg free
  4653  002588  6EDF               	movwf	indf2,c
  4654  00258A  2A15               	incf	loadEeprom@j,f,c
  4655  00258C  0E0B               	movlw	11
  4656  00258E  6415               	cpfsgt	loadEeprom@j,c
  4657  002590  D7EE               	goto	l3400
  4658  002592  0012               	return	
  4659  002594  0012               	return	
  4660  002596  0012               	return		;funcret
  4661  002598                     __end_of_loadEeprom:
  4662                           	opt stack 0
  4663                           tblptru	equ	0xFF8
  4664                           tblptrh	equ	0xFF7
  4665                           tblptrl	equ	0xFF6
  4666                           tablat	equ	0xFF5
  4667                           prodh	equ	0xFF4
  4668                           prodl	equ	0xFF3
  4669                           intcon	equ	0xFF2
  4670                           postinc0	equ	0xFEE
  4671                           wreg	equ	0xFE8
  4672                           indf1	equ	0xFE7
  4673                           postdec1	equ	0xFE5
  4674                           fsr1h	equ	0xFE2
  4675                           fsr1l	equ	0xFE1
  4676                           indf2	equ	0xFDF
  4677                           postinc2	equ	0xFDE
  4678                           fsr2h	equ	0xFDA
  4679                           fsr2l	equ	0xFD9
  4680                           status	equ	0xFD8
  4681                           
  4682 ;; *************** function _loadDefaults *****************
  4683 ;; Defined at:
  4684 ;;		line 9 in file "../config.c"
  4685 ;; Parameters:    Size  Location     Type
  4686 ;;  settingsp       2   16[COMRAM] PTR struct .
  4687 ;;		 -> main@settings(12), 
  4688 ;; Auto vars:     Size  Location     Type
  4689 ;;		None
  4690 ;; Return value:  Size  Location     Type
  4691 ;;		None               void
  4692 ;; Registers used:
  4693 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4694 ;; Tracked objects:
  4695 ;;		On entry : 0/0
  4696 ;;		On exit  : 0/0
  4697 ;;		Unchanged: 0/0
  4698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4699 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4702 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4703 ;;Total ram usage:        2 bytes
  4704 ;; Hardware stack levels used:    1
  4705 ;; Hardware stack levels required when called:    2
  4706 ;; This function calls:
  4707 ;;		Nothing
  4708 ;; This function is called by:
  4709 ;;		_parseSettings
  4710 ;;		_loadEeprom
  4711 ;; This function uses a non-reentrant model
  4712 ;;
  4713                           
  4714                           	psect	text19
  4715  001FA6                     __ptext19:
  4716                           	opt stack 0
  4717  001FA6                     _loadDefaults:
  4718                           	opt stack 25
  4719                           
  4720                           ;config.c: 10: settingsp->version = 1;
  4721                           
  4722                           ;incstack = 0
  4723  001FA6  C011  FFD9         	movff	loadDefaults@settingsp,fsr2l
  4724  001FAA  C012  FFDA         	movff	loadDefaults@settingsp+1,fsr2h
  4725  001FAE  0E01               	movlw	1
  4726  001FB0  6EDF               	movwf	indf2,c
  4727                           
  4728                           ;config.c: 11: settingsp->doro_en_rx = 1;
  4729  001FB2  EE20 F001          	lfsr	2,1
  4730  001FB6  5011               	movf	loadDefaults@settingsp,w,c
  4731  001FB8  26D9               	addwf	fsr2l,f,c
  4732  001FBA  5012               	movf	loadDefaults@settingsp+1,w,c
  4733  001FBC  22DA               	addwfc	fsr2h,f,c
  4734  001FBE  0E01               	movlw	1
  4735  001FC0  6EDF               	movwf	indf2,c
  4736                           
  4737                           ;config.c: 12: settingsp->gao_en_rx = 1;
  4738  001FC2  EE20 F002          	lfsr	2,2
  4739  001FC6  5011               	movf	loadDefaults@settingsp,w,c
  4740  001FC8  26D9               	addwf	fsr2l,f,c
  4741  001FCA  5012               	movf	loadDefaults@settingsp+1,w,c
  4742  001FCC  22DA               	addwfc	fsr2h,f,c
  4743  001FCE  0E01               	movlw	1
  4744  001FD0  6EDF               	movwf	indf2,c
  4745                           
  4746                           ;config.c: 13: settingsp->gao_sends = 6;
  4747  001FD2  EE20 F003          	lfsr	2,3
  4748  001FD6  5011               	movf	loadDefaults@settingsp,w,c
  4749  001FD8  26D9               	addwf	fsr2l,f,c
  4750  001FDA  5012               	movf	loadDefaults@settingsp+1,w,c
  4751  001FDC  22DA               	addwfc	fsr2h,f,c
  4752  001FDE  0E06               	movlw	6
  4753  001FE0  6EDF               	movwf	indf2,c
  4754                           
  4755                           ;config.c: 14: settingsp->esic_en_rx = 1;
  4756  001FE2  EE20 F004          	lfsr	2,4
  4757  001FE6  5011               	movf	loadDefaults@settingsp,w,c
  4758  001FE8  26D9               	addwf	fsr2l,f,c
  4759  001FEA  5012               	movf	loadDefaults@settingsp+1,w,c
  4760  001FEC  22DA               	addwfc	fsr2h,f,c
  4761  001FEE  0E01               	movlw	1
  4762  001FF0  6EDF               	movwf	indf2,c
  4763                           
  4764                           ;config.c: 15: settingsp->nexa_en_rx = 1;
  4765  001FF2  EE20 F005          	lfsr	2,5
  4766  001FF6  5011               	movf	loadDefaults@settingsp,w,c
  4767  001FF8  26D9               	addwf	fsr2l,f,c
  4768  001FFA  5012               	movf	loadDefaults@settingsp+1,w,c
  4769  001FFC  22DA               	addwfc	fsr2h,f,c
  4770  001FFE  0E01               	movlw	1
  4771  002000  6EDF               	movwf	indf2,c
  4772                           
  4773                           ;config.c: 16: settingsp->nexa_sends = 5;
  4774  002002  EE20 F006          	lfsr	2,6
  4775  002006  5011               	movf	loadDefaults@settingsp,w,c
  4776  002008  26D9               	addwf	fsr2l,f,c
  4777  00200A  5012               	movf	loadDefaults@settingsp+1,w,c
  4778  00200C  22DA               	addwfc	fsr2h,f,c
  4779  00200E  0E05               	movlw	5
  4780  002010  6EDF               	movwf	indf2,c
  4781                           
  4782                           ;config.c: 17: settingsp->nexa_code_en = 1;
  4783  002012  EE20 F007          	lfsr	2,7
  4784  002016  5011               	movf	loadDefaults@settingsp,w,c
  4785  002018  26D9               	addwf	fsr2l,f,c
  4786  00201A  5012               	movf	loadDefaults@settingsp+1,w,c
  4787  00201C  22DA               	addwfc	fsr2h,f,c
  4788  00201E  0E01               	movlw	1
  4789  002020  6EDF               	movwf	indf2,c
  4790                           
  4791                           ;config.c: 18: settingsp->waveman_sends = 8;
  4792  002022  EE20 F008          	lfsr	2,8
  4793  002026  5011               	movf	loadDefaults@settingsp,w,c
  4794  002028  26D9               	addwf	fsr2l,f,c
  4795  00202A  5012               	movf	loadDefaults@settingsp+1,w,c
  4796  00202C  22DA               	addwfc	fsr2h,f,c
  4797  00202E  0E08               	movlw	8
  4798  002030  6EDF               	movwf	indf2,c
  4799                           
  4800                           ;config.c: 19: settingsp->kangthai_sends = 6;
  4801  002032  EE20 F009          	lfsr	2,9
  4802  002036  5011               	movf	loadDefaults@settingsp,w,c
  4803  002038  26D9               	addwf	fsr2l,f,c
  4804  00203A  5012               	movf	loadDefaults@settingsp+1,w,c
  4805  00203C  22DA               	addwfc	fsr2h,f,c
  4806  00203E  0E06               	movlw	6
  4807  002040  6EDF               	movwf	indf2,c
  4808                           
  4809                           ;config.c: 20: settingsp->raw_en = 0;
  4810  002042  EE20 F00A          	lfsr	2,10
  4811  002046  5011               	movf	loadDefaults@settingsp,w,c
  4812  002048  26D9               	addwf	fsr2l,f,c
  4813  00204A  5012               	movf	loadDefaults@settingsp+1,w,c
  4814  00204C  22DA               	addwfc	fsr2h,f,c
  4815  00204E  0E00               	movlw	0
  4816  002050  6EDF               	movwf	indf2,c
  4817                           
  4818                           ;config.c: 21: settingsp->noise_floor = 150;
  4819  002052  EE20 F00B          	lfsr	2,11
  4820  002056  5011               	movf	loadDefaults@settingsp,w,c
  4821  002058  26D9               	addwf	fsr2l,f,c
  4822  00205A  5012               	movf	loadDefaults@settingsp+1,w,c
  4823  00205C  22DA               	addwfc	fsr2h,f,c
  4824  00205E  0E96               	movlw	150
  4825  002060  6EDF               	movwf	indf2,c
  4826  002062  0012               	return		;funcret
  4827  002064                     __end_of_loadDefaults:
  4828                           	opt stack 0
  4829                           tblptru	equ	0xFF8
  4830                           tblptrh	equ	0xFF7
  4831                           tblptrl	equ	0xFF6
  4832                           tablat	equ	0xFF5
  4833                           prodh	equ	0xFF4
  4834                           prodl	equ	0xFF3
  4835                           intcon	equ	0xFF2
  4836                           postinc0	equ	0xFEE
  4837                           wreg	equ	0xFE8
  4838                           indf1	equ	0xFE7
  4839                           postdec1	equ	0xFE5
  4840                           fsr1h	equ	0xFE2
  4841                           fsr1l	equ	0xFE1
  4842                           indf2	equ	0xFDF
  4843                           postinc2	equ	0xFDE
  4844                           fsr2h	equ	0xFDA
  4845                           fsr2l	equ	0xFD9
  4846                           status	equ	0xFD8
  4847                           
  4848 ;; *************** function _Read_b_eep *****************
  4849 ;; Defined at:
  4850 ;;		line 35 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/read_B.c"
  4851 ;; Parameters:    Size  Location     Type
  4852 ;;  badd            2   16[COMRAM] unsigned int 
  4853 ;; Auto vars:     Size  Location     Type
  4854 ;;		None
  4855 ;; Return value:  Size  Location     Type
  4856 ;;                  1    wreg      unsigned char 
  4857 ;; Registers used:
  4858 ;;		wreg, status,2, status,0
  4859 ;; Tracked objects:
  4860 ;;		On entry : 0/0
  4861 ;;		On exit  : 0/0
  4862 ;;		Unchanged: 0/0
  4863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4864 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4867 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4868 ;;Total ram usage:        2 bytes
  4869 ;; Hardware stack levels used:    1
  4870 ;; Hardware stack levels required when called:    2
  4871 ;; This function calls:
  4872 ;;		Nothing
  4873 ;; This function is called by:
  4874 ;;		_loadEeprom
  4875 ;; This function uses a non-reentrant model
  4876 ;;
  4877                           
  4878                           	psect	text20
  4879  00295C                     __ptext20:
  4880                           	opt stack 0
  4881  00295C                     _Read_b_eep:
  4882                           	opt stack 25
  4883                           
  4884                           ;incstack = 0
  4885  00295C  5012               	movf	Read_b_eep@badd+1,w,c
  4886  00295E  0B03               	andlw	3
  4887  002960  6EAA               	movwf	4010,c	;volatile
  4888  002962  C011  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  4889  002966  9CA6               	bcf	4006,6,c	;volatile
  4890  002968  9EA6               	bcf	4006,7,c	;volatile
  4891  00296A  80A6               	bsf	4006,0,c	;volatile
  4892  00296C  F000               	nop	
  4893  00296E  F000               	nop	
  4894  002970  50A8               	movf	4008,w,c	;volatile
  4895  002972  0012               	return	
  4896  002974  0012               	return		;funcret
  4897  002976                     __end_of_Read_b_eep:
  4898                           	opt stack 0
  4899                           tblptru	equ	0xFF8
  4900                           tblptrh	equ	0xFF7
  4901                           tblptrl	equ	0xFF6
  4902                           tablat	equ	0xFF5
  4903                           prodh	equ	0xFF4
  4904                           prodl	equ	0xFF3
  4905                           intcon	equ	0xFF2
  4906                           postinc0	equ	0xFEE
  4907                           wreg	equ	0xFE8
  4908                           indf1	equ	0xFE7
  4909                           postdec1	equ	0xFE5
  4910                           fsr1h	equ	0xFE2
  4911                           fsr1l	equ	0xFE1
  4912                           indf2	equ	0xFDF
  4913                           postinc2	equ	0xFDE
  4914                           fsr2h	equ	0xFDA
  4915                           fsr2l	equ	0xFD9
  4916                           status	equ	0xFD8
  4917                           
  4918 ;; *************** function _nexaTx *****************
  4919 ;; Defined at:
  4920 ;;		line 7 in file "../nexa_learning.c"
  4921 ;; Parameters:    Size  Location     Type
  4922 ;;  s               2   21[COMRAM] PTR unsigned char 
  4923 ;;		 -> main@line(32), 
  4924 ;;  len             1   23[COMRAM] unsigned char 
  4925 ;;  resends         1   24[COMRAM] unsigned char 
  4926 ;; Auto vars:     Size  Location     Type
  4927 ;;  resend          1   31[COMRAM] unsigned char 
  4928 ;;  j               1   45[COMRAM] unsigned char 
  4929 ;;  data            8   36[COMRAM] unsigned long [2]
  4930 ;;  temp            4   32[COMRAM] unsigned long 
  4931 ;;  bitnr           1   44[COMRAM] unsigned char 
  4932 ;;  data_len        1   30[COMRAM] unsigned char 
  4933 ;; Return value:  Size  Location     Type
  4934 ;;		None               void
  4935 ;; Registers used:
  4936 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4937 ;; Tracked objects:
  4938 ;;		On entry : 0/0
  4939 ;;		On exit  : 0/0
  4940 ;;		Unchanged: 0/0
  4941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4942 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4943 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4944 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4945 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4946 ;;Total ram usage:       25 bytes
  4947 ;; Hardware stack levels used:    1
  4948 ;; Hardware stack levels required when called:    5
  4949 ;; This function calls:
  4950 ;;		_asciiToHex
  4951 ;;		_enter_rx
  4952 ;;		_enter_tx
  4953 ;;		_waitTimer
  4954 ;; This function is called by:
  4955 ;;		_parseCmd
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           	psect	text21
  4960  000D16                     __ptext21:
  4961                           	opt stack 0
  4962  000D16                     _nexaTx:
  4963                           	opt stack 24
  4964                           
  4965                           ;nexa_learning.c: 14: uint32_t temp;
  4966                           ;nexa_learning.c: 15: uint8_t bitnr;
  4967                           ;nexa_learning.c: 16: uint8_t data_len = 32;
  4968                           
  4969                           ;incstack = 0
  4970  000D16  0E20               	movlw	32
  4971  000D18  6E1F               	movwf	nexaTx@data_len,c
  4972                           
  4973                           ;nexa_learning.c: 17: uint32_t data[2];
  4974                           ;nexa_learning.c: 20: for (char j=0; j<6; j++) data[0] = (data[0]<<4) | asciiToHex(s[j])
      +                          ;
  4975  000D1A  0E00               	movlw	0
  4976  000D1C  6E2E               	movwf	nexaTx@j,c
  4977  000D1E                     l5324:
  4978  000D1E  0E05               	movlw	5
  4979  000D20  642E               	cpfsgt	nexaTx@j,c
  4980  000D22  D001               	goto	l5328
  4981  000D24  D027               	goto	l5334
  4982  000D26                     l5328:
  4983  000D26  C025  F01A         	movff	nexaTx@data,??_nexaTx
  4984  000D2A  C026  F01B         	movff	nexaTx@data+1,??_nexaTx+1
  4985  000D2E  C027  F01C         	movff	nexaTx@data+2,??_nexaTx+2
  4986  000D32  C028  F01D         	movff	nexaTx@data+3,??_nexaTx+3
  4987  000D36  0E04               	movlw	4
  4988  000D38                     u5935:
  4989  000D38  90D8               	bcf	status,0,c
  4990  000D3A  361A               	rlcf	??_nexaTx,f,c
  4991  000D3C  361B               	rlcf	??_nexaTx+1,f,c
  4992  000D3E  361C               	rlcf	??_nexaTx+2,f,c
  4993  000D40  361D               	rlcf	??_nexaTx+3,f,c
  4994  000D42  2EE8               	decfsz	wreg,f,c
  4995  000D44  D7F9               	goto	u5935
  4996  000D46  502E               	movf	nexaTx@j,w,c
  4997  000D48  0D01               	mullw	1
  4998  000D4A  50F3               	movf	prodl,w,c
  4999  000D4C  2416               	addwf	nexaTx@s,w,c
  5000  000D4E  6ED9               	movwf	fsr2l,c
  5001  000D50  50F4               	movf	prodh,w,c
  5002  000D52  2017               	addwfc	nexaTx@s+1,w,c
  5003  000D54  6EDA               	movwf	fsr2h,c
  5004  000D56  50DF               	movf	indf2,w,c
  5005  000D58  ECC8  F014         	call	_asciiToHex
  5006  000D5C  6E1E               	movwf	(??_nexaTx+4)& (0+255),c
  5007  000D5E  501E               	movf	??_nexaTx+4,w,c
  5008  000D60  101A               	iorwf	??_nexaTx,w,c
  5009  000D62  6E25               	movwf	nexaTx@data,c
  5010  000D64  501B               	movf	??_nexaTx+1,w,c
  5011  000D66  6E26               	movwf	nexaTx@data+1,c
  5012  000D68  501C               	movf	??_nexaTx+2,w,c
  5013  000D6A  6E27               	movwf	nexaTx@data+2,c
  5014  000D6C  501D               	movf	??_nexaTx+3,w,c
  5015  000D6E  6E28               	movwf	nexaTx@data+3,c
  5016  000D70  2A2E               	incf	nexaTx@j,f,c
  5017  000D72  D7D5               	goto	l5324
  5018  000D74                     l5334:
  5019                           
  5020                           ;nexa_learning.c: 23: data[0] = (data[0]<<2) | (asciiToHex(s[6])&0x3);
  5021  000D74  C025  F01A         	movff	nexaTx@data,??_nexaTx
  5022  000D78  C026  F01B         	movff	nexaTx@data+1,??_nexaTx+1
  5023  000D7C  C027  F01C         	movff	nexaTx@data+2,??_nexaTx+2
  5024  000D80  C028  F01D         	movff	nexaTx@data+3,??_nexaTx+3
  5025  000D84  0E02               	movlw	2
  5026  000D86                     u5955:
  5027  000D86  90D8               	bcf	status,0,c
  5028  000D88  361A               	rlcf	??_nexaTx,f,c
  5029  000D8A  361B               	rlcf	??_nexaTx+1,f,c
  5030  000D8C  361C               	rlcf	??_nexaTx+2,f,c
  5031  000D8E  361D               	rlcf	??_nexaTx+3,f,c
  5032  000D90  2EE8               	decfsz	wreg,f,c
  5033  000D92  D7F9               	goto	u5955
  5034  000D94  EE20 F006          	lfsr	2,6
  5035  000D98  5016               	movf	nexaTx@s,w,c
  5036  000D9A  26D9               	addwf	fsr2l,f,c
  5037  000D9C  5017               	movf	nexaTx@s+1,w,c
  5038  000D9E  22DA               	addwfc	fsr2h,f,c
  5039  000DA0  50DF               	movf	indf2,w,c
  5040  000DA2  ECC8  F014         	call	_asciiToHex
  5041  000DA6  6E1E               	movwf	(??_nexaTx+4)& (0+255),c
  5042  000DA8  0E03               	movlw	3
  5043  000DAA  161E               	andwf	??_nexaTx+4,f,c
  5044  000DAC  501E               	movf	??_nexaTx+4,w,c
  5045  000DAE  101A               	iorwf	??_nexaTx,w,c
  5046  000DB0  6E25               	movwf	nexaTx@data,c
  5047  000DB2  501B               	movf	??_nexaTx+1,w,c
  5048  000DB4  6E26               	movwf	nexaTx@data+1,c
  5049  000DB6  501C               	movf	??_nexaTx+2,w,c
  5050  000DB8  6E27               	movwf	nexaTx@data+2,c
  5051  000DBA  501D               	movf	??_nexaTx+3,w,c
  5052  000DBC  6E28               	movwf	nexaTx@data+3,c
  5053                           
  5054                           ;nexa_learning.c: 25: data[0] <<= 6;
  5055  000DBE  0E06               	movlw	6
  5056  000DC0                     u5965:
  5057  000DC0  90D8               	bcf	status,0,c
  5058  000DC2  3625               	rlcf	nexaTx@data,f,c
  5059  000DC4  3626               	rlcf	nexaTx@data+1,f,c
  5060  000DC6  3627               	rlcf	nexaTx@data+2,f,c
  5061  000DC8  3628               	rlcf	nexaTx@data+3,f,c
  5062  000DCA  2EE8               	decfsz	wreg,f,c
  5063  000DCC  D7F9               	goto	u5965
  5064                           
  5065                           ;nexa_learning.c: 26: if (s[7] == '1') data[0] |= 0x20;
  5066  000DCE  EE20 F007          	lfsr	2,7
  5067  000DD2  5016               	movf	nexaTx@s,w,c
  5068  000DD4  26D9               	addwf	fsr2l,f,c
  5069  000DD6  5017               	movf	nexaTx@s+1,w,c
  5070  000DD8  22DA               	addwfc	fsr2h,f,c
  5071  000DDA  0E31               	movlw	49
  5072  000DDC  18DE               	xorwf	postinc2,w,c
  5073  000DDE  A4D8               	btfss	status,2,c
  5074  000DE0  D002               	goto	l5342
  5075  000DE2  8A25               	bsf	nexaTx@data,5,c
  5076  000DE4  D000               	goto	l5342
  5077  000DE6                     l5342:
  5078                           
  5079                           ;nexa_learning.c: 27: data[0] |= asciiToHex(s[8]);
  5080  000DE6  EE20 F008          	lfsr	2,8
  5081  000DEA  5016               	movf	nexaTx@s,w,c
  5082  000DEC  26D9               	addwf	fsr2l,f,c
  5083  000DEE  5017               	movf	nexaTx@s+1,w,c
  5084  000DF0  22DA               	addwfc	fsr2h,f,c
  5085  000DF2  50DF               	movf	indf2,w,c
  5086  000DF4  ECC8  F014         	call	_asciiToHex
  5087  000DF8  6E1A               	movwf	??_nexaTx& (0+255),c
  5088  000DFA  501A               	movf	??_nexaTx,w,c
  5089  000DFC  1225               	iorwf	nexaTx@data,f,c
  5090                           
  5091                           ;nexa_learning.c: 28: if (s[9] > '0') data[0] |= 0x10;
  5092  000DFE  EE20 F009          	lfsr	2,9
  5093  000E02  5016               	movf	nexaTx@s,w,c
  5094  000E04  26D9               	addwf	fsr2l,f,c
  5095  000E06  5017               	movf	nexaTx@s+1,w,c
  5096  000E08  22DA               	addwfc	fsr2h,f,c
  5097  000E0A  0E30               	movlw	48
  5098  000E0C  64DF               	cpfsgt	indf2,c
  5099  000E0E  D002               	goto	l5348
  5100  000E10  8825               	bsf	nexaTx@data,4,c
  5101  000E12  D000               	goto	l5348
  5102  000E14                     l5348:
  5103                           
  5104                           ;nexa_learning.c: 29: if (len==11){
  5105  000E14  0E0B               	movlw	11
  5106  000E16  1818               	xorwf	nexaTx@len,w,c
  5107  000E18  A4D8               	btfss	status,2,c
  5108  000E1A  D022               	goto	l5354
  5109                           
  5110                           ;nexa_learning.c: 30: data[1] = (uint32_t)asciiToHex(s[10]) << 28;
  5111  000E1C  EE20 F00A          	lfsr	2,10
  5112  000E20  5016               	movf	nexaTx@s,w,c
  5113  000E22  26D9               	addwf	fsr2l,f,c
  5114  000E24  5017               	movf	nexaTx@s+1,w,c
  5115  000E26  22DA               	addwfc	fsr2h,f,c
  5116  000E28  50DF               	movf	indf2,w,c
  5117  000E2A  ECC8  F014         	call	_asciiToHex
  5118  000E2E  6E1A               	movwf	??_nexaTx& (0+255),c
  5119  000E30  C01A  F01B         	movff	??_nexaTx,??_nexaTx+1
  5120  000E34  6A1C               	clrf	(??_nexaTx+2)& (0+255),c
  5121  000E36  6A1D               	clrf	(??_nexaTx+3)& (0+255),c
  5122  000E38  6A1E               	clrf	(??_nexaTx+4)& (0+255),c
  5123  000E3A  0E1C               	movlw	28
  5124  000E3C                     u6005:
  5125  000E3C  90D8               	bcf	status,0,c
  5126  000E3E  361B               	rlcf	??_nexaTx+1,f,c
  5127  000E40  361C               	rlcf	??_nexaTx+2,f,c
  5128  000E42  361D               	rlcf	??_nexaTx+3,f,c
  5129  000E44  361E               	rlcf	??_nexaTx+4,f,c
  5130  000E46  2EE8               	decfsz	wreg,f,c
  5131  000E48  D7F9               	goto	u6005
  5132  000E4A  C01B  F029         	movff	??_nexaTx+1,nexaTx@data+4
  5133  000E4E  C01C  F02A         	movff	??_nexaTx+2,nexaTx@data+5
  5134  000E52  C01D  F02B         	movff	??_nexaTx+3,nexaTx@data+6
  5135  000E56  C01E  F02C         	movff	??_nexaTx+4,nexaTx@data+7
  5136                           
  5137                           ;nexa_learning.c: 31: data_len = 36;
  5138  000E5A  0E24               	movlw	36
  5139  000E5C  6E1F               	movwf	nexaTx@data_len,c
  5140  000E5E  D000               	goto	l5354
  5141  000E60                     l5354:
  5142                           
  5143                           ;nexa_learning.c: 32: }
  5144                           ;nexa_learning.c: 34: enter_tx();
  5145  000E60  ECBB  F014         	call	_enter_tx	;wreg free
  5146                           
  5147                           ;nexa_learning.c: 35: for (char resend = 0; resend < resends; resend++){
  5148  000E64  0E00               	movlw	0
  5149  000E66  6E20               	movwf	nexaTx@resend,c
  5150  000E68  D07E               	goto	l5406
  5151  000E6A                     l710:
  5152                           
  5153                           ;nexa_learning.c: 36: LATB2 = 1;
  5154  000E6A  848A               	bsf	3978,2,c	;volatile
  5155                           
  5156                           ;nexa_learning.c: 37: waitTimer(204);
  5157  000E6C  0E00               	movlw	0
  5158  000E6E  6E12               	movwf	waitTimer@value+1,c
  5159  000E70  0ECC               	movlw	204
  5160  000E72  6E11               	movwf	waitTimer@value,c
  5161  000E74  EC04  F014         	call	_waitTimer	;wreg free
  5162                           
  5163                           ;nexa_learning.c: 38: LATB2 = 0;
  5164  000E78  948A               	bcf	3978,2,c	;volatile
  5165                           
  5166                           ;nexa_learning.c: 39: waitTimer(2720);
  5167  000E7A  0E0A               	movlw	10
  5168  000E7C  6E12               	movwf	waitTimer@value+1,c
  5169  000E7E  0EA0               	movlw	160
  5170  000E80  6E11               	movwf	waitTimer@value,c
  5171  000E82  EC04  F014         	call	_waitTimer	;wreg free
  5172                           
  5173                           ;nexa_learning.c: 40: temp = data[0];
  5174  000E86  C025  F021         	movff	nexaTx@data,nexaTx@temp
  5175  000E8A  C026  F022         	movff	nexaTx@data+1,nexaTx@temp+1
  5176  000E8E  C027  F023         	movff	nexaTx@data+2,nexaTx@temp+2
  5177  000E92  C028  F024         	movff	nexaTx@data+3,nexaTx@temp+3
  5178                           
  5179                           ;nexa_learning.c: 41: for (bitnr = 0; bitnr < data_len; bitnr++){
  5180  000E96  0E00               	movlw	0
  5181  000E98  6E2D               	movwf	nexaTx@bitnr,c
  5182  000E9A  D051               	goto	l5398
  5183  000E9C                     l5366:
  5184                           
  5185                           ;nexa_learning.c: 42: if (bitnr==32) temp = data[1];
  5186  000E9C  0E20               	movlw	32
  5187  000E9E  182D               	xorwf	nexaTx@bitnr,w,c
  5188  000EA0  A4D8               	btfss	status,2,c
  5189  000EA2  D008               	goto	l713
  5190  000EA4  C029  F021         	movff	nexaTx@data+4,nexaTx@temp
  5191  000EA8  C02A  F022         	movff	nexaTx@data+5,nexaTx@temp+1
  5192  000EAC  C02B  F023         	movff	nexaTx@data+6,nexaTx@temp+2
  5193  000EB0  C02C  F024         	movff	nexaTx@data+7,nexaTx@temp+3
  5194  000EB4                     l713:
  5195                           
  5196                           ;nexa_learning.c: 43: LATB2 = 1;
  5197  000EB4  848A               	bsf	3978,2,c	;volatile
  5198                           
  5199                           ;nexa_learning.c: 44: waitTimer(204);
  5200  000EB6  0E00               	movlw	0
  5201  000EB8  6E12               	movwf	waitTimer@value+1,c
  5202  000EBA  0ECC               	movlw	204
  5203  000EBC  6E11               	movwf	waitTimer@value,c
  5204  000EBE  EC04  F014         	call	_waitTimer	;wreg free
  5205                           
  5206                           ;nexa_learning.c: 45: LATB2 = 0;
  5207  000EC2  948A               	bcf	3978,2,c	;volatile
  5208                           
  5209                           ;nexa_learning.c: 46: if(!(temp & 0x80000000) || ((bitnr==27)&&(s[9] == '2'))) waitTimer
      +                          (272);
  5210  000EC4  AE24               	btfss	nexaTx@temp+3,7,c
  5211  000EC6  D00E               	goto	l5380
  5212  000EC8  0E1B               	movlw	27
  5213  000ECA  182D               	xorwf	nexaTx@bitnr,w,c
  5214  000ECC  A4D8               	btfss	status,2,c
  5215  000ECE  D011               	goto	l5382
  5216  000ED0  EE20 F009          	lfsr	2,9
  5217  000ED4  5016               	movf	nexaTx@s,w,c
  5218  000ED6  26D9               	addwf	fsr2l,f,c
  5219  000ED8  5017               	movf	nexaTx@s+1,w,c
  5220  000EDA  22DA               	addwfc	fsr2h,f,c
  5221  000EDC  0E32               	movlw	50
  5222  000EDE  18DE               	xorwf	postinc2,w,c
  5223  000EE0  A4D8               	btfss	status,2,c
  5224  000EE2  D007               	goto	l5382
  5225  000EE4                     l5380:
  5226  000EE4  0E01               	movlw	1
  5227  000EE6  6E12               	movwf	waitTimer@value+1,c
  5228  000EE8  0E10               	movlw	16
  5229  000EEA  6E11               	movwf	waitTimer@value,c
  5230  000EEC  EC04  F014         	call	_waitTimer	;wreg free
  5231  000EF0  D007               	goto	l5384
  5232  000EF2                     l5382:
  5233                           
  5234                           ;nexa_learning.c: 47: else waitTimer(1326);
  5235  000EF2  0E05               	movlw	5
  5236  000EF4  6E12               	movwf	waitTimer@value+1,c
  5237  000EF6  0E2E               	movlw	46
  5238  000EF8  6E11               	movwf	waitTimer@value,c
  5239  000EFA  EC04  F014         	call	_waitTimer	;wreg free
  5240  000EFE  D000               	goto	l5384
  5241  000F00                     l5384:
  5242                           
  5243                           ;nexa_learning.c: 48: LATB2 = 1;
  5244  000F00  848A               	bsf	3978,2,c	;volatile
  5245                           
  5246                           ;nexa_learning.c: 49: waitTimer(204);
  5247  000F02  0E00               	movlw	0
  5248  000F04  6E12               	movwf	waitTimer@value+1,c
  5249  000F06  0ECC               	movlw	204
  5250  000F08  6E11               	movwf	waitTimer@value,c
  5251  000F0A  EC04  F014         	call	_waitTimer	;wreg free
  5252                           
  5253                           ;nexa_learning.c: 50: LATB2 = 0;
  5254  000F0E  948A               	bcf	3978,2,c	;volatile
  5255                           
  5256                           ;nexa_learning.c: 51: if(temp & 0x80000000) waitTimer(272);
  5257  000F10  AE24               	btfss	nexaTx@temp+3,7,c
  5258  000F12  D007               	goto	l5392
  5259  000F14  0E01               	movlw	1
  5260  000F16  6E12               	movwf	waitTimer@value+1,c
  5261  000F18  0E10               	movlw	16
  5262  000F1A  6E11               	movwf	waitTimer@value,c
  5263  000F1C  EC04  F014         	call	_waitTimer	;wreg free
  5264  000F20  D007               	goto	l5394
  5265  000F22                     l5392:
  5266                           
  5267                           ;nexa_learning.c: 52: else waitTimer(1326);
  5268  000F22  0E05               	movlw	5
  5269  000F24  6E12               	movwf	waitTimer@value+1,c
  5270  000F26  0E2E               	movlw	46
  5271  000F28  6E11               	movwf	waitTimer@value,c
  5272  000F2A  EC04  F014         	call	_waitTimer	;wreg free
  5273  000F2E  D000               	goto	l5394
  5274  000F30                     l5394:
  5275                           
  5276                           ;nexa_learning.c: 53: temp <<= 1;
  5277  000F30  90D8               	bcf	status,0,c
  5278  000F32  3621               	rlcf	nexaTx@temp,f,c
  5279  000F34  3622               	rlcf	nexaTx@temp+1,f,c
  5280  000F36  3623               	rlcf	nexaTx@temp+2,f,c
  5281  000F38  3624               	rlcf	nexaTx@temp+3,f,c
  5282  000F3A  2A2D               	incf	nexaTx@bitnr,f,c
  5283  000F3C  D000               	goto	l5398
  5284  000F3E                     l5398:
  5285  000F3E  501F               	movf	nexaTx@data_len,w,c
  5286  000F40  5C2D               	subwf	nexaTx@bitnr,w,c
  5287  000F42  A0D8               	btfss	status,0,c
  5288  000F44  D7AB               	goto	l5366
  5289                           
  5290                           ;nexa_learning.c: 54: }
  5291                           ;nexa_learning.c: 55: LATB2 = 1;
  5292  000F46  848A               	bsf	3978,2,c	;volatile
  5293                           
  5294                           ;nexa_learning.c: 56: waitTimer(204);
  5295  000F48  0E00               	movlw	0
  5296  000F4A  6E12               	movwf	waitTimer@value+1,c
  5297  000F4C  0ECC               	movlw	204
  5298  000F4E  6E11               	movwf	waitTimer@value,c
  5299  000F50  EC04  F014         	call	_waitTimer	;wreg free
  5300                           
  5301                           ;nexa_learning.c: 57: LATB2 = 0;
  5302  000F54  948A               	bcf	3978,2,c	;volatile
  5303                           
  5304                           ;nexa_learning.c: 58: waitTimer(10000);
  5305  000F56  0E27               	movlw	39
  5306  000F58  6E12               	movwf	waitTimer@value+1,c
  5307  000F5A  0E10               	movlw	16
  5308  000F5C  6E11               	movwf	waitTimer@value,c
  5309  000F5E  EC04  F014         	call	_waitTimer	;wreg free
  5310  000F62  2A20               	incf	nexaTx@resend,f,c
  5311  000F64  D000               	goto	l5406
  5312  000F66                     l5406:
  5313  000F66  5019               	movf	nexaTx@resends,w,c
  5314  000F68  5C20               	subwf	nexaTx@resend,w,c
  5315  000F6A  A0D8               	btfss	status,0,c
  5316  000F6C  D77E               	goto	l710
  5317                           
  5318                           ;nexa_learning.c: 59: }
  5319                           ;nexa_learning.c: 60: enter_rx();
  5320  000F6E  EC5C  F014         	call	_enter_rx	;wreg free
  5321  000F72  0012               	return		;funcret
  5322  000F74                     __end_of_nexaTx:
  5323                           	opt stack 0
  5324                           tblptru	equ	0xFF8
  5325                           tblptrh	equ	0xFF7
  5326                           tblptrl	equ	0xFF6
  5327                           tablat	equ	0xFF5
  5328                           prodh	equ	0xFF4
  5329                           prodl	equ	0xFF3
  5330                           intcon	equ	0xFF2
  5331                           postinc0	equ	0xFEE
  5332                           wreg	equ	0xFE8
  5333                           indf1	equ	0xFE7
  5334                           postdec1	equ	0xFE5
  5335                           fsr1h	equ	0xFE2
  5336                           fsr1l	equ	0xFE1
  5337                           indf2	equ	0xFDF
  5338                           postinc2	equ	0xFDE
  5339                           fsr2h	equ	0xFDA
  5340                           fsr2l	equ	0xFD9
  5341                           status	equ	0xFD8
  5342                           
  5343 ;; *************** function _kangthaiTx *****************
  5344 ;; Defined at:
  5345 ;;		line 6 in file "../kangthai.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;  s               2   21[COMRAM] PTR unsigned char 
  5348 ;;		 -> main@line(32), 
  5349 ;;  resends         1   23[COMRAM] unsigned char 
  5350 ;; Auto vars:     Size  Location     Type
  5351 ;;  bitnr           1   35[COMRAM] unsigned char 
  5352 ;;  resend          1   30[COMRAM] unsigned char 
  5353 ;;  j               1   41[COMRAM] unsigned char 
  5354 ;;  j               1   40[COMRAM] unsigned char 
  5355 ;;  data            4   36[COMRAM] unsigned long 
  5356 ;;  temp            4   31[COMRAM] unsigned long 
  5357 ;; Return value:  Size  Location     Type
  5358 ;;		None               void
  5359 ;; Registers used:
  5360 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5361 ;; Tracked objects:
  5362 ;;		On entry : 0/0
  5363 ;;		On exit  : 0/0
  5364 ;;		Unchanged: 0/0
  5365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5366 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5367 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5368 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5369 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5370 ;;Total ram usage:       21 bytes
  5371 ;; Hardware stack levels used:    1
  5372 ;; Hardware stack levels required when called:    5
  5373 ;; This function calls:
  5374 ;;		_enter_rx
  5375 ;;		_enter_tx
  5376 ;;		_waitTimer
  5377 ;; This function is called by:
  5378 ;;		_parseCmd
  5379 ;; This function uses a non-reentrant model
  5380 ;;
  5381                           
  5382                           	psect	text22
  5383  0012CA                     __ptext22:
  5384                           	opt stack 0
  5385  0012CA                     _kangthaiTx:
  5386                           	opt stack 24
  5387                           
  5388                           ;kangthai.c: 9: unsigned long data = 0;
  5389                           
  5390                           ;incstack = 0
  5391  0012CA  0E00               	movlw	0
  5392  0012CC  6E25               	movwf	kangthaiTx@data,c
  5393  0012CE  0E00               	movlw	0
  5394  0012D0  6E26               	movwf	kangthaiTx@data+1,c
  5395  0012D2  0E00               	movlw	0
  5396  0012D4  6E27               	movwf	kangthaiTx@data+2,c
  5397  0012D6  0E00               	movlw	0
  5398  0012D8  6E28               	movwf	kangthaiTx@data+3,c
  5399                           
  5400                           ;kangthai.c: 10: unsigned long temp;
  5401                           ;kangthai.c: 12: for (char j=0; j<5; j++){
  5402  0012DA  0E00               	movlw	0
  5403  0012DC  6E29               	movwf	kangthaiTx@j,c
  5404  0012DE                     l5412:
  5405  0012DE  0E04               	movlw	4
  5406  0012E0  6429               	cpfsgt	kangthaiTx@j,c
  5407  0012E2  D001               	goto	l5416
  5408  0012E4  D021               	goto	l5424
  5409  0012E6                     l5416:
  5410                           
  5411                           ;kangthai.c: 13: data |= s[j] - '0';
  5412  0012E6  5029               	movf	kangthaiTx@j,w,c
  5413  0012E8  0D01               	mullw	1
  5414  0012EA  50F3               	movf	prodl,w,c
  5415  0012EC  2416               	addwf	kangthaiTx@s,w,c
  5416  0012EE  6ED9               	movwf	fsr2l,c
  5417  0012F0  50F4               	movf	prodh,w,c
  5418  0012F2  2017               	addwfc	kangthaiTx@s+1,w,c
  5419  0012F4  6EDA               	movwf	fsr2h,c
  5420  0012F6  50DF               	movf	indf2,w,c
  5421  0012F8  6E19               	movwf	??_kangthaiTx& (0+255),c
  5422  0012FA  0ED0               	movlw	208
  5423  0012FC  2419               	addwf	??_kangthaiTx,w,c
  5424  0012FE  6E1A               	movwf	(??_kangthaiTx+1)& (0+255),c
  5425  001300  6A1B               	clrf	(??_kangthaiTx+2)& (0+255),c
  5426  001302  0EFF               	movlw	255
  5427  001304  221B               	addwfc	(??_kangthaiTx+2)& (0+255),f,c
  5428  001306  6A1C               	clrf	(??_kangthaiTx+3)& (0+255),c
  5429  001308  6A1D               	clrf	(??_kangthaiTx+4)& (0+255),c
  5430  00130A  501A               	movf	??_kangthaiTx+1,w,c
  5431  00130C  1225               	iorwf	kangthaiTx@data,f,c
  5432  00130E  501B               	movf	??_kangthaiTx+2,w,c
  5433  001310  1226               	iorwf	kangthaiTx@data+1,f,c
  5434  001312  501C               	movf	??_kangthaiTx+3,w,c
  5435  001314  1227               	iorwf	kangthaiTx@data+2,f,c
  5436  001316  501D               	movf	??_kangthaiTx+4,w,c
  5437  001318  1228               	iorwf	kangthaiTx@data+3,f,c
  5438                           
  5439                           ;kangthai.c: 14: data <<= 1;
  5440  00131A  90D8               	bcf	status,0,c
  5441  00131C  3625               	rlcf	kangthaiTx@data,f,c
  5442  00131E  3626               	rlcf	kangthaiTx@data+1,f,c
  5443  001320  3627               	rlcf	kangthaiTx@data+2,f,c
  5444  001322  3628               	rlcf	kangthaiTx@data+3,f,c
  5445  001324  2A29               	incf	kangthaiTx@j,f,c
  5446  001326  D7DB               	goto	l5412
  5447  001328                     l5424:
  5448                           
  5449                           ;kangthai.c: 15: }
  5450                           ;kangthai.c: 16: for (char j=0; j<5; j++){
  5451  001328  0E00               	movlw	0
  5452  00132A  6E2A               	movwf	kangthaiTx@j_379,c
  5453  00132C                     l5426:
  5454  00132C  0E04               	movlw	4
  5455  00132E  642A               	cpfsgt	kangthaiTx@j_379,c
  5456  001330  D001               	goto	l5430
  5457  001332  D023               	goto	l5436
  5458  001334                     l5430:
  5459                           
  5460                           ;kangthai.c: 17: if((s[5] - 'A') == j) data |= 1;
  5461  001334  502A               	movf	kangthaiTx@j_379,w,c
  5462  001336  6E19               	movwf	??_kangthaiTx& (0+255),c
  5463  001338  6A1A               	clrf	(??_kangthaiTx+1)& (0+255),c
  5464  00133A  0EBF               	movlw	191
  5465  00133C  6E1B               	movwf	(??_kangthaiTx+2)& (0+255),c
  5466  00133E  0EFF               	movlw	255
  5467  001340  6E1C               	movwf	(??_kangthaiTx+3)& (0+255),c
  5468  001342  EE20 F005          	lfsr	2,5
  5469  001346  5016               	movf	kangthaiTx@s,w,c
  5470  001348  26D9               	addwf	fsr2l,f,c
  5471  00134A  5017               	movf	kangthaiTx@s+1,w,c
  5472  00134C  22DA               	addwfc	fsr2h,f,c
  5473  00134E  50DF               	movf	indf2,w,c
  5474  001350  6E1D               	movwf	(??_kangthaiTx+4)& (0+255),c
  5475  001352  6A1E               	clrf	(??_kangthaiTx+5)& (0+255),c
  5476  001354  501B               	movf	??_kangthaiTx+2,w,c
  5477  001356  261D               	addwf	??_kangthaiTx+4,f,c
  5478  001358  501C               	movf	??_kangthaiTx+3,w,c
  5479  00135A  221E               	addwfc	??_kangthaiTx+5,f,c
  5480  00135C  5019               	movf	??_kangthaiTx,w,c
  5481  00135E  181D               	xorwf	??_kangthaiTx+4,w,c
  5482  001360  E105               	bnz	l329
  5483  001362  501A               	movf	??_kangthaiTx+1,w,c
  5484  001364  181E               	xorwf	??_kangthaiTx+5,w,c
  5485  001366  A4D8               	btfss	status,2,c
  5486  001368  D001               	goto	l329
  5487  00136A  8025               	bsf	kangthaiTx@data,0,c
  5488  00136C                     l329:
  5489                           
  5490                           ;kangthai.c: 18: data <<= 1;
  5491  00136C  90D8               	bcf	status,0,c
  5492  00136E  3625               	rlcf	kangthaiTx@data,f,c
  5493  001370  3626               	rlcf	kangthaiTx@data+1,f,c
  5494  001372  3627               	rlcf	kangthaiTx@data+2,f,c
  5495  001374  3628               	rlcf	kangthaiTx@data+3,f,c
  5496  001376  2A2A               	incf	kangthaiTx@j_379,f,c
  5497  001378  D7D9               	goto	l5426
  5498  00137A                     l5436:
  5499                           
  5500                           ;kangthai.c: 19: }
  5501                           ;kangthai.c: 20: data <<= 1;
  5502  00137A  90D8               	bcf	status,0,c
  5503  00137C  3625               	rlcf	kangthaiTx@data,f,c
  5504  00137E  3626               	rlcf	kangthaiTx@data+1,f,c
  5505  001380  3627               	rlcf	kangthaiTx@data+2,f,c
  5506  001382  3628               	rlcf	kangthaiTx@data+3,f,c
  5507                           
  5508                           ;kangthai.c: 21: if(s[6] == '1') data |= 0b10;
  5509  001384  EE20 F006          	lfsr	2,6
  5510  001388  5016               	movf	kangthaiTx@s,w,c
  5511  00138A  26D9               	addwf	fsr2l,f,c
  5512  00138C  5017               	movf	kangthaiTx@s+1,w,c
  5513  00138E  22DA               	addwfc	fsr2h,f,c
  5514  001390  0E31               	movlw	49
  5515  001392  18DE               	xorwf	postinc2,w,c
  5516  001394  A4D8               	btfss	status,2,c
  5517  001396  D002               	goto	l5442
  5518  001398  8225               	bsf	kangthaiTx@data,1,c
  5519  00139A  D002               	goto	l5444
  5520  00139C                     l5442:
  5521                           
  5522                           ;kangthai.c: 22: else data |= 0b01;
  5523  00139C  8025               	bsf	kangthaiTx@data,0,c
  5524  00139E  D000               	goto	l5444
  5525  0013A0                     l5444:
  5526                           
  5527                           ;kangthai.c: 24: enter_tx();
  5528  0013A0  ECBB  F014         	call	_enter_tx	;wreg free
  5529                           
  5530                           ;kangthai.c: 25: for (char resend = 0; resend < resends; resend++){
  5531  0013A4  0E00               	movlw	0
  5532  0013A6  6E1F               	movwf	kangthaiTx@resend,c
  5533  0013A8  D05B               	goto	l5484
  5534  0013AA                     l333:
  5535                           
  5536                           ;kangthai.c: 26: temp = data;
  5537  0013AA  C025  F020         	movff	kangthaiTx@data,kangthaiTx@temp
  5538  0013AE  C026  F021         	movff	kangthaiTx@data+1,kangthaiTx@temp+1
  5539  0013B2  C027  F022         	movff	kangthaiTx@data+2,kangthaiTx@temp+2
  5540  0013B6  C028  F023         	movff	kangthaiTx@data+3,kangthaiTx@temp+3
  5541                           
  5542                           ;kangthai.c: 27: LATB2 = 1;
  5543  0013BA  848A               	bsf	3978,2,c	;volatile
  5544                           
  5545                           ;kangthai.c: 28: waitTimer(357);
  5546  0013BC  0E01               	movlw	1
  5547  0013BE  6E12               	movwf	waitTimer@value+1,c
  5548  0013C0  0E65               	movlw	101
  5549  0013C2  6E11               	movwf	waitTimer@value,c
  5550  0013C4  EC04  F014         	call	_waitTimer	;wreg free
  5551                           
  5552                           ;kangthai.c: 29: LATB2 = 0;
  5553  0013C8  948A               	bcf	3978,2,c	;volatile
  5554                           
  5555                           ;kangthai.c: 30: waitTimer(357*3);
  5556  0013CA  0E04               	movlw	4
  5557  0013CC  6E12               	movwf	waitTimer@value+1,c
  5558  0013CE  0E2F               	movlw	47
  5559  0013D0  6E11               	movwf	waitTimer@value,c
  5560  0013D2  EC04  F014         	call	_waitTimer	;wreg free
  5561                           
  5562                           ;kangthai.c: 31: for (char bitnr = 0; bitnr < 12; bitnr++){
  5563  0013D6  0E00               	movlw	0
  5564  0013D8  6E24               	movwf	kangthaiTx@bitnr,c
  5565  0013DA                     l5454:
  5566  0013DA  0E0B               	movlw	11
  5567  0013DC  6424               	cpfsgt	kangthaiTx@bitnr,c
  5568  0013DE  D001               	goto	l334
  5569  0013E0  D037               	goto	l5480
  5570  0013E2                     l334:
  5571                           
  5572                           ;kangthai.c: 32: LATB2 = 1;
  5573  0013E2  848A               	bsf	3978,2,c	;volatile
  5574                           
  5575                           ;kangthai.c: 33: if(temp & 0b100000000000) waitTimer(357);
  5576  0013E4  A621               	btfss	kangthaiTx@temp+1,3,c
  5577  0013E6  D007               	goto	l5460
  5578  0013E8  0E01               	movlw	1
  5579  0013EA  6E12               	movwf	waitTimer@value+1,c
  5580  0013EC  0E65               	movlw	101
  5581  0013EE  6E11               	movwf	waitTimer@value,c
  5582  0013F0  EC04  F014         	call	_waitTimer	;wreg free
  5583  0013F4  D007               	goto	l5462
  5584  0013F6                     l5460:
  5585                           
  5586                           ;kangthai.c: 34: else waitTimer(357*3);
  5587  0013F6  0E04               	movlw	4
  5588  0013F8  6E12               	movwf	waitTimer@value+1,c
  5589  0013FA  0E2F               	movlw	47
  5590  0013FC  6E11               	movwf	waitTimer@value,c
  5591  0013FE  EC04  F014         	call	_waitTimer	;wreg free
  5592  001402  D000               	goto	l5462
  5593  001404                     l5462:
  5594                           
  5595                           ;kangthai.c: 35: LATB2 = 0;
  5596  001404  948A               	bcf	3978,2,c	;volatile
  5597                           
  5598                           ;kangthai.c: 36: if(temp & 0b100000000000) waitTimer(357*3);
  5599  001406  A621               	btfss	kangthaiTx@temp+1,3,c
  5600  001408  D007               	goto	l5468
  5601  00140A  0E04               	movlw	4
  5602  00140C  6E12               	movwf	waitTimer@value+1,c
  5603  00140E  0E2F               	movlw	47
  5604  001410  6E11               	movwf	waitTimer@value,c
  5605  001412  EC04  F014         	call	_waitTimer	;wreg free
  5606  001416  D007               	goto	l5470
  5607  001418                     l5468:
  5608                           
  5609                           ;kangthai.c: 37: else waitTimer(357);
  5610  001418  0E01               	movlw	1
  5611  00141A  6E12               	movwf	waitTimer@value+1,c
  5612  00141C  0E65               	movlw	101
  5613  00141E  6E11               	movwf	waitTimer@value,c
  5614  001420  EC04  F014         	call	_waitTimer	;wreg free
  5615  001424  D000               	goto	l5470
  5616  001426                     l5470:
  5617                           
  5618                           ;kangthai.c: 38: LATB2 = 1;
  5619  001426  848A               	bsf	3978,2,c	;volatile
  5620                           
  5621                           ;kangthai.c: 39: waitTimer(357);
  5622  001428  0E01               	movlw	1
  5623  00142A  6E12               	movwf	waitTimer@value+1,c
  5624  00142C  0E65               	movlw	101
  5625  00142E  6E11               	movwf	waitTimer@value,c
  5626  001430  EC04  F014         	call	_waitTimer	;wreg free
  5627                           
  5628                           ;kangthai.c: 40: LATB2 = 0;
  5629  001434  948A               	bcf	3978,2,c	;volatile
  5630                           
  5631                           ;kangthai.c: 41: waitTimer(357*3);
  5632  001436  0E04               	movlw	4
  5633  001438  6E12               	movwf	waitTimer@value+1,c
  5634  00143A  0E2F               	movlw	47
  5635  00143C  6E11               	movwf	waitTimer@value,c
  5636  00143E  EC04  F014         	call	_waitTimer	;wreg free
  5637                           
  5638                           ;kangthai.c: 42: temp <<= 1;
  5639  001442  90D8               	bcf	status,0,c
  5640  001444  3620               	rlcf	kangthaiTx@temp,f,c
  5641  001446  3621               	rlcf	kangthaiTx@temp+1,f,c
  5642  001448  3622               	rlcf	kangthaiTx@temp+2,f,c
  5643  00144A  3623               	rlcf	kangthaiTx@temp+3,f,c
  5644  00144C  2A24               	incf	kangthaiTx@bitnr,f,c
  5645  00144E  D7C5               	goto	l5454
  5646  001450                     l5480:
  5647                           
  5648                           ;kangthai.c: 43: }
  5649                           ;kangthai.c: 44: waitTimer(10000);
  5650  001450  0E27               	movlw	39
  5651  001452  6E12               	movwf	waitTimer@value+1,c
  5652  001454  0E10               	movlw	16
  5653  001456  6E11               	movwf	waitTimer@value,c
  5654  001458  EC04  F014         	call	_waitTimer	;wreg free
  5655  00145C  2A1F               	incf	kangthaiTx@resend,f,c
  5656  00145E  D000               	goto	l5484
  5657  001460                     l5484:
  5658  001460  5018               	movf	kangthaiTx@resends,w,c
  5659  001462  5C1F               	subwf	kangthaiTx@resend,w,c
  5660  001464  A0D8               	btfss	status,0,c
  5661  001466  D7A1               	goto	l333
  5662                           
  5663                           ;kangthai.c: 45: }
  5664                           ;kangthai.c: 46: enter_rx();
  5665  001468  EC5C  F014         	call	_enter_rx	;wreg free
  5666  00146C  0012               	return		;funcret
  5667  00146E                     __end_of_kangthaiTx:
  5668                           	opt stack 0
  5669                           tblptru	equ	0xFF8
  5670                           tblptrh	equ	0xFF7
  5671                           tblptrl	equ	0xFF6
  5672                           tablat	equ	0xFF5
  5673                           prodh	equ	0xFF4
  5674                           prodl	equ	0xFF3
  5675                           intcon	equ	0xFF2
  5676                           postinc0	equ	0xFEE
  5677                           wreg	equ	0xFE8
  5678                           indf1	equ	0xFE7
  5679                           postdec1	equ	0xFE5
  5680                           fsr1h	equ	0xFE2
  5681                           fsr1l	equ	0xFE1
  5682                           indf2	equ	0xFDF
  5683                           postinc2	equ	0xFDE
  5684                           fsr2h	equ	0xFDA
  5685                           fsr2l	equ	0xFD9
  5686                           status	equ	0xFD8
  5687                           
  5688 ;; *************** function _gaoTx *****************
  5689 ;; Defined at:
  5690 ;;		line 7 in file "../gao.c"
  5691 ;; Parameters:    Size  Location     Type
  5692 ;;  s               2   21[COMRAM] PTR unsigned char 
  5693 ;;		 -> main@line(32), 
  5694 ;;  resends         1   23[COMRAM] unsigned char 
  5695 ;; Auto vars:     Size  Location     Type
  5696 ;;  bitnr           1   38[COMRAM] unsigned char 
  5697 ;;  preamble        1   37[COMRAM] unsigned char 
  5698 ;;  resend          1   28[COMRAM] unsigned char 
  5699 ;;  j               1   39[COMRAM] unsigned char 
  5700 ;;  temp            4   33[COMRAM] unsigned long 
  5701 ;;  data            4   29[COMRAM] unsigned long 
  5702 ;; Return value:  Size  Location     Type
  5703 ;;		None               void
  5704 ;; Registers used:
  5705 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5706 ;; Tracked objects:
  5707 ;;		On entry : 0/0
  5708 ;;		On exit  : 0/0
  5709 ;;		Unchanged: 0/0
  5710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5711 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5712 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5713 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5714 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5715 ;;Total ram usage:       19 bytes
  5716 ;; Hardware stack levels used:    1
  5717 ;; Hardware stack levels required when called:    5
  5718 ;; This function calls:
  5719 ;;		_asciiToHex
  5720 ;;		_enter_rx
  5721 ;;		_enter_tx
  5722 ;;		_waitTimer
  5723 ;; This function is called by:
  5724 ;;		_parseCmd
  5725 ;; This function uses a non-reentrant model
  5726 ;;
  5727                           
  5728                           	psect	text23
  5729  000F74                     __ptext23:
  5730                           	opt stack 0
  5731  000F74                     _gaoTx:
  5732                           	opt stack 24
  5733                           
  5734                           ;gao.c: 10: unsigned long temp;
  5735                           ;gao.c: 11: unsigned long data = 0;
  5736                           
  5737                           ;incstack = 0
  5738  000F74  0E00               	movlw	0
  5739  000F76  6E1E               	movwf	gaoTx@data,c
  5740  000F78  0E00               	movlw	0
  5741  000F7A  6E1F               	movwf	gaoTx@data+1,c
  5742  000F7C  0E00               	movlw	0
  5743  000F7E  6E20               	movwf	gaoTx@data+2,c
  5744  000F80  0E00               	movlw	0
  5745  000F82  6E21               	movwf	gaoTx@data+3,c
  5746                           
  5747                           ;gao.c: 13: for (char j = 0; j < 5; j++){
  5748  000F84  0E00               	movlw	0
  5749  000F86  6E28               	movwf	gaoTx@j,c
  5750  000F88                     l5014:
  5751  000F88  0E04               	movlw	4
  5752  000F8A  6428               	cpfsgt	gaoTx@j,c
  5753  000F8C  D001               	goto	l5018
  5754  000F8E  D018               	goto	l5026
  5755  000F90                     l5018:
  5756                           
  5757                           ;gao.c: 14: data |= asciiToHex(s[j]);
  5758  000F90  5028               	movf	gaoTx@j,w,c
  5759  000F92  0D01               	mullw	1
  5760  000F94  50F3               	movf	prodl,w,c
  5761  000F96  2416               	addwf	gaoTx@s,w,c
  5762  000F98  6ED9               	movwf	fsr2l,c
  5763  000F9A  50F4               	movf	prodh,w,c
  5764  000F9C  2017               	addwfc	gaoTx@s+1,w,c
  5765  000F9E  6EDA               	movwf	fsr2h,c
  5766  000FA0  50DF               	movf	indf2,w,c
  5767  000FA2  ECC8  F014         	call	_asciiToHex
  5768  000FA6  6E19               	movwf	??_gaoTx& (0+255),c
  5769  000FA8  5019               	movf	??_gaoTx,w,c
  5770  000FAA  121E               	iorwf	gaoTx@data,f,c
  5771                           
  5772                           ;gao.c: 15: data <<= 4;
  5773  000FAC  0E04               	movlw	4
  5774  000FAE                     u5695:
  5775  000FAE  90D8               	bcf	status,0,c
  5776  000FB0  361E               	rlcf	gaoTx@data,f,c
  5777  000FB2  361F               	rlcf	gaoTx@data+1,f,c
  5778  000FB4  3620               	rlcf	gaoTx@data+2,f,c
  5779  000FB6  3621               	rlcf	gaoTx@data+3,f,c
  5780  000FB8  2EE8               	decfsz	wreg,f,c
  5781  000FBA  D7F9               	goto	u5695
  5782  000FBC  2A28               	incf	gaoTx@j,f,c
  5783  000FBE  D7E4               	goto	l5014
  5784  000FC0                     l5026:
  5785                           
  5786                           ;gao.c: 16: }
  5787                           ;gao.c: 17: if((s[5] - '0') == 1) data |= 0xF;
  5788  000FC0  0ED0               	movlw	208
  5789  000FC2  6E19               	movwf	??_gaoTx& (0+255),c
  5790  000FC4  0EFF               	movlw	255
  5791  000FC6  6E1A               	movwf	(??_gaoTx+1)& (0+255),c
  5792  000FC8  EE20 F005          	lfsr	2,5
  5793  000FCC  5016               	movf	gaoTx@s,w,c
  5794  000FCE  26D9               	addwf	fsr2l,f,c
  5795  000FD0  5017               	movf	gaoTx@s+1,w,c
  5796  000FD2  22DA               	addwfc	fsr2h,f,c
  5797  000FD4  50DF               	movf	indf2,w,c
  5798  000FD6  6E1B               	movwf	(??_gaoTx+2)& (0+255),c
  5799  000FD8  6A1C               	clrf	(??_gaoTx+3)& (0+255),c
  5800  000FDA  5019               	movf	??_gaoTx,w,c
  5801  000FDC  261B               	addwf	??_gaoTx+2,f,c
  5802  000FDE  501A               	movf	??_gaoTx+1,w,c
  5803  000FE0  221C               	addwfc	??_gaoTx+3,f,c
  5804  000FE2  041B               	decf	??_gaoTx+2,w,c
  5805  000FE4  101C               	iorwf	??_gaoTx+3,w,c
  5806  000FE6  A4D8               	btfss	status,2,c
  5807  000FE8  D007               	goto	l5030
  5808  000FEA  0E0F               	movlw	15
  5809  000FEC  121E               	iorwf	gaoTx@data,f,c
  5810  000FEE  0E00               	movlw	0
  5811  000FF0  121F               	iorwf	gaoTx@data+1,f,c
  5812  000FF2  1220               	iorwf	gaoTx@data+2,f,c
  5813  000FF4  1221               	iorwf	gaoTx@data+3,f,c
  5814  000FF6  D000               	goto	l5030
  5815  000FF8                     l5030:
  5816                           
  5817                           ;gao.c: 18: if((s[5] - '0') == 2) data |= 0xA;
  5818  000FF8  0ED0               	movlw	208
  5819  000FFA  6E19               	movwf	??_gaoTx& (0+255),c
  5820  000FFC  0EFF               	movlw	255
  5821  000FFE  6E1A               	movwf	(??_gaoTx+1)& (0+255),c
  5822  001000  EE20 F005          	lfsr	2,5
  5823  001004  5016               	movf	gaoTx@s,w,c
  5824  001006  26D9               	addwf	fsr2l,f,c
  5825  001008  5017               	movf	gaoTx@s+1,w,c
  5826  00100A  22DA               	addwfc	fsr2h,f,c
  5827  00100C  50DF               	movf	indf2,w,c
  5828  00100E  6E1B               	movwf	(??_gaoTx+2)& (0+255),c
  5829  001010  6A1C               	clrf	(??_gaoTx+3)& (0+255),c
  5830  001012  5019               	movf	??_gaoTx,w,c
  5831  001014  261B               	addwf	??_gaoTx+2,f,c
  5832  001016  501A               	movf	??_gaoTx+1,w,c
  5833  001018  221C               	addwfc	??_gaoTx+3,f,c
  5834  00101A  0E02               	movlw	2
  5835  00101C  181B               	xorwf	??_gaoTx+2,w,c
  5836  00101E  101C               	iorwf	??_gaoTx+3,w,c
  5837  001020  A4D8               	btfss	status,2,c
  5838  001022  D007               	goto	l5034
  5839  001024  0E0A               	movlw	10
  5840  001026  121E               	iorwf	gaoTx@data,f,c
  5841  001028  0E00               	movlw	0
  5842  00102A  121F               	iorwf	gaoTx@data+1,f,c
  5843  00102C  1220               	iorwf	gaoTx@data+2,f,c
  5844  00102E  1221               	iorwf	gaoTx@data+3,f,c
  5845  001030  D000               	goto	l5034
  5846  001032                     l5034:
  5847                           
  5848                           ;gao.c: 20: enter_tx();
  5849  001032  ECBB  F014         	call	_enter_tx	;wreg free
  5850                           
  5851                           ;gao.c: 21: for (char resend = 0; resend < resends; resend++){
  5852  001036  0E00               	movlw	0
  5853  001038  6E1D               	movwf	gaoTx@resend,c
  5854  00103A  D06B               	goto	l5090
  5855  00103C                     l109:
  5856                           
  5857                           ;gao.c: 22: temp = data;
  5858  00103C  C01E  F022         	movff	gaoTx@data,gaoTx@temp
  5859  001040  C01F  F023         	movff	gaoTx@data+1,gaoTx@temp+1
  5860  001044  C020  F024         	movff	gaoTx@data+2,gaoTx@temp+2
  5861  001048  C021  F025         	movff	gaoTx@data+3,gaoTx@temp+3
  5862                           
  5863                           ;gao.c: 23: for (char preamble = 0; preamble < 4; preamble++){
  5864  00104C  0E00               	movlw	0
  5865  00104E  6E26               	movwf	gaoTx@preamble,c
  5866  001050                     l5040:
  5867  001050  0E03               	movlw	3
  5868  001052  6426               	cpfsgt	gaoTx@preamble,c
  5869  001054  D001               	goto	l110
  5870  001056  D010               	goto	l5052
  5871  001058                     l110:
  5872                           
  5873                           ;gao.c: 24: LATB2 = 1;
  5874  001058  848A               	bsf	3978,2,c	;volatile
  5875                           
  5876                           ;gao.c: 25: waitTimer(590);
  5877  00105A  0E02               	movlw	2
  5878  00105C  6E12               	movwf	waitTimer@value+1,c
  5879  00105E  0E4E               	movlw	78
  5880  001060  6E11               	movwf	waitTimer@value,c
  5881  001062  EC04  F014         	call	_waitTimer	;wreg free
  5882                           
  5883                           ;gao.c: 26: LATB2 = 0;
  5884  001066  948A               	bcf	3978,2,c	;volatile
  5885                           
  5886                           ;gao.c: 27: waitTimer(590);
  5887  001068  0E02               	movlw	2
  5888  00106A  6E12               	movwf	waitTimer@value+1,c
  5889  00106C  0E4E               	movlw	78
  5890  00106E  6E11               	movwf	waitTimer@value,c
  5891  001070  EC04  F014         	call	_waitTimer	;wreg free
  5892  001074  2A26               	incf	gaoTx@preamble,f,c
  5893  001076  D7EC               	goto	l5040
  5894  001078                     l5052:
  5895                           
  5896                           ;gao.c: 28: }
  5897                           ;gao.c: 29: for (char bitnr = 0; bitnr < 24; bitnr++){
  5898  001078  0E00               	movlw	0
  5899  00107A  6E27               	movwf	gaoTx@bitnr,c
  5900  00107C  D037               	goto	l5082
  5901  00107E  D039               	goto	l113
  5902  001080                     l112:
  5903                           
  5904                           ;gao.c: 30: LATB2 = 1;
  5905  001080  848A               	bsf	3978,2,c	;volatile
  5906                           
  5907                           ;gao.c: 31: waitTimer(590);
  5908  001082  0E02               	movlw	2
  5909  001084  6E12               	movwf	waitTimer@value+1,c
  5910  001086  0E4E               	movlw	78
  5911  001088  6E11               	movwf	waitTimer@value,c
  5912  00108A  EC04  F014         	call	_waitTimer	;wreg free
  5913                           
  5914                           ;gao.c: 32: LATB2 = 0;
  5915  00108E  948A               	bcf	3978,2,c	;volatile
  5916                           
  5917                           ;gao.c: 33: if(temp & 0b100000000000000000000000) waitTimer(590*2);
  5918  001090  AE24               	btfss	gaoTx@temp+2,7,c
  5919  001092  D007               	goto	l5066
  5920  001094  0E04               	movlw	4
  5921  001096  6E12               	movwf	waitTimer@value+1,c
  5922  001098  0E9C               	movlw	156
  5923  00109A  6E11               	movwf	waitTimer@value,c
  5924  00109C  EC04  F014         	call	_waitTimer	;wreg free
  5925  0010A0  D007               	goto	l5068
  5926  0010A2                     l5066:
  5927                           
  5928                           ;gao.c: 34: else waitTimer(590);
  5929  0010A2  0E02               	movlw	2
  5930  0010A4  6E12               	movwf	waitTimer@value+1,c
  5931  0010A6  0E4E               	movlw	78
  5932  0010A8  6E11               	movwf	waitTimer@value,c
  5933  0010AA  EC04  F014         	call	_waitTimer	;wreg free
  5934  0010AE  D000               	goto	l5068
  5935  0010B0                     l5068:
  5936                           
  5937                           ;gao.c: 35: LATB2 = 1;
  5938  0010B0  848A               	bsf	3978,2,c	;volatile
  5939                           
  5940                           ;gao.c: 36: waitTimer(590);
  5941  0010B2  0E02               	movlw	2
  5942  0010B4  6E12               	movwf	waitTimer@value+1,c
  5943  0010B6  0E4E               	movlw	78
  5944  0010B8  6E11               	movwf	waitTimer@value,c
  5945  0010BA  EC04  F014         	call	_waitTimer	;wreg free
  5946                           
  5947                           ;gao.c: 37: LATB2 = 0;
  5948  0010BE  948A               	bcf	3978,2,c	;volatile
  5949                           
  5950                           ;gao.c: 38: if(temp & 0b100000000000000000000000) waitTimer(590);
  5951  0010C0  AE24               	btfss	gaoTx@temp+2,7,c
  5952  0010C2  D007               	goto	l5076
  5953  0010C4  0E02               	movlw	2
  5954  0010C6  6E12               	movwf	waitTimer@value+1,c
  5955  0010C8  0E4E               	movlw	78
  5956  0010CA  6E11               	movwf	waitTimer@value,c
  5957  0010CC  EC04  F014         	call	_waitTimer	;wreg free
  5958  0010D0  D007               	goto	l5078
  5959  0010D2                     l5076:
  5960                           
  5961                           ;gao.c: 39: else waitTimer(590*2);
  5962  0010D2  0E04               	movlw	4
  5963  0010D4  6E12               	movwf	waitTimer@value+1,c
  5964  0010D6  0E9C               	movlw	156
  5965  0010D8  6E11               	movwf	waitTimer@value,c
  5966  0010DA  EC04  F014         	call	_waitTimer	;wreg free
  5967  0010DE  D000               	goto	l5078
  5968  0010E0                     l5078:
  5969                           
  5970                           ;gao.c: 40: temp <<= 1;
  5971  0010E0  90D8               	bcf	status,0,c
  5972  0010E2  3622               	rlcf	gaoTx@temp,f,c
  5973  0010E4  3623               	rlcf	gaoTx@temp+1,f,c
  5974  0010E6  3624               	rlcf	gaoTx@temp+2,f,c
  5975  0010E8  3625               	rlcf	gaoTx@temp+3,f,c
  5976  0010EA  2A27               	incf	gaoTx@bitnr,f,c
  5977  0010EC                     l5082:
  5978  0010EC  0E17               	movlw	23
  5979  0010EE  6427               	cpfsgt	gaoTx@bitnr,c
  5980  0010F0  D7C7               	goto	l112
  5981  0010F2                     l113:
  5982                           
  5983                           ;gao.c: 41: }
  5984                           ;gao.c: 42: LATB2 = 1;
  5985  0010F2  848A               	bsf	3978,2,c	;volatile
  5986                           
  5987                           ;gao.c: 43: waitTimer(590/2);
  5988  0010F4  0E01               	movlw	1
  5989  0010F6  6E12               	movwf	waitTimer@value+1,c
  5990  0010F8  0E27               	movlw	39
  5991  0010FA  6E11               	movwf	waitTimer@value,c
  5992  0010FC  EC04  F014         	call	_waitTimer	;wreg free
  5993                           
  5994                           ;gao.c: 44: LATB2 = 0;
  5995  001100  948A               	bcf	3978,2,c	;volatile
  5996                           
  5997                           ;gao.c: 45: waitTimer(7000);
  5998  001102  0E1B               	movlw	27
  5999  001104  6E12               	movwf	waitTimer@value+1,c
  6000  001106  0E58               	movlw	88
  6001  001108  6E11               	movwf	waitTimer@value,c
  6002  00110A  EC04  F014         	call	_waitTimer	;wreg free
  6003  00110E  2A1D               	incf	gaoTx@resend,f,c
  6004  001110  D000               	goto	l5090
  6005  001112                     l5090:
  6006  001112  5018               	movf	gaoTx@resends,w,c
  6007  001114  5C1D               	subwf	gaoTx@resend,w,c
  6008  001116  A0D8               	btfss	status,0,c
  6009  001118  D791               	goto	l109
  6010                           
  6011                           ;gao.c: 46: }
  6012                           ;gao.c: 47: enter_rx();
  6013  00111A  EC5C  F014         	call	_enter_rx	;wreg free
  6014  00111E  0012               	return		;funcret
  6015  001120                     __end_of_gaoTx:
  6016                           	opt stack 0
  6017                           tblptru	equ	0xFF8
  6018                           tblptrh	equ	0xFF7
  6019                           tblptrl	equ	0xFF6
  6020                           tablat	equ	0xFF5
  6021                           prodh	equ	0xFF4
  6022                           prodl	equ	0xFF3
  6023                           intcon	equ	0xFF2
  6024                           postinc0	equ	0xFEE
  6025                           wreg	equ	0xFE8
  6026                           indf1	equ	0xFE7
  6027                           postdec1	equ	0xFE5
  6028                           fsr1h	equ	0xFE2
  6029                           fsr1l	equ	0xFE1
  6030                           indf2	equ	0xFDF
  6031                           postinc2	equ	0xFDE
  6032                           fsr2h	equ	0xFDA
  6033                           fsr2l	equ	0xFD9
  6034                           status	equ	0xFD8
  6035                           
  6036 ;; *************** function _waitTimer *****************
  6037 ;; Defined at:
  6038 ;;		line 19 in file "../helpers.c"
  6039 ;; Parameters:    Size  Location     Type
  6040 ;;  value           2   16[COMRAM] unsigned int 
  6041 ;; Auto vars:     Size  Location     Type
  6042 ;;		None
  6043 ;; Return value:  Size  Location     Type
  6044 ;;		None               void
  6045 ;; Registers used:
  6046 ;;		wreg, status,2, status,0
  6047 ;; Tracked objects:
  6048 ;;		On entry : 0/0
  6049 ;;		On exit  : 0/0
  6050 ;;		Unchanged: 0/0
  6051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6052 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6056 ;;Total ram usage:        4 bytes
  6057 ;; Hardware stack levels used:    1
  6058 ;; Hardware stack levels required when called:    2
  6059 ;; This function calls:
  6060 ;;		Nothing
  6061 ;; This function is called by:
  6062 ;;		_gaoTx
  6063 ;;		_kangthaiTx
  6064 ;;		_wavemanTx
  6065 ;;		_nexaTx
  6066 ;; This function uses a non-reentrant model
  6067 ;;
  6068                           
  6069                           	psect	text24
  6070  002808                     __ptext24:
  6071                           	opt stack 0
  6072  002808                     _waitTimer:
  6073                           	opt stack 26
  6074                           
  6075                           ;helpers.c: 20: value = 0xFFFF - value;
  6076                           
  6077                           ;incstack = 0
  6078  002808  C011  F013         	movff	waitTimer@value,??_waitTimer
  6079  00280C  C012  F014         	movff	waitTimer@value+1,??_waitTimer+1
  6080  002810  1E13               	comf	??_waitTimer,f,c
  6081  002812  1E14               	comf	??_waitTimer+1,f,c
  6082  002814  4A13               	infsnz	??_waitTimer,f,c
  6083  002816  2A14               	incf	??_waitTimer+1,f,c
  6084  002818  0EFF               	movlw	255
  6085  00281A  2413               	addwf	??_waitTimer,w,c
  6086  00281C  6E11               	movwf	waitTimer@value,c
  6087  00281E  0EFF               	movlw	255
  6088  002820  2014               	addwfc	??_waitTimer+1,w,c
  6089  002822  6E12               	movwf	waitTimer@value+1,c
  6090                           
  6091                           ;helpers.c: 21: TMR1L = value & 0x00FF;
  6092  002824  C011  FFCE         	movff	waitTimer@value,4046	;volatile
  6093                           
  6094                           ;helpers.c: 22: TMR1H = (value & 0xFF00) >> 8;
  6095  002828  5012               	movf	waitTimer@value+1,w,c
  6096  00282A  6ECF               	movwf	4047,c	;volatile
  6097                           
  6098                           ;helpers.c: 23: TMR1ON = 1;
  6099  00282C  80CD               	bsf	4045,0,c	;volatile
  6100                           
  6101                           ;helpers.c: 24: while(!TMR1IF);
  6102  00282E  D000               	goto	l236
  6103  002830                     l236:
  6104  002830  A09E               	btfss	3998,0,c	;volatile
  6105  002832  D7FE               	goto	l236
  6106                           
  6107                           ;helpers.c: 25: TMR1ON = 0;
  6108  002834  90CD               	bcf	4045,0,c	;volatile
  6109                           
  6110                           ;helpers.c: 26: TMR1IF = 0;
  6111  002836  909E               	bcf	3998,0,c	;volatile
  6112  002838  0012               	return		;funcret
  6113  00283A                     __end_of_waitTimer:
  6114                           	opt stack 0
  6115                           tblptru	equ	0xFF8
  6116                           tblptrh	equ	0xFF7
  6117                           tblptrl	equ	0xFF6
  6118                           tablat	equ	0xFF5
  6119                           prodh	equ	0xFF4
  6120                           prodl	equ	0xFF3
  6121                           intcon	equ	0xFF2
  6122                           postinc0	equ	0xFEE
  6123                           wreg	equ	0xFE8
  6124                           indf1	equ	0xFE7
  6125                           postdec1	equ	0xFE5
  6126                           fsr1h	equ	0xFE2
  6127                           fsr1l	equ	0xFE1
  6128                           indf2	equ	0xFDF
  6129                           postinc2	equ	0xFDE
  6130                           fsr2h	equ	0xFDA
  6131                           fsr2l	equ	0xFD9
  6132                           status	equ	0xFD8
  6133                           
  6134 ;; *************** function _enter_tx *****************
  6135 ;; Defined at:
  6136 ;;		line 44 in file "../helpers.c"
  6137 ;; Parameters:    Size  Location     Type
  6138 ;;		None
  6139 ;; Auto vars:     Size  Location     Type
  6140 ;;		None
  6141 ;; Return value:  Size  Location     Type
  6142 ;;		None               void
  6143 ;; Registers used:
  6144 ;;		wreg, status,2, status,0, cstack
  6145 ;; Tracked objects:
  6146 ;;		On entry : 0/0
  6147 ;;		On exit  : 0/0
  6148 ;;		Unchanged: 0/0
  6149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6154 ;;Total ram usage:        0 bytes
  6155 ;; Hardware stack levels used:    1
  6156 ;; Hardware stack levels required when called:    3
  6157 ;; This function calls:
  6158 ;;		_dataPinOut
  6159 ;;		_delayms
  6160 ;; This function is called by:
  6161 ;;		_gaoTx
  6162 ;;		_parseCmd
  6163 ;;		_kangthaiTx
  6164 ;;		_wavemanTx
  6165 ;;		_nexaTx
  6166 ;; This function uses a non-reentrant model
  6167 ;;
  6168                           
  6169                           	psect	text25
  6170  002976                     __ptext25:
  6171                           	opt stack 0
  6172  002976                     _enter_tx:
  6173                           	opt stack 25
  6174                           
  6175                           ;helpers.c: 45: INTCON3bits.INT2IF = 0;
  6176                           
  6177                           ;incstack = 0
  6178  002976  92F0               	bcf	intcon3,1,c	;volatile
  6179                           
  6180                           ;helpers.c: 46: INTCON3bits.INT2IE = 0;
  6181  002978  98F0               	bcf	intcon3,4,c	;volatile
  6182                           
  6183                           ;helpers.c: 47: LATC4 = 1;
  6184  00297A  888B               	bsf	3979,4,c	;volatile
  6185                           
  6186                           ;helpers.c: 48: LATB3 = 1;
  6187  00297C  868A               	bsf	3978,3,c	;volatile
  6188                           
  6189                           ;helpers.c: 49: delayms(3);
  6190  00297E  0E00               	movlw	0
  6191  002980  6E12               	movwf	delayms@ms+1,c
  6192  002982  0E03               	movlw	3
  6193  002984  6E11               	movwf	delayms@ms,c
  6194  002986  ECEA  F013         	call	_delayms	;wreg free
  6195                           
  6196                           ;helpers.c: 50: dataPinOut();
  6197  00298A  ECDF  F014         	call	_dataPinOut	;wreg free
  6198  00298E  0012               	return		;funcret
  6199  002990                     __end_of_enter_tx:
  6200                           	opt stack 0
  6201                           tblptru	equ	0xFF8
  6202                           tblptrh	equ	0xFF7
  6203                           tblptrl	equ	0xFF6
  6204                           tablat	equ	0xFF5
  6205                           prodh	equ	0xFF4
  6206                           prodl	equ	0xFF3
  6207                           intcon	equ	0xFF2
  6208                           intcon3	equ	0xFF0
  6209                           postinc0	equ	0xFEE
  6210                           wreg	equ	0xFE8
  6211                           indf1	equ	0xFE7
  6212                           postdec1	equ	0xFE5
  6213                           fsr1h	equ	0xFE2
  6214                           fsr1l	equ	0xFE1
  6215                           indf2	equ	0xFDF
  6216                           postinc2	equ	0xFDE
  6217                           fsr2h	equ	0xFDA
  6218                           fsr2l	equ	0xFD9
  6219                           status	equ	0xFD8
  6220                           
  6221 ;; *************** function _dataPinOut *****************
  6222 ;; Defined at:
  6223 ;;		line 19 in file "../hardware_11.c"
  6224 ;; Parameters:    Size  Location     Type
  6225 ;;		None
  6226 ;; Auto vars:     Size  Location     Type
  6227 ;;		None
  6228 ;; Return value:  Size  Location     Type
  6229 ;;		None               void
  6230 ;; Registers used:
  6231 ;;		wreg, status,2
  6232 ;; Tracked objects:
  6233 ;;		On entry : 0/0
  6234 ;;		On exit  : 0/0
  6235 ;;		Unchanged: 0/0
  6236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6241 ;;Total ram usage:        0 bytes
  6242 ;; Hardware stack levels used:    1
  6243 ;; Hardware stack levels required when called:    2
  6244 ;; This function calls:
  6245 ;;		Nothing
  6246 ;; This function is called by:
  6247 ;;		_enter_tx
  6248 ;; This function uses a non-reentrant model
  6249 ;;
  6250                           
  6251                           	psect	text26
  6252  0029BE                     __ptext26:
  6253                           	opt stack 0
  6254  0029BE                     _dataPinOut:
  6255                           	opt stack 25
  6256                           
  6257                           ;hardware_11.c: 20: TRISB = 0b00000010;
  6258                           
  6259                           ;incstack = 0
  6260  0029BE  0E02               	movlw	2
  6261  0029C0  6E93               	movwf	3987,c	;volatile
  6262  0029C2  0012               	return		;funcret
  6263  0029C4                     __end_of_dataPinOut:
  6264                           	opt stack 0
  6265                           tblptru	equ	0xFF8
  6266                           tblptrh	equ	0xFF7
  6267                           tblptrl	equ	0xFF6
  6268                           tablat	equ	0xFF5
  6269                           prodh	equ	0xFF4
  6270                           prodl	equ	0xFF3
  6271                           intcon	equ	0xFF2
  6272                           intcon3	equ	0xFF0
  6273                           postinc0	equ	0xFEE
  6274                           wreg	equ	0xFE8
  6275                           indf1	equ	0xFE7
  6276                           postdec1	equ	0xFE5
  6277                           fsr1h	equ	0xFE2
  6278                           fsr1l	equ	0xFE1
  6279                           indf2	equ	0xFDF
  6280                           postinc2	equ	0xFDE
  6281                           fsr2h	equ	0xFDA
  6282                           fsr2l	equ	0xFD9
  6283                           status	equ	0xFD8
  6284                           
  6285 ;; *************** function _enter_rx *****************
  6286 ;; Defined at:
  6287 ;;		line 53 in file "../helpers.c"
  6288 ;; Parameters:    Size  Location     Type
  6289 ;;		None
  6290 ;; Auto vars:     Size  Location     Type
  6291 ;;		None
  6292 ;; Return value:  Size  Location     Type
  6293 ;;		None               void
  6294 ;; Registers used:
  6295 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6296 ;; Tracked objects:
  6297 ;;		On entry : 0/0
  6298 ;;		On exit  : 0/0
  6299 ;;		Unchanged: 0/0
  6300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6305 ;;Total ram usage:        0 bytes
  6306 ;; Hardware stack levels used:    1
  6307 ;; Hardware stack levels required when called:    4
  6308 ;; This function calls:
  6309 ;;		_dataPinIn
  6310 ;;		_delayms
  6311 ;;		_uart_puts
  6312 ;; This function is called by:
  6313 ;;		_gaoTx
  6314 ;;		_parseCmd
  6315 ;;		_kangthaiTx
  6316 ;;		_main
  6317 ;;		_wavemanTx
  6318 ;;		_nexaTx
  6319 ;; This function uses a non-reentrant model
  6320 ;;
  6321                           
  6322                           	psect	text27
  6323  0028B8                     __ptext27:
  6324                           	opt stack 0
  6325  0028B8                     _enter_rx:
  6326                           	opt stack 24
  6327                           
  6328                           ;helpers.c: 54: dataPinIn();
  6329                           
  6330                           ;incstack = 0
  6331  0028B8  ECE2  F014         	call	_dataPinIn	;wreg free
  6332                           
  6333                           ;helpers.c: 55: delayms(3);
  6334  0028BC  0E00               	movlw	0
  6335  0028BE  6E12               	movwf	delayms@ms+1,c
  6336  0028C0  0E03               	movlw	3
  6337  0028C2  6E11               	movwf	delayms@ms,c
  6338  0028C4  ECEA  F013         	call	_delayms	;wreg free
  6339                           
  6340                           ;helpers.c: 56: LATB3 = 0;
  6341  0028C8  968A               	bcf	3978,3,c	;volatile
  6342                           
  6343                           ;helpers.c: 57: LATC4 = 0;
  6344  0028CA  988B               	bcf	3979,4,c	;volatile
  6345                           
  6346                           ;helpers.c: 58: uart_puts("$OK\r\n");
  6347  0028CC  0EE9               	movlw	low STR_7
  6348  0028CE  6E14               	movwf	uart_puts@s,c
  6349  0028D0  0EFF               	movlw	high STR_7
  6350  0028D2  6E15               	movwf	uart_puts@s+1,c
  6351  0028D4  ECCC  F012         	call	_uart_puts	;wreg free
  6352                           
  6353                           ;helpers.c: 59: INTCON3bits.INT2IF = 0;
  6354  0028D8  92F0               	bcf	intcon3,1,c	;volatile
  6355                           
  6356                           ;helpers.c: 60: INTCON3bits.INT2IE = 1;
  6357  0028DA  88F0               	bsf	intcon3,4,c	;volatile
  6358  0028DC  0012               	return		;funcret
  6359  0028DE                     __end_of_enter_rx:
  6360                           	opt stack 0
  6361                           tblptru	equ	0xFF8
  6362                           tblptrh	equ	0xFF7
  6363                           tblptrl	equ	0xFF6
  6364                           tablat	equ	0xFF5
  6365                           prodh	equ	0xFF4
  6366                           prodl	equ	0xFF3
  6367                           intcon	equ	0xFF2
  6368                           intcon3	equ	0xFF0
  6369                           postinc0	equ	0xFEE
  6370                           wreg	equ	0xFE8
  6371                           indf1	equ	0xFE7
  6372                           postdec1	equ	0xFE5
  6373                           fsr1h	equ	0xFE2
  6374                           fsr1l	equ	0xFE1
  6375                           indf2	equ	0xFDF
  6376                           postinc2	equ	0xFDE
  6377                           fsr2h	equ	0xFDA
  6378                           fsr2l	equ	0xFD9
  6379                           status	equ	0xFD8
  6380                           
  6381 ;; *************** function _delayms *****************
  6382 ;; Defined at:
  6383 ;;		line 15 in file "../helpers.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;  ms              2   16[COMRAM] int 
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;  counter         2   19[COMRAM] int 
  6388 ;; Return value:  Size  Location     Type
  6389 ;;		None               void
  6390 ;; Registers used:
  6391 ;;		wreg, status,2, status,0
  6392 ;; Tracked objects:
  6393 ;;		On entry : 0/0
  6394 ;;		On exit  : 0/0
  6395 ;;		Unchanged: 0/0
  6396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6397 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6398 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6399 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6400 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6401 ;;Total ram usage:        5 bytes
  6402 ;; Hardware stack levels used:    1
  6403 ;; Hardware stack levels required when called:    2
  6404 ;; This function calls:
  6405 ;;		Nothing
  6406 ;; This function is called by:
  6407 ;;		_enter_tx
  6408 ;;		_enter_rx
  6409 ;;		_startupBlinkLed
  6410 ;;		_parseCmd
  6411 ;; This function uses a non-reentrant model
  6412 ;;
  6413                           
  6414                           	psect	text28
  6415  0027D4                     __ptext28:
  6416                           	opt stack 0
  6417  0027D4                     _delayms:
  6418                           	opt stack 27
  6419                           
  6420                           ;helpers.c: 16: for (int counter = 0; counter < ms; counter++) _delay((unsigned long)((1
      +                          )*(32000000/4000.0)));
  6421                           
  6422                           ;incstack = 0
  6423  0027D4  0E00               	movlw	0
  6424  0027D6  6E15               	movwf	delayms@counter+1,c
  6425  0027D8  0E00               	movlw	0
  6426  0027DA  6E14               	movwf	delayms@counter,c
  6427  0027DC  D00A               	goto	l230
  6428  0027DE                     l3142:
  6429  0027DE  0E0B               	movlw	11
  6430  0027E0  6E13               	movwf	??_delayms& (0+255),c
  6431  0027E2  0E62               	movlw	98
  6432  0027E4                     u7507:
  6433  0027E4  2EE8               	decfsz	wreg,f,c
  6434  0027E6  D7FE               	goto	u7507
  6435  0027E8  2E13               	decfsz	??_delayms& (0+255),f,c
  6436  0027EA  D7FC               	goto	u7507
  6437  0027EC  D000               	nop2	
  6438  0027EE  4A14               	infsnz	delayms@counter,f,c
  6439  0027F0  2A15               	incf	delayms@counter+1,f,c
  6440  0027F2                     l230:
  6441  0027F2  5011               	movf	delayms@ms,w,c
  6442  0027F4  5C14               	subwf	delayms@counter,w,c
  6443  0027F6  5015               	movf	delayms@counter+1,w,c
  6444  0027F8  0A80               	xorlw	128
  6445  0027FA  6E13               	movwf	??_delayms& (0+255),c
  6446  0027FC  5012               	movf	delayms@ms+1,w,c
  6447  0027FE  0A80               	xorlw	128
  6448  002800  5813               	subwfb	??_delayms& (0+255),w,c
  6449  002802  A0D8               	btfss	status,0,c
  6450  002804  D7EC               	goto	l3142
  6451  002806  0012               	return		;funcret
  6452  002808                     __end_of_delayms:
  6453                           	opt stack 0
  6454                           tblptru	equ	0xFF8
  6455                           tblptrh	equ	0xFF7
  6456                           tblptrl	equ	0xFF6
  6457                           tablat	equ	0xFF5
  6458                           prodh	equ	0xFF4
  6459                           prodl	equ	0xFF3
  6460                           intcon	equ	0xFF2
  6461                           intcon3	equ	0xFF0
  6462                           postinc0	equ	0xFEE
  6463                           wreg	equ	0xFE8
  6464                           indf1	equ	0xFE7
  6465                           postdec1	equ	0xFE5
  6466                           fsr1h	equ	0xFE2
  6467                           fsr1l	equ	0xFE1
  6468                           indf2	equ	0xFDF
  6469                           postinc2	equ	0xFDE
  6470                           fsr2h	equ	0xFDA
  6471                           fsr2l	equ	0xFD9
  6472                           status	equ	0xFD8
  6473                           
  6474 ;; *************** function _dataPinIn *****************
  6475 ;; Defined at:
  6476 ;;		line 23 in file "../hardware_11.c"
  6477 ;; Parameters:    Size  Location     Type
  6478 ;;		None
  6479 ;; Auto vars:     Size  Location     Type
  6480 ;;		None
  6481 ;; Return value:  Size  Location     Type
  6482 ;;		None               void
  6483 ;; Registers used:
  6484 ;;		wreg, status,2
  6485 ;; Tracked objects:
  6486 ;;		On entry : 0/0
  6487 ;;		On exit  : 0/0
  6488 ;;		Unchanged: 0/0
  6489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6494 ;;Total ram usage:        0 bytes
  6495 ;; Hardware stack levels used:    1
  6496 ;; Hardware stack levels required when called:    2
  6497 ;; This function calls:
  6498 ;;		Nothing
  6499 ;; This function is called by:
  6500 ;;		_enter_rx
  6501 ;; This function uses a non-reentrant model
  6502 ;;
  6503                           
  6504                           	psect	text29
  6505  0029C4                     __ptext29:
  6506                           	opt stack 0
  6507  0029C4                     _dataPinIn:
  6508                           	opt stack 25
  6509                           
  6510                           ;hardware_11.c: 24: TRISB = 0b00000110;
  6511                           
  6512                           ;incstack = 0
  6513  0029C4  0E06               	movlw	6
  6514  0029C6  6E93               	movwf	3987,c	;volatile
  6515  0029C8  0012               	return		;funcret
  6516  0029CA                     __end_of_dataPinIn:
  6517                           	opt stack 0
  6518                           tblptru	equ	0xFF8
  6519                           tblptrh	equ	0xFF7
  6520                           tblptrl	equ	0xFF6
  6521                           tablat	equ	0xFF5
  6522                           prodh	equ	0xFF4
  6523                           prodl	equ	0xFF3
  6524                           intcon	equ	0xFF2
  6525                           intcon3	equ	0xFF0
  6526                           postinc0	equ	0xFEE
  6527                           wreg	equ	0xFE8
  6528                           indf1	equ	0xFE7
  6529                           postdec1	equ	0xFE5
  6530                           fsr1h	equ	0xFE2
  6531                           fsr1l	equ	0xFE1
  6532                           indf2	equ	0xFDF
  6533                           postinc2	equ	0xFDE
  6534                           fsr2h	equ	0xFDA
  6535                           fsr2l	equ	0xFD9
  6536                           status	equ	0xFD8
  6537                           
  6538 ;; *************** function _asciiToHex *****************
  6539 ;; Defined at:
  6540 ;;		line 29 in file "../helpers.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;  input           1    wreg     unsigned char 
  6543 ;; Auto vars:     Size  Location     Type
  6544 ;;  input           1   16[COMRAM] unsigned char 
  6545 ;; Return value:  Size  Location     Type
  6546 ;;                  1    wreg      unsigned char 
  6547 ;; Registers used:
  6548 ;;		wreg, status,2, status,0
  6549 ;; Tracked objects:
  6550 ;;		On entry : 0/0
  6551 ;;		On exit  : 0/0
  6552 ;;		Unchanged: 0/0
  6553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6555 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6557 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6558 ;;Total ram usage:        1 bytes
  6559 ;; Hardware stack levels used:    1
  6560 ;; Hardware stack levels required when called:    2
  6561 ;; This function calls:
  6562 ;;		Nothing
  6563 ;; This function is called by:
  6564 ;;		_gaoTx
  6565 ;;		_nexaTx
  6566 ;; This function uses a non-reentrant model
  6567 ;;
  6568                           
  6569                           	psect	text30
  6570  002990                     __ptext30:
  6571                           	opt stack 0
  6572  002990                     _asciiToHex:
  6573                           	opt stack 26
  6574                           
  6575                           ;incstack = 0
  6576                           ;asciiToHex@input stored from wreg
  6577  002990  6E11               	movwf	asciiToHex@input,c
  6578                           
  6579                           ;helpers.c: 30: if(input <= '9') input -= '0';
  6580  002992  0E3A               	movlw	58
  6581  002994  6011               	cpfslt	asciiToHex@input,c
  6582  002996  D002               	goto	l3300
  6583  002998  0E30               	movlw	48
  6584  00299A  D001               	goto	L1
  6585  00299C                     l3300:
  6586                           
  6587                           ;helpers.c: 31: else input -= 55;
  6588  00299C  0E37               	movlw	55
  6589  00299E                     L1:
  6590  00299E  5E11               	subwf	asciiToHex@input,f,c
  6591  0029A0  D000               	goto	l3302
  6592  0029A2                     l3302:
  6593                           
  6594                           ;helpers.c: 32: return input;
  6595  0029A2  5011               	movf	asciiToHex@input,w,c
  6596  0029A4  0012               	return	
  6597  0029A6  0012               	return		;funcret
  6598  0029A8                     __end_of_asciiToHex:
  6599                           	opt stack 0
  6600                           tblptru	equ	0xFF8
  6601                           tblptrh	equ	0xFF7
  6602                           tblptrl	equ	0xFF6
  6603                           tablat	equ	0xFF5
  6604                           prodh	equ	0xFF4
  6605                           prodl	equ	0xFF3
  6606                           intcon	equ	0xFF2
  6607                           intcon3	equ	0xFF0
  6608                           postinc0	equ	0xFEE
  6609                           wreg	equ	0xFE8
  6610                           indf1	equ	0xFE7
  6611                           postdec1	equ	0xFE5
  6612                           fsr1h	equ	0xFE2
  6613                           fsr1l	equ	0xFE1
  6614                           indf2	equ	0xFDF
  6615                           postinc2	equ	0xFDE
  6616                           fsr2h	equ	0xFDA
  6617                           fsr2l	equ	0xFD9
  6618                           status	equ	0xFD8
  6619                           
  6620 ;; *************** function _outputRaw *****************
  6621 ;; Defined at:
  6622 ;;		line 11 in file "../raw.c"
  6623 ;; Parameters:    Size  Location     Type
  6624 ;;  rf_state        1    wreg     unsigned char 
  6625 ;;  rf_length       2   19[COMRAM] unsigned int 
  6626 ;;  rssi            1   21[COMRAM] unsigned char 
  6627 ;;  settingsp       2   22[COMRAM] PTR struct .
  6628 ;;		 -> main@settings(12), 
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;  rf_state        1   26[COMRAM] unsigned char 
  6631 ;; Return value:  Size  Location     Type
  6632 ;;		None               void
  6633 ;; Registers used:
  6634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6635 ;; Tracked objects:
  6636 ;;		On entry : 0/0
  6637 ;;		On exit  : 0/0
  6638 ;;		Unchanged: 0/0
  6639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6640 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6641 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6642 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6643 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6644 ;;Total ram usage:        8 bytes
  6645 ;; Hardware stack levels used:    1
  6646 ;; Hardware stack levels required when called:    3
  6647 ;; This function calls:
  6648 ;;		_uart_put
  6649 ;; This function is called by:
  6650 ;;		_main
  6651 ;; This function uses a non-reentrant model
  6652 ;;
  6653                           
  6654                           	psect	text31
  6655  002348                     __ptext31:
  6656                           	opt stack 0
  6657  002348                     _outputRaw:
  6658                           	opt stack 27
  6659                           
  6660                           ;incstack = 0
  6661                           ;outputRaw@rf_state stored from wreg
  6662  002348  6E1B               	movwf	outputRaw@rf_state,c
  6663                           
  6664                           ;raw.c: 12: static uint8_t last_rssi = 0;
  6665                           ;raw.c: 13: static uint8_t last_above = 0;
  6666                           ;raw.c: 15: if (rf_state) last_rssi = rssi;
  6667  00234A  501B               	movf	outputRaw@rf_state,w,c
  6668  00234C  B4D8               	btfsc	status,2,c
  6669  00234E  D003               	goto	l5732
  6670  002350  C016  F0CA         	movff	outputRaw@rssi,outputRaw@last_rssi
  6671  002354  D000               	goto	l5732
  6672  002356                     l5732:
  6673                           
  6674                           ;raw.c: 17: if (last_rssi > settingsp->noise_floor){
  6675  002356  EE20 F00B          	lfsr	2,11
  6676  00235A  5017               	movf	outputRaw@settingsp,w,c
  6677  00235C  26D9               	addwf	fsr2l,f,c
  6678  00235E  5018               	movf	outputRaw@settingsp+1,w,c
  6679  002360  22DA               	addwfc	fsr2h,f,c
  6680  002362  0100               	movlb	0	; () banked
  6681  002364  51CA               	movf	outputRaw@last_rssi& (0+255),w,b
  6682  002366  5CDE               	subwf	postinc2,w,c
  6683  002368  B0D8               	btfsc	status,0,c
  6684  00236A  D016               	goto	l5740
  6685                           
  6686                           ; BSR set to: 0
  6687                           ;raw.c: 19: last_above = 1;
  6688  00236C  0E01               	movlw	1
  6689  00236E  0100               	movlb	0	; () banked
  6690  002370  6FC9               	movwf	outputRaw@last_above& (0+255),b
  6691                           
  6692                           ; BSR set to: 0
  6693                           ;raw.c: 20: uart_put(0b10000000 | (rf_state << 4) | ((rf_length & 0x0F00)>>8));
  6694  002372  C014  F019         	movff	outputRaw@rf_length,??_outputRaw
  6695  002376  C015  F01A         	movff	outputRaw@rf_length+1,??_outputRaw+1
  6696  00237A  C01A  F019         	movff	??_outputRaw+1,??_outputRaw
  6697  00237E  6A1A               	clrf	??_outputRaw+1,c
  6698  002380  0E0F               	movlw	15
  6699  002382  1619               	andwf	??_outputRaw,f,c
  6700  002384  381B               	swapf	outputRaw@rf_state,w,c
  6701  002386  0BF0               	andlw	240
  6702  002388  1019               	iorwf	??_outputRaw,w,c
  6703  00238A  0980               	iorlw	128
  6704  00238C  ECF8  F012         	call	_uart_put
  6705                           
  6706                           ;raw.c: 21: uart_put(rf_length & 0x00FF);
  6707  002390  5014               	movf	outputRaw@rf_length,w,c
  6708  002392  ECF8  F012         	call	_uart_put
  6709                           
  6710                           ;raw.c: 22: }
  6711  002396  0012               	return	
  6712  002398                     l5740:
  6713                           
  6714                           ;raw.c: 23: else if(last_above){
  6715  002398  0100               	movlb	0	; () banked
  6716  00239A  51C9               	movf	outputRaw@last_above& (0+255),w,b
  6717  00239C  0100               	movlb	0	; () banked
  6718  00239E  B4D8               	btfsc	status,2,c
  6719  0023A0  0012               	return	
  6720                           
  6721                           ; BSR set to: 0
  6722                           ;raw.c: 24: uart_put(0b10100000);
  6723  0023A2  0EA0               	movlw	160
  6724  0023A4  ECF8  F012         	call	_uart_put
  6725                           
  6726                           ;raw.c: 25: uart_put(0b00000000);
  6727  0023A8  0E00               	movlw	0
  6728  0023AA  ECF8  F012         	call	_uart_put
  6729                           
  6730                           ;raw.c: 26: last_above = 0;
  6731  0023AE  0E00               	movlw	0
  6732  0023B0  0100               	movlb	0	; () banked
  6733  0023B2  6FC9               	movwf	outputRaw@last_above& (0+255),b
  6734                           
  6735                           ; BSR set to: 0
  6736  0023B4  0012               	return	
  6737                           
  6738                           ; BSR set to: 0
  6739  0023B6  0012               	return		;funcret
  6740  0023B8                     __end_of_outputRaw:
  6741                           	opt stack 0
  6742                           tblptru	equ	0xFF8
  6743                           tblptrh	equ	0xFF7
  6744                           tblptrl	equ	0xFF6
  6745                           tablat	equ	0xFF5
  6746                           prodh	equ	0xFF4
  6747                           prodl	equ	0xFF3
  6748                           intcon	equ	0xFF2
  6749                           intcon3	equ	0xFF0
  6750                           postinc0	equ	0xFEE
  6751                           wreg	equ	0xFE8
  6752                           indf1	equ	0xFE7
  6753                           postdec1	equ	0xFE5
  6754                           fsr1h	equ	0xFE2
  6755                           fsr1l	equ	0xFE1
  6756                           indf2	equ	0xFDF
  6757                           postinc2	equ	0xFDE
  6758                           fsr2h	equ	0xFDA
  6759                           fsr2l	equ	0xFD9
  6760                           status	equ	0xFD8
  6761                           
  6762 ;; *************** function _nexaDecode *****************
  6763 ;; Defined at:
  6764 ;;		line 80 in file "../nexa_learning.c"
  6765 ;; Parameters:    Size  Location     Type
  6766 ;;  bitstate        1    wreg     unsigned char 
  6767 ;;  length          1   24[COMRAM] unsigned char 
  6768 ;; Auto vars:     Size  Location     Type
  6769 ;;  bitstate        1   47[COMRAM] unsigned char 
  6770 ;;  id              4   40[COMRAM] unsigned long 
  6771 ;;  j               2   45[COMRAM] int 
  6772 ;;  group_en        1   39[COMRAM] unsigned char 
  6773 ;;  power           1   38[COMRAM] unsigned char 
  6774 ;;  channel         1   37[COMRAM] unsigned char 
  6775 ;;  dimlevel        1   44[COMRAM] unsigned char 
  6776 ;; Return value:  Size  Location     Type
  6777 ;;		None               void
  6778 ;; Registers used:
  6779 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6785 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6786 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6787 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6788 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6789 ;;Total ram usage:       24 bytes
  6790 ;; Hardware stack levels used:    1
  6791 ;; Hardware stack levels required when called:    4
  6792 ;; This function calls:
  6793 ;;		___awdiv
  6794 ;;		_blinkRxLed
  6795 ;;		_uart_put
  6796 ;;		_uart_put_hex
  6797 ;;		_uart_puts
  6798 ;; This function is called by:
  6799 ;;		_main
  6800 ;; This function uses a non-reentrant model
  6801 ;;
  6802                           
  6803                           	psect	text32
  6804  0009CA                     __ptext32:
  6805                           	opt stack 0
  6806  0009CA                     _nexaDecode:
  6807                           	opt stack 26
  6808                           
  6809                           ;incstack = 0
  6810                           ;nexaDecode@bitstate stored from wreg
  6811  0009CA  6E30               	movwf	nexaDecode@bitstate,c
  6812                           
  6813                           ;nexa_learning.c: 82: static enum nexa_learning_state state = INVALID;
  6814                           ;nexa_learning.c: 83: static uint32_t data[2];
  6815                           ;nexa_learning.c: 84: static uint8_t bit_nr = 0;
  6816                           ;nexa_learning.c: 85: static uint8_t dim_found = 0;
  6817                           ;nexa_learning.c: 88: switch(state){
  6818  0009CC  D0F2               	goto	l5854
  6819                           
  6820                           ;nexa_learning.c: 89: case FINISHED:
  6821  0009CE  D000               	goto	l5748
  6822  0009D0                     l5748:
  6823                           
  6824                           ;nexa_learning.c: 90: case INVALID:
  6825                           ;nexa_learning.c: 91: bit_nr = 0;
  6826  0009D0  0E00               	movlw	0
  6827  0009D2  6E4D               	movwf	nexaDecode@bit_nr,c
  6828                           
  6829                           ;nexa_learning.c: 92: dim_found = 0;
  6830  0009D4  0E00               	movlw	0
  6831  0009D6  0100               	movlb	0	; () banked
  6832  0009D8  6FC8               	movwf	nexaDecode@dim_found& (0+255),b
  6833  0009DA  D000               	goto	l5750
  6834  0009DC                     l5750:
  6835                           
  6836                           ;nexa_learning.c: 95: if (bitstate && (length>8 && length<15)) state = _S;
  6837  0009DC  5030               	movf	nexaDecode@bitstate,w,c
  6838  0009DE  B4D8               	btfsc	status,2,c
  6839  0009E0  D0E5               	goto	l5850
  6840  0009E2  0E08               	movlw	8
  6841  0009E4  6419               	cpfsgt	nexaDecode@length,c
  6842  0009E6  D0E2               	goto	l5850
  6843  0009E8  0E0F               	movlw	15
  6844  0009EA  6019               	cpfslt	nexaDecode@length,c
  6845  0009EC  D0DF               	goto	l5850
  6846  0009EE  0E02               	movlw	2
  6847  0009F0  D025               	goto	L7
  6848  0009F2  D0DC               	goto	l5850
  6849                           
  6850                           ;nexa_learning.c: 97: break;
  6851                           
  6852                           ;nexa_learning.c: 96: else state = INVALID;
  6853  0009F4  D0F8               	goto	l5856
  6854  0009F6                     l5760:
  6855                           
  6856                           ;nexa_learning.c: 100: if (!bitstate){
  6857  0009F6  5030               	movf	nexaDecode@bitstate,w,c
  6858  0009F8  A4D8               	btfss	status,2,c
  6859  0009FA  D0D8               	goto	l5850
  6860                           
  6861                           ;nexa_learning.c: 101: if ((length>15 && length<25)) state = _SS;
  6862  0009FC  0E0F               	movlw	15
  6863  0009FE  6419               	cpfsgt	nexaDecode@length,c
  6864  000A00  D005               	goto	l5768
  6865  000A02  0E19               	movlw	25
  6866  000A04  6019               	cpfslt	nexaDecode@length,c
  6867  000A06  D002               	goto	l5768
  6868  000A08  0E03               	movlw	3
  6869  000A0A  D018               	goto	L7
  6870  000A0C                     l5768:
  6871                           
  6872                           ;nexa_learning.c: 102: else if ((length>60 && length<100)) state = _SL;
  6873  000A0C  0E3C               	movlw	60
  6874  000A0E  6419               	cpfsgt	nexaDecode@length,c
  6875  000A10  D005               	goto	l5774
  6876  000A12  0E64               	movlw	100
  6877  000A14  6019               	cpfslt	nexaDecode@length,c
  6878  000A16  D002               	goto	l5774
  6879  000A18  0E05               	movlw	5
  6880  000A1A  D010               	goto	L7
  6881  000A1C                     l5774:
  6882                           
  6883                           ;nexa_learning.c: 103: else if ((length>100 && length<250)){
  6884  000A1C  0E64               	movlw	100
  6885  000A1E  6419               	cpfsgt	nexaDecode@length,c
  6886  000A20  D007               	goto	l5780
  6887  000A22  0EFA               	movlw	250
  6888  000A24  6019               	cpfslt	nexaDecode@length,c
  6889  000A26  D004               	goto	l5780
  6890                           
  6891                           ;nexa_learning.c: 104: bit_nr = 0;
  6892  000A28  0E00               	movlw	0
  6893  000A2A  6E4D               	movwf	nexaDecode@bit_nr,c
  6894  000A2C                     L8:
  6895                           
  6896                           ;nexa_learning.c: 105: state = NONE;
  6897  000A2C  0E00               	movlw	0
  6898  000A2E  D006               	goto	L7
  6899  000A30                     l5780:
  6900                           
  6901                           ;nexa_learning.c: 107: else if ((length==0xff)) state = FINISHED;
  6902  000A30  2819               	incf	nexaDecode@length,w,c
  6903  000A32  A4D8               	btfss	status,2,c
  6904  000A34  D0BB               	goto	l5850
  6905  000A36  0E07               	movlw	7
  6906  000A38  D001               	goto	L7
  6907  000A3A  D0B8               	goto	l5850
  6908  000A3C                     L7:
  6909  000A3C  6E4E               	movwf	nexaDecode@state,c
  6910                           
  6911                           ;nexa_learning.c: 109: }
  6912  000A3E  D0D3               	goto	l5856
  6913  000A40  D0B5               	goto	l5850
  6914                           
  6915                           ;nexa_learning.c: 111: break;
  6916                           
  6917                           ;nexa_learning.c: 110: else state = INVALID;
  6918  000A42  D0D1               	goto	l5856
  6919  000A44                     l5788:
  6920                           
  6921                           ;nexa_learning.c: 114: if (bitstate && (length>8 && length<15)) state = _SSS;
  6922  000A44  5030               	movf	nexaDecode@bitstate,w,c
  6923  000A46  B4D8               	btfsc	status,2,c
  6924  000A48  D0B1               	goto	l5850
  6925  000A4A  0E08               	movlw	8
  6926  000A4C  6419               	cpfsgt	nexaDecode@length,c
  6927  000A4E  D0AE               	goto	l5850
  6928  000A50  0E0F               	movlw	15
  6929  000A52  6019               	cpfslt	nexaDecode@length,c
  6930  000A54  D0AB               	goto	l5850
  6931  000A56  0E04               	movlw	4
  6932  000A58  D7F1               	goto	L7
  6933  000A5A  D0A8               	goto	l5850
  6934                           
  6935                           ;nexa_learning.c: 116: break;
  6936                           
  6937                           ;nexa_learning.c: 115: else state = INVALID;
  6938  000A5C  D0C4               	goto	l5856
  6939  000A5E                     l5798:
  6940                           
  6941                           ;nexa_learning.c: 119: if (bitstate && (length>8 && length<15)) state = _SLS;
  6942  000A5E  5030               	movf	nexaDecode@bitstate,w,c
  6943  000A60  B4D8               	btfsc	status,2,c
  6944  000A62  D0A4               	goto	l5850
  6945  000A64  0E08               	movlw	8
  6946  000A66  6419               	cpfsgt	nexaDecode@length,c
  6947  000A68  D0A1               	goto	l5850
  6948  000A6A  0E0F               	movlw	15
  6949  000A6C  6019               	cpfslt	nexaDecode@length,c
  6950  000A6E  D09E               	goto	l5850
  6951  000A70  0E06               	movlw	6
  6952  000A72  D7E4               	goto	L7
  6953  000A74  D09B               	goto	l5850
  6954                           
  6955                           ;nexa_learning.c: 121: break;
  6956                           
  6957                           ;nexa_learning.c: 120: else state = INVALID;
  6958  000A76  D0B7               	goto	l5856
  6959  000A78                     l5808:
  6960                           
  6961                           ;nexa_learning.c: 124: if (!bitstate && (length>15 && length<25) && (bit_nr==27)){
  6962  000A78  5030               	movf	nexaDecode@bitstate,w,c
  6963  000A7A  A4D8               	btfss	status,2,c
  6964  000A7C  D019               	goto	l5824
  6965  000A7E  0E0F               	movlw	15
  6966  000A80  6419               	cpfsgt	nexaDecode@length,c
  6967  000A82  D016               	goto	l5824
  6968  000A84  0E19               	movlw	25
  6969  000A86  6019               	cpfslt	nexaDecode@length,c
  6970  000A88  D013               	goto	l5824
  6971  000A8A  0E1B               	movlw	27
  6972  000A8C  184D               	xorwf	nexaDecode@bit_nr,w,c
  6973  000A8E  A4D8               	btfss	status,2,c
  6974  000A90  D00F               	goto	l5824
  6975                           
  6976                           ;nexa_learning.c: 125: dim_found = 1;
  6977  000A92  0E01               	movlw	1
  6978  000A94  0100               	movlb	0	; () banked
  6979  000A96  6FC8               	movwf	nexaDecode@dim_found& (0+255),b
  6980                           
  6981                           ; BSR set to: 0
  6982                           ;nexa_learning.c: 126: data[bit_nr/32] <<= 1;
  6983  000A98  C04D  F011         	movff	nexaDecode@bit_nr,___awdiv@dividend
  6984  000A9C  6A12               	clrf	___awdiv@dividend+1,c
  6985  000A9E  0E00               	movlw	0
  6986  000AA0  6E14               	movwf	___awdiv@divisor+1,c
  6987  000AA2  0E20               	movlw	32
  6988  000AA4  6E13               	movwf	___awdiv@divisor,c
  6989  000AA6  EC91  F010         	call	___awdiv	;wreg free
  6990  000AAA  D014               	goto	L9
  6991  000AAC                     l5820:
  6992                           
  6993                           ;nexa_learning.c: 127: bit_nr++;
  6994  000AAC  2A4D               	incf	nexaDecode@bit_nr,f,c
  6995  000AAE  D7BE               	goto	L8
  6996  000AB0                     l5824:
  6997                           
  6998                           ;nexa_learning.c: 130: else if (!bitstate && (length>60 && length<100)){
  6999  000AB0  5030               	movf	nexaDecode@bitstate,w,c
  7000  000AB2  A4D8               	btfss	status,2,c
  7001  000AB4  D07B               	goto	l5850
  7002  000AB6  0E3C               	movlw	60
  7003  000AB8  6419               	cpfsgt	nexaDecode@length,c
  7004  000ABA  D078               	goto	l5850
  7005  000ABC  0E64               	movlw	100
  7006  000ABE  6019               	cpfslt	nexaDecode@length,c
  7007  000AC0  D075               	goto	l5850
  7008                           
  7009                           ;nexa_learning.c: 131: data[bit_nr/32] <<= 1;
  7010  000AC2  C04D  F011         	movff	nexaDecode@bit_nr,___awdiv@dividend
  7011  000AC6  6A12               	clrf	___awdiv@dividend+1,c
  7012  000AC8  0E00               	movlw	0
  7013  000ACA  6E14               	movwf	___awdiv@divisor+1,c
  7014  000ACC  0E20               	movlw	32
  7015  000ACE  6E13               	movwf	___awdiv@divisor,c
  7016  000AD0  EC91  F010         	call	___awdiv	;wreg free
  7017  000AD4                     L9:
  7018  000AD4  90D8               	bcf	status,0,c
  7019  000AD6  3611               	rlcf	?___awdiv,f,c
  7020  000AD8  3612               	rlcf	?___awdiv+1,f,c
  7021  000ADA  90D8               	bcf	status,0,c
  7022  000ADC  3611               	rlcf	?___awdiv,f,c
  7023  000ADE  3612               	rlcf	?___awdiv+1,f,c
  7024  000AE0  0EB2               	movlw	low nexaDecode@data
  7025  000AE2  2411               	addwf	?___awdiv,w,c
  7026  000AE4  6ED9               	movwf	fsr2l,c
  7027  000AE6  0E00               	movlw	high nexaDecode@data
  7028  000AE8  2012               	addwfc	?___awdiv+1,w,c
  7029  000AEA  6EDA               	movwf	fsr2h,c
  7030  000AEC  90D8               	bcf	status,0,c
  7031  000AEE  36DE               	rlcf	postinc2,f,c
  7032  000AF0  36DE               	rlcf	postinc2,f,c
  7033  000AF2  36DE               	rlcf	postinc2,f,c
  7034  000AF4  36DE               	rlcf	postinc2,f,c
  7035  000AF6  D7DA               	goto	l5820
  7036                           
  7037                           ;nexa_learning.c: 132: bit_nr++;
  7038  000AF8  D799               	goto	L8
  7039                           
  7040                           ;nexa_learning.c: 134: }
  7041                           
  7042                           ;nexa_learning.c: 133: state = NONE;
  7043  000AFA  D058               	goto	l5850
  7044                           
  7045                           ;nexa_learning.c: 136: break;
  7046                           
  7047                           ;nexa_learning.c: 135: else state = INVALID;
  7048  000AFC  D074               	goto	l5856
  7049  000AFE                     l5838:
  7050                           
  7051                           ;nexa_learning.c: 139: if (!bitstate && (length>15 && length<25)){
  7052  000AFE  5030               	movf	nexaDecode@bitstate,w,c
  7053  000B00  A4D8               	btfss	status,2,c
  7054  000B02  D054               	goto	l5850
  7055  000B04  0E0F               	movlw	15
  7056  000B06  6419               	cpfsgt	nexaDecode@length,c
  7057  000B08  D051               	goto	l5850
  7058  000B0A  0E19               	movlw	25
  7059  000B0C  6019               	cpfslt	nexaDecode@length,c
  7060  000B0E  D04E               	goto	l5850
  7061                           
  7062                           ;nexa_learning.c: 140: data[bit_nr/32] = (data[bit_nr/32] << 1) | 1;
  7063  000B10  C04D  F011         	movff	nexaDecode@bit_nr,___awdiv@dividend
  7064  000B14  6A12               	clrf	___awdiv@dividend+1,c
  7065  000B16  0E00               	movlw	0
  7066  000B18  6E14               	movwf	___awdiv@divisor+1,c
  7067  000B1A  0E20               	movlw	32
  7068  000B1C  6E13               	movwf	___awdiv@divisor,c
  7069  000B1E  EC91  F010         	call	___awdiv	;wreg free
  7070  000B22  90D8               	bcf	status,0,c
  7071  000B24  3611               	rlcf	?___awdiv,f,c
  7072  000B26  3612               	rlcf	?___awdiv+1,f,c
  7073  000B28  90D8               	bcf	status,0,c
  7074  000B2A  3611               	rlcf	?___awdiv,f,c
  7075  000B2C  3612               	rlcf	?___awdiv+1,f,c
  7076  000B2E  0EB2               	movlw	low nexaDecode@data
  7077  000B30  2411               	addwf	?___awdiv,w,c
  7078  000B32  6ED9               	movwf	fsr2l,c
  7079  000B34  0E00               	movlw	high nexaDecode@data
  7080  000B36  2012               	addwfc	?___awdiv+1,w,c
  7081  000B38  6EDA               	movwf	fsr2h,c
  7082  000B3A  CFDE F01A          	movff	postinc2,??_nexaDecode
  7083  000B3E  CFDE F01B          	movff	postinc2,??_nexaDecode+1
  7084  000B42  CFDE F01C          	movff	postinc2,??_nexaDecode+2
  7085  000B46  CFDE F01D          	movff	postinc2,??_nexaDecode+3
  7086  000B4A  90D8               	bcf	status,0,c
  7087  000B4C  341A               	rlcf	??_nexaDecode,w,c
  7088  000B4E  6E1E               	movwf	(??_nexaDecode+4)& (0+255),c
  7089  000B50  341B               	rlcf	??_nexaDecode+1,w,c
  7090  000B52  6E1F               	movwf	(??_nexaDecode+5)& (0+255),c
  7091  000B54  341C               	rlcf	??_nexaDecode+2,w,c
  7092  000B56  6E20               	movwf	(??_nexaDecode+6)& (0+255),c
  7093  000B58  341D               	rlcf	??_nexaDecode+3,w,c
  7094  000B5A  6E21               	movwf	(??_nexaDecode+7)& (0+255),c
  7095  000B5C  0E01               	movlw	1
  7096  000B5E  101E               	iorwf	??_nexaDecode+4,w,c
  7097  000B60  6E22               	movwf	(??_nexaDecode+8)& (0+255),c
  7098  000B62  501F               	movf	??_nexaDecode+5,w,c
  7099  000B64  6E23               	movwf	(??_nexaDecode+9)& (0+255),c
  7100  000B66  5020               	movf	??_nexaDecode+6,w,c
  7101  000B68  6E24               	movwf	(??_nexaDecode+10)& (0+255),c
  7102  000B6A  5021               	movf	??_nexaDecode+7,w,c
  7103  000B6C  6E25               	movwf	(??_nexaDecode+11)& (0+255),c
  7104  000B6E  C04D  F011         	movff	nexaDecode@bit_nr,___awdiv@dividend
  7105  000B72  6A12               	clrf	___awdiv@dividend+1,c
  7106  000B74  0E00               	movlw	0
  7107  000B76  6E14               	movwf	___awdiv@divisor+1,c
  7108  000B78  0E20               	movlw	32
  7109  000B7A  6E13               	movwf	___awdiv@divisor,c
  7110  000B7C  EC91  F010         	call	___awdiv	;wreg free
  7111  000B80  90D8               	bcf	status,0,c
  7112  000B82  3611               	rlcf	?___awdiv,f,c
  7113  000B84  3612               	rlcf	?___awdiv+1,f,c
  7114  000B86  90D8               	bcf	status,0,c
  7115  000B88  3611               	rlcf	?___awdiv,f,c
  7116  000B8A  3612               	rlcf	?___awdiv+1,f,c
  7117  000B8C  0EB2               	movlw	low nexaDecode@data
  7118  000B8E  2411               	addwf	?___awdiv,w,c
  7119  000B90  6ED9               	movwf	fsr2l,c
  7120  000B92  0E00               	movlw	high nexaDecode@data
  7121  000B94  2012               	addwfc	?___awdiv+1,w,c
  7122  000B96  6EDA               	movwf	fsr2h,c
  7123  000B98  C022  FFDE         	movff	??_nexaDecode+8,postinc2
  7124  000B9C  C023  FFDE         	movff	??_nexaDecode+9,postinc2
  7125  000BA0  C024  FFDE         	movff	??_nexaDecode+10,postinc2
  7126  000BA4  C025  FFDE         	movff	??_nexaDecode+11,postinc2
  7127  000BA8  D781               	goto	l5820
  7128                           
  7129                           ;nexa_learning.c: 141: bit_nr++;
  7130  000BAA  D740               	goto	L8
  7131  000BAC                     l5850:
  7132                           
  7133                           ;nexa_learning.c: 144: else state = INVALID;
  7134  000BAC  0E01               	movlw	1
  7135  000BAE  D746               	goto	L7
  7136                           
  7137                           ;nexa_learning.c: 146: }
  7138                           
  7139                           ;nexa_learning.c: 145: break;
  7140  000BB0  D01A               	goto	l5856
  7141  000BB2                     l5854:
  7142  000BB2  504E               	movf	nexaDecode@state,w,c
  7143                           
  7144                           ; Switch size 1, requested type "space"
  7145                           ; Number of cases is 8, Range of values is 0 to 7
  7146                           ; switch strategies available:
  7147                           ; Name         Instructions Cycles
  7148                           ; simple_byte           25    13 (average)
  7149                           ;	Chosen strategy is simple_byte
  7150  000BB4  0A00               	xorlw	0	; case 0
  7151  000BB6  B4D8               	btfsc	status,2,c
  7152  000BB8  D711               	goto	l5750
  7153  000BBA  0A01               	xorlw	1	; case 1
  7154  000BBC  B4D8               	btfsc	status,2,c
  7155  000BBE  D708               	goto	l5748
  7156  000BC0  0A03               	xorlw	3	; case 2
  7157  000BC2  B4D8               	btfsc	status,2,c
  7158  000BC4  D718               	goto	l5760
  7159  000BC6  0A01               	xorlw	1	; case 3
  7160  000BC8  B4D8               	btfsc	status,2,c
  7161  000BCA  D73C               	goto	l5788
  7162  000BCC  0A07               	xorlw	7	; case 4
  7163  000BCE  B4D8               	btfsc	status,2,c
  7164  000BD0  D753               	goto	l5808
  7165  000BD2  0A01               	xorlw	1	; case 5
  7166  000BD4  B4D8               	btfsc	status,2,c
  7167  000BD6  D743               	goto	l5798
  7168  000BD8  0A03               	xorlw	3	; case 6
  7169  000BDA  B4D8               	btfsc	status,2,c
  7170  000BDC  D790               	goto	l5838
  7171  000BDE  0A01               	xorlw	1	; case 7
  7172  000BE0  B4D8               	btfsc	status,2,c
  7173  000BE2  D6F6               	goto	l5748
  7174  000BE4  D000               	goto	l5856
  7175  000BE6                     l5856:
  7176                           
  7177                           ;nexa_learning.c: 150: if (state == FINISHED){
  7178  000BE6  0E07               	movlw	7
  7179  000BE8  184E               	xorwf	nexaDecode@state,w,c
  7180  000BEA  A4D8               	btfss	status,2,c
  7181  000BEC  0012               	return	
  7182                           
  7183                           ;nexa_learning.c: 151: uint8_t dimlevel = 0xff;
  7184  000BEE  682D               	setf	nexaDecode@dimlevel,c
  7185                           
  7186                           ;nexa_learning.c: 152: switch (bit_nr){
  7187  000BF0  D089               	goto	l5896
  7188  000BF2                     l5860:
  7189                           
  7190                           ;nexa_learning.c: 154: dimlevel = data[1] & 0xF;
  7191  000BF2  0100               	movlb	0	; () banked
  7192  000BF4  51B6               	movf	(nexaDecode@data+4)& (0+255),w,b
  7193  000BF6  0B0F               	andlw	15
  7194  000BF8  6E2D               	movwf	nexaDecode@dimlevel,c
  7195  000BFA                     l768:
  7196                           
  7197                           ;nexa_learning.c: 156: {
  7198                           ;nexa_learning.c: 157: uint8_t channel = data[0] & 0xF;
  7199  000BFA  0100               	movlb	0	; () banked
  7200  000BFC  51B2               	movf	nexaDecode@data& (0+255),w,b
  7201  000BFE  0B0F               	andlw	15
  7202  000C00  6E26               	movwf	nexaDecode@channel,c
  7203                           
  7204                           ;nexa_learning.c: 158: data[0] >>= 4;
  7205  000C02  0E04               	movlw	4
  7206  000C04  6E1A               	movwf	??_nexaDecode& (0+255),c
  7207  000C06                     u7065:
  7208  000C06  90D8               	bcf	status,0,c
  7209  000C08  0100               	movlb	0	; () banked
  7210  000C0A  33B5               	rrcf	(nexaDecode@data+3)& (0+255),f,b
  7211  000C0C  33B4               	rrcf	(nexaDecode@data+2)& (0+255),f,b
  7212  000C0E  33B3               	rrcf	(nexaDecode@data+1)& (0+255),f,b
  7213  000C10  33B2               	rrcf	nexaDecode@data& (0+255),f,b
  7214  000C12  2E1A               	decfsz	??_nexaDecode& (0+255),f,c
  7215  000C14  D7F8               	goto	u7065
  7216                           
  7217                           ;nexa_learning.c: 159: uint8_t power = data[0] & 1;
  7218  000C16  0100               	movlb	0	; () banked
  7219  000C18  51B2               	movf	nexaDecode@data& (0+255),w,b
  7220  000C1A  0B01               	andlw	1
  7221  000C1C  6E27               	movwf	nexaDecode@power,c
  7222                           
  7223                           ; BSR set to: 0
  7224                           ;nexa_learning.c: 160: data[0] >>= 1;
  7225  000C1E  0100               	movlb	0	; () banked
  7226  000C20  90D8               	bcf	status,0,c
  7227  000C22  33B5               	rrcf	(nexaDecode@data+3)& (0+255),f,b
  7228  000C24  33B4               	rrcf	(nexaDecode@data+2)& (0+255),f,b
  7229  000C26  33B3               	rrcf	(nexaDecode@data+1)& (0+255),f,b
  7230  000C28  33B2               	rrcf	nexaDecode@data& (0+255),f,b
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;nexa_learning.c: 161: uint8_t group_en = data[0] & 1;
  7234  000C2A  0100               	movlb	0	; () banked
  7235  000C2C  51B2               	movf	nexaDecode@data& (0+255),w,b
  7236  000C2E  0B01               	andlw	1
  7237  000C30  6E28               	movwf	nexaDecode@group_en,c
  7238                           
  7239                           ;nexa_learning.c: 162: data[0] >>= 1;
  7240  000C32  0100               	movlb	0	; () banked
  7241  000C34  90D8               	bcf	status,0,c
  7242  000C36  33B5               	rrcf	(nexaDecode@data+3)& (0+255),f,b
  7243  000C38  33B4               	rrcf	(nexaDecode@data+2)& (0+255),f,b
  7244  000C3A  33B3               	rrcf	(nexaDecode@data+1)& (0+255),f,b
  7245  000C3C  33B2               	rrcf	nexaDecode@data& (0+255),f,b
  7246                           
  7247                           ; BSR set to: 0
  7248                           ;nexa_learning.c: 163: uint32_t id = data[0] & 0x3ffffff;
  7249  000C3E  0EFF               	movlw	255
  7250  000C40  0100               	movlb	0	; () banked
  7251  000C42  15B2               	andwf	nexaDecode@data& (0+255),w,b
  7252  000C44  6E29               	movwf	nexaDecode@id,c
  7253  000C46  0EFF               	movlw	255
  7254  000C48  0100               	movlb	0	; () banked
  7255  000C4A  15B3               	andwf	(nexaDecode@data+1)& (0+255),w,b
  7256  000C4C  6E2A               	movwf	nexaDecode@id+1,c
  7257  000C4E  0EFF               	movlw	255
  7258  000C50  0100               	movlb	0	; () banked
  7259  000C52  15B4               	andwf	(nexaDecode@data+2)& (0+255),w,b
  7260  000C54  6E2B               	movwf	nexaDecode@id+2,c
  7261  000C56  0E03               	movlw	3
  7262  000C58  0100               	movlb	0	; () banked
  7263  000C5A  15B5               	andwf	(nexaDecode@data+3)& (0+255),w,b
  7264  000C5C  6E2C               	movwf	nexaDecode@id+3,c
  7265                           
  7266                           ; BSR set to: 0
  7267                           ;nexa_learning.c: 165: int j;
  7268                           ;nexa_learning.c: 166: uart_puts("$N");
  7269  000C5E  0EEF               	movlw	low STR_65
  7270  000C60  6E14               	movwf	uart_puts@s,c
  7271  000C62  0EFF               	movlw	high STR_65
  7272  000C64  6E15               	movwf	uart_puts@s+1,c
  7273  000C66  ECCC  F012         	call	_uart_puts	;wreg free
  7274                           
  7275                           ;nexa_learning.c: 167: for (j=22; j>=2; j-=4) uart_put_hex((id>>j) & 0xf);
  7276  000C6A  0E00               	movlw	0
  7277  000C6C  6E2F               	movwf	nexaDecode@j+1,c
  7278  000C6E  0E16               	movlw	22
  7279  000C70  6E2E               	movwf	nexaDecode@j,c
  7280  000C72                     l5872:
  7281  000C72  BE2F               	btfsc	nexaDecode@j+1,7,c
  7282  000C74  D024               	goto	l5882
  7283  000C76  502F               	movf	nexaDecode@j+1,w,c
  7284  000C78  E106               	bnz	l5876
  7285  000C7A  0E02               	movlw	2
  7286  000C7C  5C2E               	subwf	nexaDecode@j,w,c
  7287  000C7E  A0D8               	btfss	status,0,c
  7288  000C80  D01E               	goto	l5882
  7289  000C82  D001               	goto	l5876
  7290  000C84  D01C               	goto	l5882
  7291  000C86                     l5876:
  7292  000C86  502E               	movf	nexaDecode@j,w,c
  7293  000C88  C029  F01A         	movff	nexaDecode@id,??_nexaDecode
  7294  000C8C  C02A  F01B         	movff	nexaDecode@id+1,??_nexaDecode+1
  7295  000C90  C02B  F01C         	movff	nexaDecode@id+2,??_nexaDecode+2
  7296  000C94  C02C  F01D         	movff	nexaDecode@id+3,??_nexaDecode+3
  7297  000C98  2AE8               	incf	wreg,f,c
  7298  000C9A  D005               	goto	u7080
  7299  000C9C                     u7085:
  7300  000C9C  90D8               	bcf	status,0,c
  7301  000C9E  321D               	rrcf	??_nexaDecode+3,f,c
  7302  000CA0  321C               	rrcf	??_nexaDecode+2,f,c
  7303  000CA2  321B               	rrcf	??_nexaDecode+1,f,c
  7304  000CA4  321A               	rrcf	??_nexaDecode,f,c
  7305  000CA6                     u7080:
  7306  000CA6  2EE8               	decfsz	wreg,f,c
  7307  000CA8  D7F9               	goto	u7085
  7308  000CAA  501A               	movf	??_nexaDecode,w,c
  7309  000CAC  0B0F               	andlw	15
  7310  000CAE  EC92  F014         	call	_uart_put_hex
  7311  000CB2  0EFC               	movlw	252
  7312  000CB4  262E               	addwf	nexaDecode@j,f,c
  7313  000CB6  0EFF               	movlw	255
  7314  000CB8  222F               	addwfc	nexaDecode@j+1,f,c
  7315  000CBA  D7DB               	goto	l5872
  7316  000CBC  D7E4               	goto	l5876
  7317  000CBE                     l5882:
  7318                           
  7319                           ;nexa_learning.c: 168: uart_put_hex(id&0x3);
  7320  000CBE  5029               	movf	nexaDecode@id,w,c
  7321  000CC0  0B03               	andlw	3
  7322  000CC2  EC92  F014         	call	_uart_put_hex
  7323                           
  7324                           ;nexa_learning.c: 169: uart_put('0' + group_en);
  7325  000CC6  5028               	movf	nexaDecode@group_en,w,c
  7326  000CC8  0F30               	addlw	48
  7327  000CCA  ECF8  F012         	call	_uart_put
  7328                           
  7329                           ;nexa_learning.c: 170: uart_put_hex(channel);
  7330  000CCE  5026               	movf	nexaDecode@channel,w,c
  7331  000CD0  EC92  F014         	call	_uart_put_hex
  7332                           
  7333                           ;nexa_learning.c: 171: uart_put('0' + power + (dim_found*2));
  7334  000CD4  0100               	movlb	0	; () banked
  7335  000CD6  51C8               	movf	nexaDecode@dim_found& (0+255),w,b
  7336  000CD8  0D02               	mullw	2
  7337  000CDA  50F3               	movf	prodl,w,c
  7338  000CDC  2427               	addwf	nexaDecode@power,w,c
  7339  000CDE  0F30               	addlw	48
  7340  000CE0  ECF8  F012         	call	_uart_put
  7341                           
  7342                           ;nexa_learning.c: 172: if (dimlevel != 0xff) uart_put_hex(dimlevel);
  7343  000CE4  282D               	incf	nexaDecode@dimlevel,w,c
  7344  000CE6  B4D8               	btfsc	status,2,c
  7345  000CE8  D004               	goto	l5890
  7346  000CEA  502D               	movf	nexaDecode@dimlevel,w,c
  7347  000CEC  EC92  F014         	call	_uart_put_hex
  7348  000CF0  D000               	goto	l5890
  7349  000CF2                     l5890:
  7350                           
  7351                           ;nexa_learning.c: 173: uart_puts("\r\n");
  7352  000CF2  0E7F               	movlw	low (STR_9+29)
  7353  000CF4  6E14               	movwf	uart_puts@s,c
  7354  000CF6  0EFE               	movlw	high (STR_9+29)
  7355  000CF8  6E15               	movwf	uart_puts@s+1,c
  7356  000CFA  ECCC  F012         	call	_uart_puts	;wreg free
  7357                           
  7358                           ;nexa_learning.c: 174: blinkRxLed();
  7359  000CFE  ECD4  F014         	call	_blinkRxLed	;wreg free
  7360                           
  7361                           ;nexa_learning.c: 177: }
  7362                           
  7363                           ;nexa_learning.c: 175: }
  7364                           ;nexa_learning.c: 176: break;
  7365  000D02  0012               	return	
  7366  000D04                     l5896:
  7367  000D04  504D               	movf	nexaDecode@bit_nr,w,c
  7368                           
  7369                           ; Switch size 1, requested type "space"
  7370                           ; Number of cases is 2, Range of values is 32 to 36
  7371                           ; switch strategies available:
  7372                           ; Name         Instructions Cycles
  7373                           ; simple_byte            7     4 (average)
  7374                           ;	Chosen strategy is simple_byte
  7375  000D06  0A20               	xorlw	32	; case 32
  7376  000D08  B4D8               	btfsc	status,2,c
  7377  000D0A  D777               	goto	l768
  7378  000D0C  0A04               	xorlw	4	; case 36
  7379  000D0E  B4D8               	btfsc	status,2,c
  7380  000D10  D770               	goto	l5860
  7381  000D12  0012               	return	
  7382  000D14  0012               	return		;funcret
  7383  000D16                     __end_of_nexaDecode:
  7384                           	opt stack 0
  7385                           tblptru	equ	0xFF8
  7386                           tblptrh	equ	0xFF7
  7387                           tblptrl	equ	0xFF6
  7388                           tablat	equ	0xFF5
  7389                           prodh	equ	0xFF4
  7390                           prodl	equ	0xFF3
  7391                           intcon	equ	0xFF2
  7392                           intcon3	equ	0xFF0
  7393                           postinc0	equ	0xFEE
  7394                           wreg	equ	0xFE8
  7395                           indf1	equ	0xFE7
  7396                           postdec1	equ	0xFE5
  7397                           fsr1h	equ	0xFE2
  7398                           fsr1l	equ	0xFE1
  7399                           indf2	equ	0xFDF
  7400                           postinc2	equ	0xFDE
  7401                           fsr2h	equ	0xFDA
  7402                           fsr2l	equ	0xFD9
  7403                           status	equ	0xFD8
  7404                           
  7405 ;; *************** function _nexaCodeDecode *****************
  7406 ;; Defined at:
  7407 ;;		line 16 in file "../nexa_code.c"
  7408 ;; Parameters:    Size  Location     Type
  7409 ;;  bitstate        1    wreg     unsigned char 
  7410 ;;  length          1   21[COMRAM] unsigned char 
  7411 ;; Auto vars:     Size  Location     Type
  7412 ;;  bitstate        1   26[COMRAM] unsigned char 
  7413 ;;  unit            1   25[COMRAM] unsigned char 
  7414 ;; Return value:  Size  Location     Type
  7415 ;;		None               void
  7416 ;; Registers used:
  7417 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7418 ;; Tracked objects:
  7419 ;;		On entry : 0/0
  7420 ;;		On exit  : 0/0
  7421 ;;		Unchanged: 0/0
  7422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7423 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7424 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7425 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7426 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7427 ;;Total ram usage:        6 bytes
  7428 ;; Hardware stack levels used:    1
  7429 ;; Hardware stack levels required when called:    4
  7430 ;; This function calls:
  7431 ;;		_blinkRxLed
  7432 ;;		_uart_put
  7433 ;;		_uart_put_hex
  7434 ;;		_uart_puts
  7435 ;; This function is called by:
  7436 ;;		_main
  7437 ;; This function uses a non-reentrant model
  7438 ;;
  7439                           
  7440                           	psect	text33
  7441  001602                     __ptext33:
  7442                           	opt stack 0
  7443  001602                     _nexaCodeDecode:
  7444                           	opt stack 26
  7445                           
  7446                           ;incstack = 0
  7447                           ;nexaCodeDecode@bitstate stored from wreg
  7448  001602  6E1B               	movwf	nexaCodeDecode@bitstate,c
  7449                           
  7450                           ;nexa_code.c: 17: static enum nexa_code_state state = NONE;
  7451                           ;nexa_code.c: 18: static uint16_t data;
  7452                           ;nexa_code.c: 19: static uint8_t symbol_nr = 0;
  7453                           ;nexa_code.c: 21: if (length > 100) {
  7454  001604  0E64               	movlw	100
  7455  001606  6416               	cpfsgt	nexaCodeDecode@length,c
  7456  001608  D06A               	goto	l5972
  7457                           
  7458                           ;nexa_code.c: 22: state = NONE;
  7459  00160A  0E00               	movlw	0
  7460  00160C  6E4C               	movwf	nexaCodeDecode@state,c
  7461                           
  7462                           ;nexa_code.c: 23: symbol_nr = 0;
  7463  00160E  0E00               	movlw	0
  7464  001610  0100               	movlb	0	; () banked
  7465  001612  6FC7               	movwf	nexaCodeDecode@symbol_nr& (0+255),b
  7466                           
  7467                           ; BSR set to: 0
  7468                           ;nexa_code.c: 24: return;
  7469  001614  0012               	return	
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;nexa_code.c: 25: }
  7473                           ;nexa_code.c: 27: switch(state){
  7474  001616  D063               	goto	l5972
  7475  001618                     l5904:
  7476                           
  7477                           ;nexa_code.c: 29: symbol_nr = 0;
  7478  001618  0E00               	movlw	0
  7479  00161A  0100               	movlb	0	; () banked
  7480  00161C  6FC7               	movwf	nexaCodeDecode@symbol_nr& (0+255),b
  7481  00161E                     l662:
  7482                           
  7483                           ;nexa_code.c: 31: if (bitstate && (length>(22-10) && length<(22+10))) state = _S;
  7484  00161E  501B               	movf	nexaCodeDecode@bitstate,w,c
  7485  001620  B4D8               	btfsc	status,2,c
  7486  001622  D05A               	goto	l5968
  7487  001624  0E0C               	movlw	12
  7488  001626  6416               	cpfsgt	nexaCodeDecode@length,c
  7489  001628  D057               	goto	l5968
  7490  00162A  0E20               	movlw	32
  7491  00162C  6016               	cpfslt	nexaCodeDecode@length,c
  7492  00162E  D054               	goto	l5968
  7493  001630  0E02               	movlw	2
  7494  001632  D026               	goto	L15
  7495  001634  D051               	goto	l5968
  7496                           
  7497                           ;nexa_code.c: 33: break;
  7498                           
  7499                           ;nexa_code.c: 32: else state = INVALID;
  7500  001636  D067               	goto	l5974
  7501  001638                     l5914:
  7502                           
  7503                           ;nexa_code.c: 36: if (!bitstate && (length>(66-10) && length<(66+10))) state = SL;
  7504  001638  501B               	movf	nexaCodeDecode@bitstate,w,c
  7505  00163A  A4D8               	btfss	status,2,c
  7506  00163C  D04D               	goto	l5968
  7507  00163E  0E38               	movlw	56
  7508  001640  6416               	cpfsgt	nexaCodeDecode@length,c
  7509  001642  D04A               	goto	l5968
  7510  001644  0E4C               	movlw	76
  7511  001646  6016               	cpfslt	nexaCodeDecode@length,c
  7512  001648  D047               	goto	l5968
  7513  00164A  0E03               	movlw	3
  7514  00164C  D019               	goto	L15
  7515  00164E  D044               	goto	l5968
  7516                           
  7517                           ;nexa_code.c: 38: break;
  7518                           
  7519                           ;nexa_code.c: 37: else state = INVALID;
  7520  001650  D05A               	goto	l5974
  7521  001652                     l5924:
  7522                           
  7523                           ;nexa_code.c: 41: if (bitstate && (length>(66-10) && length<(66+10))) state = SLL;
  7524  001652  501B               	movf	nexaCodeDecode@bitstate,w,c
  7525  001654  B4D8               	btfsc	status,2,c
  7526  001656  D008               	goto	l5932
  7527  001658  0E38               	movlw	56
  7528  00165A  6416               	cpfsgt	nexaCodeDecode@length,c
  7529  00165C  D005               	goto	l5932
  7530  00165E  0E4C               	movlw	76
  7531  001660  6016               	cpfslt	nexaCodeDecode@length,c
  7532  001662  D002               	goto	l5932
  7533  001664  0E04               	movlw	4
  7534  001666  D00C               	goto	L15
  7535  001668                     l5932:
  7536                           
  7537                           ;nexa_code.c: 42: else if (bitstate && (length>(22-10) && length<(22+10))) state = SLS;
  7538  001668  501B               	movf	nexaCodeDecode@bitstate,w,c
  7539  00166A  B4D8               	btfsc	status,2,c
  7540  00166C  D035               	goto	l5968
  7541  00166E  0E0C               	movlw	12
  7542  001670  6416               	cpfsgt	nexaCodeDecode@length,c
  7543  001672  D032               	goto	l5968
  7544  001674  0E20               	movlw	32
  7545  001676  6016               	cpfslt	nexaCodeDecode@length,c
  7546  001678  D02F               	goto	l5968
  7547  00167A  0E05               	movlw	5
  7548  00167C  D001               	goto	L15
  7549  00167E  D02C               	goto	l5968
  7550  001680                     L15:
  7551  001680  6E4C               	movwf	nexaCodeDecode@state,c
  7552                           
  7553                           ;nexa_code.c: 44: break;
  7554  001682  D041               	goto	l5974
  7555  001684                     l5942:
  7556                           
  7557                           ;nexa_code.c: 47: if (!bitstate && (length>(66-10) && length<(66+10))) {
  7558  001684  501B               	movf	nexaCodeDecode@bitstate,w,c
  7559  001686  A4D8               	btfss	status,2,c
  7560  001688  D027               	goto	l5968
  7561  00168A  0E38               	movlw	56
  7562  00168C  6416               	cpfsgt	nexaCodeDecode@length,c
  7563  00168E  D024               	goto	l5968
  7564  001690  0E4C               	movlw	76
  7565  001692  6016               	cpfslt	nexaCodeDecode@length,c
  7566  001694  D021               	goto	l5968
  7567                           
  7568                           ;nexa_code.c: 48: state = NONE;
  7569  001696  0E00               	movlw	0
  7570  001698  6E4C               	movwf	nexaCodeDecode@state,c
  7571                           
  7572                           ;nexa_code.c: 49: data >>= 1;
  7573  00169A  90D8               	bcf	status,0,c
  7574  00169C  3240               	rrcf	nexaCodeDecode@data+1,f,c
  7575  00169E  323F               	rrcf	nexaCodeDecode@data,f,c
  7576  0016A0  D018               	goto	l5966
  7577                           
  7578                           ; BSR set to: 0
  7579                           
  7580                           ;nexa_code.c: 51: }
  7581                           
  7582                           ;nexa_code.c: 50: symbol_nr++;
  7583  0016A2  D01A               	goto	l5968
  7584                           
  7585                           ;nexa_code.c: 53: break;
  7586                           
  7587                           ;nexa_code.c: 52: else state = INVALID;
  7588  0016A4  D030               	goto	l5974
  7589  0016A6                     l5956:
  7590                           
  7591                           ;nexa_code.c: 56: if (!bitstate && (length>(22-10) && length<(22+10))) {
  7592  0016A6  501B               	movf	nexaCodeDecode@bitstate,w,c
  7593  0016A8  A4D8               	btfss	status,2,c
  7594  0016AA  D016               	goto	l5968
  7595  0016AC  0E0C               	movlw	12
  7596  0016AE  6416               	cpfsgt	nexaCodeDecode@length,c
  7597  0016B0  D013               	goto	l5968
  7598  0016B2  0E20               	movlw	32
  7599  0016B4  6016               	cpfslt	nexaCodeDecode@length,c
  7600  0016B6  D010               	goto	l5968
  7601                           
  7602                           ;nexa_code.c: 57: state = NONE;
  7603  0016B8  0E00               	movlw	0
  7604  0016BA  6E4C               	movwf	nexaCodeDecode@state,c
  7605                           
  7606                           ;nexa_code.c: 58: data = (data >> 1) | 0x800;
  7607  0016BC  90D8               	bcf	status,0,c
  7608  0016BE  3040               	rrcf	nexaCodeDecode@data+1,w,c
  7609  0016C0  6E18               	movwf	(??_nexaCodeDecode+1)& (0+255),c
  7610  0016C2  303F               	rrcf	nexaCodeDecode@data,w,c
  7611  0016C4  6E17               	movwf	??_nexaCodeDecode& (0+255),c
  7612  0016C6  0E00               	movlw	0
  7613  0016C8  1017               	iorwf	??_nexaCodeDecode,w,c
  7614  0016CA  6E3F               	movwf	nexaCodeDecode@data,c
  7615  0016CC  0E08               	movlw	8
  7616  0016CE  1018               	iorwf	??_nexaCodeDecode+1,w,c
  7617  0016D0  6E40               	movwf	nexaCodeDecode@data+1,c
  7618  0016D2                     l5966:
  7619                           
  7620                           ;nexa_code.c: 59: symbol_nr++;
  7621  0016D2  0100               	movlb	0	; () banked
  7622  0016D4  2BC7               	incf	nexaCodeDecode@symbol_nr& (0+255),f,b
  7623                           
  7624                           ;nexa_code.c: 60: }
  7625  0016D6  D017               	goto	l5974
  7626  0016D8                     l5968:
  7627                           
  7628                           ;nexa_code.c: 61: else state = INVALID;
  7629  0016D8  0E01               	movlw	1
  7630  0016DA  D7D2               	goto	L15
  7631                           
  7632                           ;nexa_code.c: 63: }
  7633                           
  7634                           ;nexa_code.c: 62: break;
  7635  0016DC  D014               	goto	l5974
  7636  0016DE                     l5972:
  7637  0016DE  504C               	movf	nexaCodeDecode@state,w,c
  7638                           
  7639                           ; Switch size 1, requested type "space"
  7640                           ; Number of cases is 6, Range of values is 0 to 5
  7641                           ; switch strategies available:
  7642                           ; Name         Instructions Cycles
  7643                           ; simple_byte           19    10 (average)
  7644                           ;	Chosen strategy is simple_byte
  7645  0016E0  0A00               	xorlw	0	; case 0
  7646  0016E2  B4D8               	btfsc	status,2,c
  7647  0016E4  D79C               	goto	l662
  7648  0016E6  0A01               	xorlw	1	; case 1
  7649  0016E8  B4D8               	btfsc	status,2,c
  7650  0016EA  D796               	goto	l5904
  7651  0016EC  0A03               	xorlw	3	; case 2
  7652  0016EE  B4D8               	btfsc	status,2,c
  7653  0016F0  D7A3               	goto	l5914
  7654  0016F2  0A01               	xorlw	1	; case 3
  7655  0016F4  B4D8               	btfsc	status,2,c
  7656  0016F6  D7AD               	goto	l5924
  7657  0016F8  0A07               	xorlw	7	; case 4
  7658  0016FA  B4D8               	btfsc	status,2,c
  7659  0016FC  D7D4               	goto	l5956
  7660  0016FE  0A01               	xorlw	1	; case 5
  7661  001700  B4D8               	btfsc	status,2,c
  7662  001702  D7C0               	goto	l5942
  7663  001704  D000               	goto	l5974
  7664  001706                     l5974:
  7665                           
  7666                           ;nexa_code.c: 65: if ((symbol_nr==12) && (state==NONE)){
  7667  001706  0E0C               	movlw	12
  7668  001708  0100               	movlb	0	; () banked
  7669  00170A  19C7               	xorwf	nexaCodeDecode@symbol_nr& (0+255),w,b
  7670  00170C  A4D8               	btfss	status,2,c
  7671  00170E  0012               	return	
  7672                           
  7673                           ; BSR set to: 0
  7674  001710  504C               	movf	nexaCodeDecode@state,w,c
  7675  001712  A4D8               	btfss	status,2,c
  7676  001714  0012               	return	
  7677                           
  7678                           ; BSR set to: 0
  7679                           ;nexa_code.c: 66: uart_puts("$C");
  7680  001716  0EF2               	movlw	low STR_63
  7681  001718  6E14               	movwf	uart_puts@s,c
  7682  00171A  0EFF               	movlw	high STR_63
  7683  00171C  6E15               	movwf	uart_puts@s+1,c
  7684  00171E  ECCC  F012         	call	_uart_puts	;wreg free
  7685                           
  7686                           ;nexa_code.c: 67: uart_put('A' + (data&0xf));
  7687  001722  503F               	movf	nexaCodeDecode@data,w,c
  7688  001724  0B0F               	andlw	15
  7689  001726  0F41               	addlw	65
  7690  001728  ECF8  F012         	call	_uart_put
  7691                           
  7692                           ;nexa_code.c: 68: uint8_t unit = ((data&0xf0) >> 4) + 1;
  7693  00172C  C03F  F017         	movff	nexaCodeDecode@data,??_nexaCodeDecode
  7694  001730  C040  F018         	movff	nexaCodeDecode@data+1,??_nexaCodeDecode+1
  7695  001734  0E04               	movlw	4
  7696  001736  6E19               	movwf	(??_nexaCodeDecode+2)& (0+255),c
  7697  001738                     u7325:
  7698  001738  90D8               	bcf	status,0,c
  7699  00173A  3218               	rrcf	??_nexaCodeDecode+1,f,c
  7700  00173C  3217               	rrcf	??_nexaCodeDecode,f,c
  7701  00173E  2E19               	decfsz	(??_nexaCodeDecode+2)& (0+255),f,c
  7702  001740  D7FB               	goto	u7325
  7703  001742  0E0F               	movlw	15
  7704  001744  1617               	andwf	??_nexaCodeDecode,f,c
  7705  001746  2817               	incf	??_nexaCodeDecode,w,c
  7706  001748  6E1A               	movwf	nexaCodeDecode@unit,c
  7707                           
  7708                           ;nexa_code.c: 69: if (unit==16) unit = 0;
  7709  00174A  0E10               	movlw	16
  7710  00174C  181A               	xorwf	nexaCodeDecode@unit,w,c
  7711  00174E  A4D8               	btfss	status,2,c
  7712  001750  D003               	goto	l5988
  7713  001752  0E00               	movlw	0
  7714  001754  6E1A               	movwf	nexaCodeDecode@unit,c
  7715  001756  D000               	goto	l5988
  7716  001758                     l5988:
  7717                           
  7718                           ;nexa_code.c: 70: uart_put_hex(unit);
  7719  001758  501A               	movf	nexaCodeDecode@unit,w,c
  7720  00175A  EC92  F014         	call	_uart_put_hex
  7721                           
  7722                           ;nexa_code.c: 71: if (data&0x800) uart_put('1');
  7723  00175E  A640               	btfss	nexaCodeDecode@data+1,3,c
  7724  001760  D004               	goto	l5994
  7725  001762  0E31               	movlw	49
  7726  001764  ECF8  F012         	call	_uart_put
  7727  001768  D004               	goto	l5996
  7728  00176A                     l5994:
  7729                           
  7730                           ;nexa_code.c: 72: else uart_put('0');
  7731  00176A  0E30               	movlw	48
  7732  00176C  ECF8  F012         	call	_uart_put
  7733  001770  D000               	goto	l5996
  7734  001772                     l5996:
  7735                           
  7736                           ;nexa_code.c: 73: uart_puts("\r\n");
  7737  001772  0E7F               	movlw	low (STR_9+29)
  7738  001774  6E14               	movwf	uart_puts@s,c
  7739  001776  0EFE               	movlw	high (STR_9+29)
  7740  001778  6E15               	movwf	uart_puts@s+1,c
  7741  00177A  ECCC  F012         	call	_uart_puts	;wreg free
  7742                           
  7743                           ;nexa_code.c: 74: blinkRxLed();
  7744  00177E  ECD4  F014         	call	_blinkRxLed	;wreg free
  7745  001782  0012               	return	
  7746  001784  0012               	return		;funcret
  7747  001786                     __end_of_nexaCodeDecode:
  7748                           	opt stack 0
  7749                           tblptru	equ	0xFF8
  7750                           tblptrh	equ	0xFF7
  7751                           tblptrl	equ	0xFF6
  7752                           tablat	equ	0xFF5
  7753                           prodh	equ	0xFF4
  7754                           prodl	equ	0xFF3
  7755                           intcon	equ	0xFF2
  7756                           intcon3	equ	0xFF0
  7757                           postinc0	equ	0xFEE
  7758                           wreg	equ	0xFE8
  7759                           indf1	equ	0xFE7
  7760                           postdec1	equ	0xFE5
  7761                           fsr1h	equ	0xFE2
  7762                           fsr1l	equ	0xFE1
  7763                           indf2	equ	0xFDF
  7764                           postinc2	equ	0xFDE
  7765                           fsr2h	equ	0xFDA
  7766                           fsr2l	equ	0xFD9
  7767                           status	equ	0xFD8
  7768                           
  7769 ;; *************** function _hardware_init *****************
  7770 ;; Defined at:
  7771 ;;		line 3 in file "../hardware_11.c"
  7772 ;; Parameters:    Size  Location     Type
  7773 ;;		None
  7774 ;; Auto vars:     Size  Location     Type
  7775 ;;		None
  7776 ;; Return value:  Size  Location     Type
  7777 ;;		None               void
  7778 ;; Registers used:
  7779 ;;		wreg, status,2
  7780 ;; Tracked objects:
  7781 ;;		On entry : 0/0
  7782 ;;		On exit  : 0/0
  7783 ;;		Unchanged: 0/0
  7784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7789 ;;Total ram usage:        0 bytes
  7790 ;; Hardware stack levels used:    1
  7791 ;; Hardware stack levels required when called:    2
  7792 ;; This function calls:
  7793 ;;		Nothing
  7794 ;; This function is called by:
  7795 ;;		_main
  7796 ;; This function uses a non-reentrant model
  7797 ;;
  7798                           
  7799                           	psect	text34
  7800  002902                     __ptext34:
  7801                           	opt stack 0
  7802  002902                     _hardware_init:
  7803                           	opt stack 28
  7804                           
  7805                           ;hardware_11.c: 5: TRISC = 0b10000000;
  7806                           
  7807                           ;incstack = 0
  7808  002902  0E80               	movlw	128
  7809  002904  6E94               	movwf	3988,c	;volatile
  7810                           
  7811                           ;hardware_11.c: 6: TRISB = 0b00000110;
  7812  002906  0E06               	movlw	6
  7813  002908  6E93               	movwf	3987,c	;volatile
  7814                           
  7815                           ;hardware_11.c: 7: TRISA = 0b00000000;
  7816  00290A  0E00               	movlw	0
  7817  00290C  6E92               	movwf	3986,c	;volatile
  7818                           
  7819                           ;hardware_11.c: 10: OSCCON = 0b01100000;
  7820  00290E  0E60               	movlw	96
  7821  002910  6ED3               	movwf	4051,c	;volatile
  7822                           
  7823                           ;hardware_11.c: 11: OSCTUNE = 0b11000000;
  7824  002912  0EC0               	movlw	192
  7825  002914  6E9B               	movwf	3995,c	;volatile
  7826                           
  7827                           ;hardware_11.c: 14: T3CON = 0b00110101;
  7828  002916  0E35               	movlw	53
  7829  002918  6EB1               	movwf	4017,c	;volatile
  7830                           
  7831                           ;hardware_11.c: 15: T1CON = 0b01111001;
  7832  00291A  0E79               	movlw	121
  7833  00291C  6ECD               	movwf	4045,c	;volatile
  7834                           
  7835                           ;hardware_11.c: 16: WDTCON = 0;
  7836  00291E  0E00               	movlw	0
  7837  002920  6ED1               	movwf	4049,c	;volatile
  7838  002922  0012               	return		;funcret
  7839  002924                     __end_of_hardware_init:
  7840                           	opt stack 0
  7841                           tblptru	equ	0xFF8
  7842                           tblptrh	equ	0xFF7
  7843                           tblptrl	equ	0xFF6
  7844                           tablat	equ	0xFF5
  7845                           prodh	equ	0xFF4
  7846                           prodl	equ	0xFF3
  7847                           intcon	equ	0xFF2
  7848                           intcon3	equ	0xFF0
  7849                           postinc0	equ	0xFEE
  7850                           wreg	equ	0xFE8
  7851                           indf1	equ	0xFE7
  7852                           postdec1	equ	0xFE5
  7853                           fsr1h	equ	0xFE2
  7854                           fsr1l	equ	0xFE1
  7855                           indf2	equ	0xFDF
  7856                           postinc2	equ	0xFDE
  7857                           fsr2h	equ	0xFDA
  7858                           fsr2l	equ	0xFD9
  7859                           status	equ	0xFD8
  7860                           
  7861 ;; *************** function _gaoDecode *****************
  7862 ;; Defined at:
  7863 ;;		line 66 in file "../gao.c"
  7864 ;; Parameters:    Size  Location     Type
  7865 ;;  rf_state        1    wreg     unsigned char 
  7866 ;;  rf_pulse_len    1   34[COMRAM] unsigned char 
  7867 ;; Auto vars:     Size  Location     Type
  7868 ;;  rf_state        1   37[COMRAM] unsigned char 
  7869 ;; Return value:  Size  Location     Type
  7870 ;;		None               void
  7871 ;; Registers used:
  7872 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7873 ;; Tracked objects:
  7874 ;;		On entry : 0/0
  7875 ;;		On exit  : 0/0
  7876 ;;		Unchanged: 0/0
  7877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7878 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7879 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7880 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7881 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7882 ;;Total ram usage:        4 bytes
  7883 ;; Hardware stack levels used:    1
  7884 ;; Hardware stack levels required when called:    5
  7885 ;; This function calls:
  7886 ;;		_gaoPrint
  7887 ;; This function is called by:
  7888 ;;		_main
  7889 ;; This function uses a non-reentrant model
  7890 ;;
  7891                           
  7892                           	psect	text35
  7893  0018F6                     __ptext35:
  7894                           	opt stack 0
  7895  0018F6                     _gaoDecode:
  7896                           	opt stack 25
  7897                           
  7898                           ;incstack = 0
  7899                           ;gaoDecode@rf_state stored from wreg
  7900  0018F6  6E26               	movwf	gaoDecode@rf_state,c
  7901                           
  7902                           ;gao.c: 74: static char symbols = 0;
  7903                           ;gao.c: 75: static char nrsymbols = 0;
  7904                           ;gao.c: 76: static char gaobit;
  7905                           ;gao.c: 77: static unsigned long data = 0;
  7906                           ;gao.c: 78: static char nrbits = 0;
  7907                           ;gao.c: 79: static char preamble_data = 0;
  7908                           ;gao.c: 80: static char state = 0;
  7909                           ;gao.c: 83: gaobit = 4;
  7910  0018F8  0E04               	movlw	4
  7911  0018FA  6E49               	movwf	gaoDecode@gaobit,c
  7912                           
  7913                           ;gao.c: 84: if (rf_state){
  7914  0018FC  5026               	movf	gaoDecode@rf_state,w,c
  7915  0018FE  B4D8               	btfsc	status,2,c
  7916  001900  D017               	goto	l5622
  7917                           
  7918                           ;gao.c: 85: if ((rf_pulse_length > 20)&&(rf_pulse_length < 55)){
  7919  001902  0E14               	movlw	20
  7920  001904  6423               	cpfsgt	gaoDecode@rf_pulse_length,c
  7921  001906  D00F               	goto	l5620
  7922  001908  0E37               	movlw	55
  7923  00190A  6023               	cpfslt	gaoDecode@rf_pulse_length,c
  7924  00190C  D00C               	goto	l5620
  7925                           
  7926                           ;gao.c: 86: symbols &= (0xFF ^ (1 << nrsymbols));
  7927  00190E  C04A  F024         	movff	gaoDecode@nrsymbols,??_gaoDecode
  7928  001912  0E01               	movlw	1
  7929  001914  6E25               	movwf	(??_gaoDecode+1)& (0+255),c
  7930  001916  2A24               	incf	??_gaoDecode,f,c
  7931  001918  D002               	goto	u6534
  7932  00191A                     u6535:
  7933  00191A  90D8               	bcf	status,0,c
  7934  00191C  3625               	rlcf	??_gaoDecode+1,f,c
  7935  00191E                     u6534:
  7936  00191E  2E24               	decfsz	??_gaoDecode,f,c
  7937  001920  D7FC               	goto	u6535
  7938  001922  D016               	goto	L16
  7939  001924  D02B               	goto	l5636
  7940  001926                     l5620:
  7941                           
  7942                           ;gao.c: 89: else{
  7943                           ;gao.c: 90: nrsymbols = 0;
  7944  001926  0E00               	movlw	0
  7945  001928  6E4A               	movwf	gaoDecode@nrsymbols,c
  7946                           
  7947                           ;gao.c: 91: gaobit = 2;
  7948  00192A  0E02               	movlw	2
  7949  00192C  6E49               	movwf	gaoDecode@gaobit,c
  7950                           
  7951                           ;gao.c: 92: }
  7952                           ;gao.c: 93: }
  7953  00192E  D02A               	goto	l5640
  7954  001930                     l5622:
  7955                           
  7956                           ;gao.c: 94: else{
  7957                           ;gao.c: 95: if((rf_pulse_length > 20)&&(rf_pulse_length < 55)){
  7958  001930  0E14               	movlw	20
  7959  001932  6423               	cpfsgt	gaoDecode@rf_pulse_length,c
  7960  001934  D011               	goto	l5630
  7961  001936  0E37               	movlw	55
  7962  001938  6023               	cpfslt	gaoDecode@rf_pulse_length,c
  7963  00193A  D00E               	goto	l5630
  7964                           
  7965                           ;gao.c: 96: symbols &= (0xFF ^ (1 << nrsymbols));
  7966  00193C  C04A  F024         	movff	gaoDecode@nrsymbols,??_gaoDecode
  7967  001940  0E01               	movlw	1
  7968  001942  6E25               	movwf	(??_gaoDecode+1)& (0+255),c
  7969  001944  2A24               	incf	??_gaoDecode,f,c
  7970  001946  D002               	goto	u6564
  7971  001948                     u6565:
  7972  001948  90D8               	bcf	status,0,c
  7973  00194A  3625               	rlcf	??_gaoDecode+1,f,c
  7974  00194C                     u6564:
  7975  00194C  2E24               	decfsz	??_gaoDecode,f,c
  7976  00194E  D7FC               	goto	u6565
  7977  001950                     L16:
  7978  001950  5025               	movf	??_gaoDecode+1,w,c
  7979  001952  0AFF               	xorlw	255
  7980  001954  164B               	andwf	gaoDecode@symbols,f,c
  7981  001956  D012               	goto	l5636
  7982  001958                     l5630:
  7983                           
  7984                           ;gao.c: 99: else if((rf_pulse_length > 55)&&(rf_pulse_length < 90)){
  7985  001958  0E37               	movlw	55
  7986  00195A  6423               	cpfsgt	gaoDecode@rf_pulse_length,c
  7987  00195C  D7E4               	goto	l5620
  7988  00195E  0E5A               	movlw	90
  7989  001960  6023               	cpfslt	gaoDecode@rf_pulse_length,c
  7990  001962  D7E1               	goto	l5620
  7991                           
  7992                           ;gao.c: 100: symbols |= (1 << nrsymbols);
  7993  001964  C04A  F024         	movff	gaoDecode@nrsymbols,??_gaoDecode
  7994  001968  0E01               	movlw	1
  7995  00196A  6E25               	movwf	(??_gaoDecode+1)& (0+255),c
  7996  00196C  2A24               	incf	??_gaoDecode,f,c
  7997  00196E  D002               	goto	u6594
  7998  001970                     u6595:
  7999  001970  90D8               	bcf	status,0,c
  8000  001972  3625               	rlcf	??_gaoDecode+1,f,c
  8001  001974                     u6594:
  8002  001974  2E24               	decfsz	??_gaoDecode,f,c
  8003  001976  D7FC               	goto	u6595
  8004  001978  5025               	movf	??_gaoDecode+1,w,c
  8005  00197A  124B               	iorwf	gaoDecode@symbols,f,c
  8006  00197C                     l5636:
  8007                           
  8008                           ;gao.c: 101: nrsymbols++;
  8009  00197C  2A4A               	incf	gaoDecode@nrsymbols,f,c
  8010                           
  8011                           ;gao.c: 102: }
  8012  00197E  D002               	goto	l5640
  8013  001980  D7D2               	goto	l5620
  8014                           
  8015                           ;gao.c: 105: gaobit = 2;
  8016                           
  8017                           ;gao.c: 103: else{
  8018                           ;gao.c: 104: nrsymbols = 0;
  8019  001982  D000               	goto	l5640
  8020  001984                     l5640:
  8021                           
  8022                           ;gao.c: 106: }
  8023                           ;gao.c: 107: }
  8024                           ;gao.c: 109: if (nrsymbols >= 4){
  8025  001984  0E03               	movlw	3
  8026  001986  644A               	cpfsgt	gaoDecode@nrsymbols,c
  8027  001988  D017               	goto	l5656
  8028                           
  8029                           ;gao.c: 110: if (symbols == 0) gaobit = 5;
  8030  00198A  504B               	movf	gaoDecode@symbols,w,c
  8031  00198C  A4D8               	btfss	status,2,c
  8032  00198E  D002               	goto	l5646
  8033  001990  0E05               	movlw	5
  8034  001992  D00D               	goto	L19
  8035  001994                     l5646:
  8036                           
  8037                           ;gao.c: 111: else if (symbols == 0b1000) gaobit = 0;
  8038  001994  0E08               	movlw	8
  8039  001996  184B               	xorwf	gaoDecode@symbols,w,c
  8040  001998  A4D8               	btfss	status,2,c
  8041  00199A  D002               	goto	l5650
  8042  00199C  0E00               	movlw	0
  8043  00199E  D007               	goto	L19
  8044  0019A0                     l5650:
  8045                           
  8046                           ;gao.c: 112: else if (symbols == 0b0010) gaobit = 1;
  8047  0019A0  0E02               	movlw	2
  8048  0019A2  184B               	xorwf	gaoDecode@symbols,w,c
  8049  0019A4  A4D8               	btfss	status,2,c
  8050  0019A6  D002               	goto	l5654
  8051  0019A8  0E01               	movlw	1
  8052  0019AA  D001               	goto	L19
  8053  0019AC                     l5654:
  8054                           
  8055                           ;gao.c: 113: else gaobit = 2;
  8056  0019AC  0E02               	movlw	2
  8057  0019AE                     L19:
  8058  0019AE  6E49               	movwf	gaoDecode@gaobit,c
  8059  0019B0  D000               	goto	l155
  8060  0019B2                     l155:
  8061                           
  8062                           ;gao.c: 114: nrsymbols = 0;
  8063  0019B2  0E00               	movlw	0
  8064  0019B4  6E4A               	movwf	gaoDecode@nrsymbols,c
  8065  0019B6  D000               	goto	l5656
  8066  0019B8                     l5656:
  8067                           
  8068                           ;gao.c: 115: }
  8069                           ;gao.c: 118: if(gaobit == 4) return;
  8070  0019B8  0E04               	movlw	4
  8071  0019BA  1849               	xorwf	gaoDecode@gaobit,w,c
  8072  0019BC  B4D8               	btfsc	status,2,c
  8073  0019BE  0012               	return	
  8074  0019C0  D046               	goto	l5692
  8075  0019C2  0012               	return	
  8076                           
  8077                           ;gao.c: 119: switch (state){
  8078  0019C4  D044               	goto	l5692
  8079  0019C6                     l5660:
  8080                           
  8081                           ;gao.c: 121: if ((gaobit == 5)&&(preamble_data == 5)) state = 1;
  8082  0019C6  0E05               	movlw	5
  8083  0019C8  1849               	xorwf	gaoDecode@gaobit,w,c
  8084  0019CA  A4D8               	btfss	status,2,c
  8085  0019CC  D009               	goto	l5666
  8086  0019CE  0E05               	movlw	5
  8087  0019D0  0100               	movlb	0	; () banked
  8088  0019D2  19C5               	xorwf	gaoDecode@preamble_data& (0+255),w,b
  8089  0019D4  A4D8               	btfss	status,2,c
  8090  0019D6  D004               	goto	l5666
  8091                           
  8092                           ; BSR set to: 0
  8093  0019D8  0E01               	movlw	1
  8094  0019DA  0100               	movlb	0	; () banked
  8095  0019DC  6FC6               	movwf	gaoDecode@state& (0+255),b
  8096  0019DE  D000               	goto	l5666
  8097  0019E0                     l5666:
  8098                           
  8099                           ;gao.c: 122: preamble_data = gaobit;
  8100  0019E0  C049  F0C5         	movff	gaoDecode@gaobit,gaoDecode@preamble_data
  8101                           
  8102                           ;gao.c: 123: break;
  8103  0019E4  0012               	return	
  8104  0019E6                     l5668:
  8105                           
  8106                           ;gao.c: 125: if ((gaobit == 2)||(gaobit == 5)){
  8107  0019E6  0E02               	movlw	2
  8108  0019E8  1849               	xorwf	gaoDecode@gaobit,w,c
  8109  0019EA  B4D8               	btfsc	status,2,c
  8110  0019EC  D004               	goto	l5672
  8111  0019EE  0E05               	movlw	5
  8112  0019F0  1849               	xorwf	gaoDecode@gaobit,w,c
  8113  0019F2  A4D8               	btfss	status,2,c
  8114  0019F4  D020               	goto	l5684
  8115  0019F6                     l5672:
  8116                           
  8117                           ;gao.c: 126: if (nrbits >= 24){
  8118  0019F6  0E17               	movlw	23
  8119  0019F8  0100               	movlb	0	; () banked
  8120  0019FA  65C4               	cpfsgt	gaoDecode@nrbits& (0+255),b
  8121  0019FC  D013               	goto	l5678
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;gao.c: 127: data <<= 8;
  8125  0019FE  C0C0  F0C1         	movff	gaoDecode@data+2,gaoDecode@data+3
  8126  001A02  C0BF  F0C0         	movff	gaoDecode@data+1,gaoDecode@data+2
  8127  001A06  C0BE  F0BF         	movff	gaoDecode@data,gaoDecode@data+1
  8128  001A0A  0100               	movlb	0	; () banked
  8129  001A0C  6BBE               	clrf	gaoDecode@data& (0+255),b
  8130                           
  8131                           ; BSR set to: 0
  8132                           ;gao.c: 128: gaoPrint(data);
  8133  001A0E  C0BE  F016         	movff	gaoDecode@data,gaoPrint@data
  8134  001A12  C0BF  F017         	movff	gaoDecode@data+1,gaoPrint@data+1
  8135  001A16  C0C0  F018         	movff	gaoDecode@data+2,gaoPrint@data+2
  8136  001A1A  C0C1  F019         	movff	gaoDecode@data+3,gaoPrint@data+3
  8137  001A1E  EC9D  F00E         	call	_gaoPrint	;wreg free
  8138  001A22  D000               	goto	l5678
  8139  001A24                     l5678:
  8140                           
  8141                           ;gao.c: 129: }
  8142                           ;gao.c: 130: preamble_data = gaobit;
  8143  001A24  C049  F0C5         	movff	gaoDecode@gaobit,gaoDecode@preamble_data
  8144                           
  8145                           ;gao.c: 131: nrbits = 0;
  8146  001A28  0E00               	movlw	0
  8147  001A2A  0100               	movlb	0	; () banked
  8148  001A2C  6FC4               	movwf	gaoDecode@nrbits& (0+255),b
  8149                           
  8150                           ; BSR set to: 0
  8151                           ;gao.c: 132: state = 0;
  8152  001A2E  0E00               	movlw	0
  8153  001A30  0100               	movlb	0	; () banked
  8154  001A32  6FC6               	movwf	gaoDecode@state& (0+255),b
  8155                           
  8156                           ;gao.c: 133: }
  8157  001A34  0012               	return	
  8158  001A36                     l5684:
  8159                           
  8160                           ;gao.c: 134: else{
  8161                           ;gao.c: 135: data <<= 1;
  8162  001A36  0100               	movlb	0	; () banked
  8163  001A38  90D8               	bcf	status,0,c
  8164  001A3A  37BE               	rlcf	gaoDecode@data& (0+255),f,b
  8165  001A3C  37BF               	rlcf	(gaoDecode@data+1)& (0+255),f,b
  8166  001A3E  37C0               	rlcf	(gaoDecode@data+2)& (0+255),f,b
  8167  001A40  37C1               	rlcf	(gaoDecode@data+3)& (0+255),f,b
  8168                           
  8169                           ; BSR set to: 0
  8170                           ;gao.c: 136: data |= gaobit;
  8171  001A42  5049               	movf	gaoDecode@gaobit,w,c
  8172  001A44  0100               	movlb	0	; () banked
  8173  001A46  13BE               	iorwf	gaoDecode@data& (0+255),f,b
  8174                           
  8175                           ; BSR set to: 0
  8176                           ;gao.c: 137: nrbits++;
  8177  001A48  0100               	movlb	0	; () banked
  8178  001A4A  2BC4               	incf	gaoDecode@nrbits& (0+255),f,b
  8179                           
  8180                           ; BSR set to: 0
  8181                           ;gao.c: 140: }
  8182                           
  8183                           ; BSR set to: 0
  8184                           ;gao.c: 138: }
  8185                           ;gao.c: 139: break;
  8186  001A4C  0012               	return	
  8187  001A4E                     l5692:
  8188  001A4E  0100               	movlb	0	; () banked
  8189  001A50  51C6               	movf	gaoDecode@state& (0+255),w,b
  8190                           
  8191                           ; Switch size 1, requested type "space"
  8192                           ; Number of cases is 2, Range of values is 0 to 1
  8193                           ; switch strategies available:
  8194                           ; Name         Instructions Cycles
  8195                           ; simple_byte            7     4 (average)
  8196                           ;	Chosen strategy is simple_byte
  8197  001A52  0A00               	xorlw	0	; case 0
  8198  001A54  B4D8               	btfsc	status,2,c
  8199  001A56  D7B7               	goto	l5660
  8200  001A58  0A01               	xorlw	1	; case 1
  8201  001A5A  A4D8               	btfss	status,2,c
  8202  001A5C  0012               	return	
  8203  001A5E  D7C3               	goto	l5668
  8204                           
  8205                           ; BSR set to: 0
  8206  001A60  0012               	return		;funcret
  8207  001A62                     __end_of_gaoDecode:
  8208                           	opt stack 0
  8209                           tblptru	equ	0xFF8
  8210                           tblptrh	equ	0xFF7
  8211                           tblptrl	equ	0xFF6
  8212                           tablat	equ	0xFF5
  8213                           prodh	equ	0xFF4
  8214                           prodl	equ	0xFF3
  8215                           intcon	equ	0xFF2
  8216                           intcon3	equ	0xFF0
  8217                           postinc0	equ	0xFEE
  8218                           wreg	equ	0xFE8
  8219                           indf1	equ	0xFE7
  8220                           postdec1	equ	0xFE5
  8221                           fsr1h	equ	0xFE2
  8222                           fsr1l	equ	0xFE1
  8223                           indf2	equ	0xFDF
  8224                           postinc2	equ	0xFDE
  8225                           fsr2h	equ	0xFDA
  8226                           fsr2l	equ	0xFD9
  8227                           status	equ	0xFD8
  8228                           
  8229 ;; *************** function _gaoPrint *****************
  8230 ;; Defined at:
  8231 ;;		line 50 in file "../gao.c"
  8232 ;; Parameters:    Size  Location     Type
  8233 ;;  data            4   21[COMRAM] unsigned long 
  8234 ;; Auto vars:     Size  Location     Type
  8235 ;;  j               1   33[COMRAM] unsigned char 
  8236 ;;  number          4   29[COMRAM] unsigned long 
  8237 ;; Return value:  Size  Location     Type
  8238 ;;		None               void
  8239 ;; Registers used:
  8240 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8241 ;; Tracked objects:
  8242 ;;		On entry : 0/0
  8243 ;;		On exit  : 0/0
  8244 ;;		Unchanged: 0/0
  8245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8246 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8247 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8248 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8249 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8250 ;;Total ram usage:       13 bytes
  8251 ;; Hardware stack levels used:    1
  8252 ;; Hardware stack levels required when called:    4
  8253 ;; This function calls:
  8254 ;;		_blinkRxLed
  8255 ;;		_uart_put
  8256 ;;		_uart_put_hex
  8257 ;;		_uart_puts
  8258 ;; This function is called by:
  8259 ;;		_gaoDecode
  8260 ;; This function uses a non-reentrant model
  8261 ;;
  8262                           
  8263                           	psect	text36
  8264  001D3A                     __ptext36:
  8265                           	opt stack 0
  8266  001D3A                     _gaoPrint:
  8267                           	opt stack 25
  8268                           
  8269                           ;gao.c: 51: unsigned long number;
  8270                           ;gao.c: 52: uart_puts("$G");
  8271                           
  8272                           ;incstack = 0
  8273  001D3A  0EF5               	movlw	low STR_5
  8274  001D3C  6E14               	movwf	uart_puts@s,c
  8275  001D3E  0EFF               	movlw	high STR_5
  8276  001D40  6E15               	movwf	uart_puts@s+1,c
  8277  001D42  ECCC  F012         	call	_uart_puts	;wreg free
  8278                           
  8279                           ;gao.c: 53: for (char j = 0; j < 5; j++){
  8280  001D46  0E00               	movlw	0
  8281  001D48  6E22               	movwf	gaoPrint@j,c
  8282  001D4A                     l5098:
  8283  001D4A  0E04               	movlw	4
  8284  001D4C  6422               	cpfsgt	gaoPrint@j,c
  8285  001D4E  D001               	goto	l5102
  8286  001D50  D022               	goto	l5110
  8287  001D52                     l5102:
  8288                           
  8289                           ;gao.c: 54: number = data & 0xF0000000;
  8290  001D52  0E00               	movlw	0
  8291  001D54  1416               	andwf	gaoPrint@data,w,c
  8292  001D56  6E1E               	movwf	gaoPrint@number,c
  8293  001D58  0E00               	movlw	0
  8294  001D5A  1417               	andwf	gaoPrint@data+1,w,c
  8295  001D5C  6E1F               	movwf	gaoPrint@number+1,c
  8296  001D5E  0E00               	movlw	0
  8297  001D60  1418               	andwf	gaoPrint@data+2,w,c
  8298  001D62  6E20               	movwf	gaoPrint@number+2,c
  8299  001D64  0EF0               	movlw	240
  8300  001D66  1419               	andwf	gaoPrint@data+3,w,c
  8301  001D68  6E21               	movwf	gaoPrint@number+3,c
  8302                           
  8303                           ;gao.c: 55: data <<= 4;
  8304  001D6A  0E04               	movlw	4
  8305  001D6C                     u5815:
  8306  001D6C  90D8               	bcf	status,0,c
  8307  001D6E  3616               	rlcf	gaoPrint@data,f,c
  8308  001D70  3617               	rlcf	gaoPrint@data+1,f,c
  8309  001D72  3618               	rlcf	gaoPrint@data+2,f,c
  8310  001D74  3619               	rlcf	gaoPrint@data+3,f,c
  8311  001D76  2EE8               	decfsz	wreg,f,c
  8312  001D78  D7F9               	goto	u5815
  8313                           
  8314                           ;gao.c: 56: number >>= 28;
  8315  001D7A  0E1C               	movlw	28
  8316  001D7C  6E1A               	movwf	??_gaoPrint& (0+255),c
  8317  001D7E                     u5825:
  8318  001D7E  90D8               	bcf	status,0,c
  8319  001D80  3221               	rrcf	gaoPrint@number+3,f,c
  8320  001D82  3220               	rrcf	gaoPrint@number+2,f,c
  8321  001D84  321F               	rrcf	gaoPrint@number+1,f,c
  8322  001D86  321E               	rrcf	gaoPrint@number,f,c
  8323  001D88  2E1A               	decfsz	??_gaoPrint& (0+255),f,c
  8324  001D8A  D7F9               	goto	u5825
  8325                           
  8326                           ;gao.c: 57: uart_put_hex(number);
  8327  001D8C  501E               	movf	gaoPrint@number,w,c
  8328  001D8E  EC92  F014         	call	_uart_put_hex
  8329  001D92  2A22               	incf	gaoPrint@j,f,c
  8330  001D94  D7DA               	goto	l5098
  8331  001D96                     l5110:
  8332                           
  8333                           ;gao.c: 58: }
  8334                           ;gao.c: 59: if ((data & 0xF0000000) == 0xF0000000) uart_put('1');
  8335  001D96  0E00               	movlw	0
  8336  001D98  1416               	andwf	gaoPrint@data,w,c
  8337  001D9A  6E1A               	movwf	??_gaoPrint& (0+255),c
  8338  001D9C  0E00               	movlw	0
  8339  001D9E  1417               	andwf	gaoPrint@data+1,w,c
  8340  001DA0  6E1B               	movwf	(??_gaoPrint+1)& (0+255),c
  8341  001DA2  0E00               	movlw	0
  8342  001DA4  1418               	andwf	gaoPrint@data+2,w,c
  8343  001DA6  6E1C               	movwf	(??_gaoPrint+2)& (0+255),c
  8344  001DA8  0EF0               	movlw	240
  8345  001DAA  1419               	andwf	gaoPrint@data+3,w,c
  8346  001DAC  6E1D               	movwf	(??_gaoPrint+3)& (0+255),c
  8347  001DAE  0EF0               	movlw	240
  8348  001DB0  181D               	xorwf	??_gaoPrint+3,w,c
  8349  001DB2  101A               	iorwf	??_gaoPrint,w,c
  8350  001DB4  101B               	iorwf	??_gaoPrint+1,w,c
  8351  001DB6  101C               	iorwf	??_gaoPrint+2,w,c
  8352  001DB8  A4D8               	btfss	status,2,c
  8353  001DBA  D004               	goto	l5114
  8354  001DBC  0E31               	movlw	49
  8355  001DBE  ECF8  F012         	call	_uart_put
  8356  001DC2  D01B               	goto	l5120
  8357  001DC4                     l5114:
  8358                           
  8359                           ;gao.c: 60: else if ((data & 0xF0000000) == 0xA0000000) uart_put('2');
  8360  001DC4  0E00               	movlw	0
  8361  001DC6  1416               	andwf	gaoPrint@data,w,c
  8362  001DC8  6E1A               	movwf	??_gaoPrint& (0+255),c
  8363  001DCA  0E00               	movlw	0
  8364  001DCC  1417               	andwf	gaoPrint@data+1,w,c
  8365  001DCE  6E1B               	movwf	(??_gaoPrint+1)& (0+255),c
  8366  001DD0  0E00               	movlw	0
  8367  001DD2  1418               	andwf	gaoPrint@data+2,w,c
  8368  001DD4  6E1C               	movwf	(??_gaoPrint+2)& (0+255),c
  8369  001DD6  0EF0               	movlw	240
  8370  001DD8  1419               	andwf	gaoPrint@data+3,w,c
  8371  001DDA  6E1D               	movwf	(??_gaoPrint+3)& (0+255),c
  8372  001DDC  0EA0               	movlw	160
  8373  001DDE  181D               	xorwf	??_gaoPrint+3,w,c
  8374  001DE0  101A               	iorwf	??_gaoPrint,w,c
  8375  001DE2  101B               	iorwf	??_gaoPrint+1,w,c
  8376  001DE4  101C               	iorwf	??_gaoPrint+2,w,c
  8377  001DE6  A4D8               	btfss	status,2,c
  8378  001DE8  D004               	goto	l5118
  8379  001DEA  0E32               	movlw	50
  8380  001DEC  ECF8  F012         	call	_uart_put
  8381  001DF0  D004               	goto	l5120
  8382  001DF2                     l5118:
  8383                           
  8384                           ;gao.c: 61: else uart_put('0');
  8385  001DF2  0E30               	movlw	48
  8386  001DF4  ECF8  F012         	call	_uart_put
  8387  001DF8  D000               	goto	l5120
  8388  001DFA                     l5120:
  8389                           
  8390                           ;gao.c: 62: uart_puts("\r\n");
  8391  001DFA  0E7F               	movlw	low (STR_9+29)
  8392  001DFC  6E14               	movwf	uart_puts@s,c
  8393  001DFE  0EFE               	movlw	high (STR_9+29)
  8394  001E00  6E15               	movwf	uart_puts@s+1,c
  8395  001E02  ECCC  F012         	call	_uart_puts	;wreg free
  8396                           
  8397                           ;gao.c: 63: blinkRxLed();
  8398  001E06  ECD4  F014         	call	_blinkRxLed	;wreg free
  8399  001E0A  0012               	return		;funcret
  8400  001E0C                     __end_of_gaoPrint:
  8401                           	opt stack 0
  8402                           tblptru	equ	0xFF8
  8403                           tblptrh	equ	0xFF7
  8404                           tblptrl	equ	0xFF6
  8405                           tablat	equ	0xFF5
  8406                           prodh	equ	0xFF4
  8407                           prodl	equ	0xFF3
  8408                           intcon	equ	0xFF2
  8409                           intcon3	equ	0xFF0
  8410                           postinc0	equ	0xFEE
  8411                           wreg	equ	0xFE8
  8412                           indf1	equ	0xFE7
  8413                           postdec1	equ	0xFE5
  8414                           fsr1h	equ	0xFE2
  8415                           fsr1l	equ	0xFE1
  8416                           indf2	equ	0xFDF
  8417                           postinc2	equ	0xFDE
  8418                           fsr2h	equ	0xFDA
  8419                           fsr2l	equ	0xFD9
  8420                           status	equ	0xFD8
  8421                           
  8422 ;; *************** function _esicDecode *****************
  8423 ;; Defined at:
  8424 ;;		line 67 in file "../esic.c"
  8425 ;; Parameters:    Size  Location     Type
  8426 ;;  rf_pulse_len    1    wreg     unsigned char 
  8427 ;; Auto vars:     Size  Location     Type
  8428 ;;  rf_pulse_len    1   50[COMRAM] unsigned char 
  8429 ;; Return value:  Size  Location     Type
  8430 ;;		None               void
  8431 ;; Registers used:
  8432 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8433 ;; Tracked objects:
  8434 ;;		On entry : 0/0
  8435 ;;		On exit  : 0/0
  8436 ;;		Unchanged: 0/0
  8437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8439 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8441 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8442 ;;Total ram usage:        1 bytes
  8443 ;; Hardware stack levels used:    1
  8444 ;; Hardware stack levels required when called:    6
  8445 ;; This function calls:
  8446 ;;		_esicPrint
  8447 ;; This function is called by:
  8448 ;;		_main
  8449 ;; This function uses a non-reentrant model
  8450 ;;
  8451                           
  8452                           	psect	text37
  8453  001EDA                     __ptext37:
  8454                           	opt stack 0
  8455  001EDA                     _esicDecode:
  8456                           	opt stack 24
  8457                           
  8458                           ;incstack = 0
  8459                           ;esicDecode@rf_pulse_length stored from wreg
  8460  001EDA  6E33               	movwf	esicDecode@rf_pulse_length,c
  8461                           
  8462                           ;esic.c: 78: static char esicbit;
  8463                           ;esic.c: 79: static unsigned long data = 0;
  8464                           ;esic.c: 80: static char nrbits = 0;
  8465                           ;esic.c: 81: static char preamble_data = 0;
  8466                           ;esic.c: 82: static char state = 0;
  8467                           ;esic.c: 85: if((rf_pulse_length > 40)&&(rf_pulse_length < 80)){
  8468  001EDC  0E28               	movlw	40
  8469  001EDE  6433               	cpfsgt	esicDecode@rf_pulse_length,c
  8470  001EE0  D00C               	goto	l5564
  8471  001EE2  0E50               	movlw	80
  8472  001EE4  6033               	cpfslt	esicDecode@rf_pulse_length,c
  8473  001EE6  D009               	goto	l5564
  8474                           
  8475                           ;esic.c: 86: if(esicbit == 4) esicbit = 1;
  8476  001EE8  0E04               	movlw	4
  8477  001EEA  1845               	xorwf	esicDecode@esicbit,w,c
  8478  001EEC  A4D8               	btfss	status,2,c
  8479  001EEE  D002               	goto	l5562
  8480  001EF0  0E01               	movlw	1
  8481  001EF2  D013               	goto	L22
  8482  001EF4                     l5562:
  8483                           
  8484                           ;esic.c: 87: else esicbit = 4;
  8485  001EF4  0E04               	movlw	4
  8486  001EF6  D011               	goto	L22
  8487                           
  8488                           ;esic.c: 88: }
  8489  001EF8  D012               	goto	l5576
  8490  001EFA                     l5564:
  8491                           
  8492                           ;esic.c: 89: else if((rf_pulse_length > 100)&&(rf_pulse_length < 140)&&
  8493                           ;esic.c: 90: !((esicbit == 4)&&(nrbits > 0))) esicbit = 0;
  8494  001EFA  0E64               	movlw	100
  8495  001EFC  6433               	cpfsgt	esicDecode@rf_pulse_length,c
  8496  001EFE  D00C               	goto	l5574
  8497  001F00  0E8C               	movlw	140
  8498  001F02  6033               	cpfslt	esicDecode@rf_pulse_length,c
  8499  001F04  D009               	goto	l5574
  8500  001F06  0E04               	movlw	4
  8501  001F08  1845               	xorwf	esicDecode@esicbit,w,c
  8502  001F0A  A4D8               	btfss	status,2,c
  8503  001F0C  D003               	goto	l5572
  8504  001F0E  5046               	movf	esicDecode@nrbits,w,c
  8505  001F10  A4D8               	btfss	status,2,c
  8506  001F12  D002               	goto	l5574
  8507  001F14                     l5572:
  8508  001F14  0E00               	movlw	0
  8509  001F16  D001               	goto	L22
  8510  001F18                     l5574:
  8511                           
  8512                           ;esic.c: 91: else esicbit = 2;
  8513  001F18  0E02               	movlw	2
  8514  001F1A                     L22:
  8515  001F1A  6E45               	movwf	esicDecode@esicbit,c
  8516  001F1C  D000               	goto	l5576
  8517  001F1E                     l5576:
  8518                           
  8519                           ;esic.c: 94: if(esicbit != 4){
  8520  001F1E  0E04               	movlw	4
  8521  001F20  1845               	xorwf	esicDecode@esicbit,w,c
  8522  001F22  B4D8               	btfsc	status,2,c
  8523  001F24  0012               	return	
  8524                           
  8525                           ;esic.c: 95: switch (state){
  8526  001F26  D036               	goto	l5606
  8527  001F28                     l5580:
  8528                           
  8529                           ;esic.c: 97: if(esicbit != 2){
  8530  001F28  0E02               	movlw	2
  8531  001F2A  1845               	xorwf	esicDecode@esicbit,w,c
  8532  001F2C  B4D8               	btfsc	status,2,c
  8533  001F2E  D00C               	goto	l5586
  8534                           
  8535                           ;esic.c: 98: preamble_data <<= 1;
  8536  001F30  90D8               	bcf	status,0,c
  8537  001F32  3647               	rlcf	esicDecode@preamble_data,f,c
  8538                           
  8539                           ;esic.c: 99: preamble_data |= esicbit;
  8540  001F34  5045               	movf	esicDecode@esicbit,w,c
  8541  001F36  1247               	iorwf	esicDecode@preamble_data,f,c
  8542                           
  8543                           ;esic.c: 100: if ((preamble_data & 0b00001111) == 0b00001100) state = 1;
  8544  001F38  5047               	movf	esicDecode@preamble_data,w,c
  8545  001F3A  0B0F               	andlw	15
  8546  001F3C  0A0C               	xorlw	12
  8547  001F3E  A4D8               	btfss	status,2,c
  8548  001F40  0012               	return	
  8549  001F42  0E01               	movlw	1
  8550  001F44  6E48               	movwf	esicDecode@state,c
  8551                           
  8552                           ;esic.c: 101: }
  8553  001F46  0012               	return	
  8554  001F48                     l5586:
  8555                           
  8556                           ;esic.c: 102: else preamble_data = 0;
  8557  001F48  0E00               	movlw	0
  8558  001F4A  6E47               	movwf	esicDecode@preamble_data,c
  8559                           
  8560                           ;esic.c: 103: break;
  8561  001F4C  0012               	return	
  8562  001F4E                     l5588:
  8563                           
  8564                           ;esic.c: 105: if (esicbit == 2){
  8565  001F4E  0E02               	movlw	2
  8566  001F50  1845               	xorwf	esicDecode@esicbit,w,c
  8567  001F52  A4D8               	btfss	status,2,c
  8568  001F54  D014               	goto	l5598
  8569                           
  8570                           ;esic.c: 106: if (nrbits == 32) esicPrint(data);
  8571  001F56  0E20               	movlw	32
  8572  001F58  1846               	xorwf	esicDecode@nrbits,w,c
  8573  001F5A  A4D8               	btfss	status,2,c
  8574  001F5C  D00B               	goto	l5594
  8575  001F5E  C0BA  F02F         	movff	esicDecode@data,esicPrint@data
  8576  001F62  C0BB  F030         	movff	esicDecode@data+1,esicPrint@data+1
  8577  001F66  C0BC  F031         	movff	esicDecode@data+2,esicPrint@data+2
  8578  001F6A  C0BD  F032         	movff	esicDecode@data+3,esicPrint@data+3
  8579  001F6E  ECF1  F002         	call	_esicPrint	;wreg free
  8580  001F72  D000               	goto	l5594
  8581  001F74                     l5594:
  8582                           
  8583                           ;esic.c: 107: nrbits = 0;
  8584  001F74  0E00               	movlw	0
  8585  001F76  6E46               	movwf	esicDecode@nrbits,c
  8586                           
  8587                           ;esic.c: 108: state = 0;
  8588  001F78  0E00               	movlw	0
  8589  001F7A  6E48               	movwf	esicDecode@state,c
  8590                           
  8591                           ;esic.c: 109: }
  8592  001F7C  0012               	return	
  8593  001F7E                     l5598:
  8594                           
  8595                           ;esic.c: 110: else{
  8596                           ;esic.c: 111: data <<= 1;
  8597  001F7E  0100               	movlb	0	; () banked
  8598  001F80  90D8               	bcf	status,0,c
  8599  001F82  37BA               	rlcf	esicDecode@data& (0+255),f,b
  8600  001F84  37BB               	rlcf	(esicDecode@data+1)& (0+255),f,b
  8601  001F86  37BC               	rlcf	(esicDecode@data+2)& (0+255),f,b
  8602  001F88  37BD               	rlcf	(esicDecode@data+3)& (0+255),f,b
  8603                           
  8604                           ; BSR set to: 0
  8605                           ;esic.c: 112: data |= esicbit;
  8606  001F8A  5045               	movf	esicDecode@esicbit,w,c
  8607  001F8C  0100               	movlb	0	; () banked
  8608  001F8E  13BA               	iorwf	esicDecode@data& (0+255),f,b
  8609                           
  8610                           ; BSR set to: 0
  8611                           ;esic.c: 113: nrbits++;
  8612  001F90  2A46               	incf	esicDecode@nrbits,f,c
  8613                           
  8614                           ; BSR set to: 0
  8615                           ;esic.c: 116: }
  8616                           
  8617                           ; BSR set to: 0
  8618                           ;esic.c: 114: }
  8619                           ;esic.c: 115: break;
  8620  001F92  0012               	return	
  8621  001F94                     l5606:
  8622  001F94  5048               	movf	esicDecode@state,w,c
  8623                           
  8624                           ; Switch size 1, requested type "space"
  8625                           ; Number of cases is 2, Range of values is 0 to 1
  8626                           ; switch strategies available:
  8627                           ; Name         Instructions Cycles
  8628                           ; simple_byte            7     4 (average)
  8629                           ;	Chosen strategy is simple_byte
  8630  001F96  0A00               	xorlw	0	; case 0
  8631  001F98  B4D8               	btfsc	status,2,c
  8632  001F9A  D7C6               	goto	l5580
  8633  001F9C  0A01               	xorlw	1	; case 1
  8634  001F9E  B4D8               	btfsc	status,2,c
  8635  001FA0  D7D6               	goto	l5588
  8636  001FA2  0012               	return	
  8637  001FA4  0012               	return		;funcret
  8638  001FA6                     __end_of_esicDecode:
  8639                           	opt stack 0
  8640                           tblptru	equ	0xFF8
  8641                           tblptrh	equ	0xFF7
  8642                           tblptrl	equ	0xFF6
  8643                           tablat	equ	0xFF5
  8644                           prodh	equ	0xFF4
  8645                           prodl	equ	0xFF3
  8646                           intcon	equ	0xFF2
  8647                           intcon3	equ	0xFF0
  8648                           postinc0	equ	0xFEE
  8649                           wreg	equ	0xFE8
  8650                           indf1	equ	0xFE7
  8651                           postdec1	equ	0xFE5
  8652                           fsr1h	equ	0xFE2
  8653                           fsr1l	equ	0xFE1
  8654                           indf2	equ	0xFDF
  8655                           postinc2	equ	0xFDE
  8656                           fsr2h	equ	0xFDA
  8657                           fsr2l	equ	0xFD9
  8658                           status	equ	0xFD8
  8659                           
  8660 ;; *************** function _esicPrint *****************
  8661 ;; Defined at:
  8662 ;;		line 7 in file "../esic.c"
  8663 ;; Parameters:    Size  Location     Type
  8664 ;;  data            4   46[COMRAM] unsigned long 
  8665 ;; Auto vars:     Size  Location     Type
  8666 ;;  counter         1   23[BANK0 ] unsigned char 
  8667 ;;  temp            4   28[BANK0 ] unsigned long 
  8668 ;;  temperature     4   24[BANK0 ] long 
  8669 ;;  paritycalc      1   22[BANK0 ] unsigned char 
  8670 ;;  parity          1   21[BANK0 ] unsigned char 
  8671 ;;  lowbatt         1   20[BANK0 ] unsigned char 
  8672 ;;  humidity        1   19[BANK0 ] unsigned char 
  8673 ;;  channel         1   18[BANK0 ] unsigned char 
  8674 ;;  house           1   17[BANK0 ] unsigned char 
  8675 ;;  packetcount     1   16[BANK0 ] unsigned char 
  8676 ;; Return value:  Size  Location     Type
  8677 ;;		None               void
  8678 ;; Registers used:
  8679 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8680 ;; Tracked objects:
  8681 ;;		On entry : 0/0
  8682 ;;		On exit  : 0/0
  8683 ;;		Unchanged: 0/0
  8684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8685 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8686 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8687 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8688 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8689 ;;Total ram usage:       24 bytes
  8690 ;; Hardware stack levels used:    1
  8691 ;; Hardware stack levels required when called:    5
  8692 ;; This function calls:
  8693 ;;		___aldiv
  8694 ;;		___almod
  8695 ;;		___awdiv
  8696 ;;		___lmul
  8697 ;;		_blinkRxLed
  8698 ;;		_uart_put
  8699 ;;		_uart_put_int
  8700 ;;		_uart_puts
  8701 ;; This function is called by:
  8702 ;;		_esicDecode
  8703 ;; This function uses a non-reentrant model
  8704 ;;
  8705                           
  8706                           	psect	text38
  8707  0005E2                     __ptext38:
  8708                           	opt stack 0
  8709  0005E2                     _esicPrint:
  8710                           	opt stack 24
  8711                           
  8712                           ;esic.c: 8: unsigned long temp;
  8713                           ;esic.c: 9: char house;
  8714                           ;esic.c: 10: char channel;
  8715                           ;esic.c: 11: char humidity;
  8716                           ;esic.c: 12: signed long temperature;
  8717                           ;esic.c: 13: char lowbatt;
  8718                           ;esic.c: 14: char packetcount;
  8719                           ;esic.c: 15: char parity;
  8720                           ;esic.c: 16: char paritycalc = 0;
  8721                           
  8722                           ;incstack = 0
  8723  0005E2  0E00               	movlw	0
  8724  0005E4  0100               	movlb	0	; () banked
  8725  0005E6  6F76               	movwf	esicPrint@paritycalc& (0+255),b
  8726                           
  8727                           ; BSR set to: 0
  8728                           ;esic.c: 18: parity = data & 0b11;
  8729  0005E8  502F               	movf	esicPrint@data,w,c
  8730  0005EA  0B03               	andlw	3
  8731  0005EC  0100               	movlb	0	; () banked
  8732  0005EE  6F75               	movwf	esicPrint@parity& (0+255),b
  8733                           
  8734                           ; BSR set to: 0
  8735                           ;esic.c: 20: temp = data;
  8736  0005F0  C02F  F07C         	movff	esicPrint@data,esicPrint@temp
  8737  0005F4  C030  F07D         	movff	esicPrint@data+1,esicPrint@temp+1
  8738  0005F8  C031  F07E         	movff	esicPrint@data+2,esicPrint@temp+2
  8739  0005FC  C032  F07F         	movff	esicPrint@data+3,esicPrint@temp+3
  8740                           
  8741                           ; BSR set to: 0
  8742                           ;esic.c: 21: for (char counter = 0; counter < 15; counter++){
  8743  000600  0E00               	movlw	0
  8744  000602  0100               	movlb	0	; () banked
  8745  000604  6F77               	movwf	esicPrint@counter& (0+255),b
  8746  000606  0E0E               	movlw	14
  8747  000608  0100               	movlb	0	; () banked
  8748  00060A  6577               	cpfsgt	esicPrint@counter& (0+255),b
  8749  00060C  D001               	goto	l4948
  8750                           
  8751                           ; BSR set to: 0
  8752  00060E  D025               	goto	l4954
  8753  000610                     l4948:
  8754                           
  8755                           ; BSR set to: 0
  8756                           ;esic.c: 22: temp = data & 0b11;
  8757  000610  0E03               	movlw	3
  8758  000612  142F               	andwf	esicPrint@data,w,c
  8759  000614  0100               	movlb	0	; () banked
  8760  000616  6F7C               	movwf	esicPrint@temp& (0+255),b
  8761  000618  0E00               	movlw	0
  8762  00061A  1430               	andwf	esicPrint@data+1,w,c
  8763  00061C  0100               	movlb	0	; () banked
  8764  00061E  6F7D               	movwf	(esicPrint@temp+1)& (0+255),b
  8765  000620  0E00               	movlw	0
  8766  000622  1431               	andwf	esicPrint@data+2,w,c
  8767  000624  0100               	movlb	0	; () banked
  8768  000626  6F7E               	movwf	(esicPrint@temp+2)& (0+255),b
  8769  000628  0E00               	movlw	0
  8770  00062A  1432               	andwf	esicPrint@data+3,w,c
  8771  00062C  0100               	movlb	0	; () banked
  8772  00062E  6F7F               	movwf	(esicPrint@temp+3)& (0+255),b
  8773                           
  8774                           ;esic.c: 23: paritycalc = paritycalc ^ temp;
  8775  000630  0100               	movlb	0	; () banked
  8776  000632  5176               	movf	esicPrint@paritycalc& (0+255),w,b
  8777  000634  0100               	movlb	0	; () banked
  8778  000636  197C               	xorwf	esicPrint@temp& (0+255),w,b
  8779  000638  0100               	movlb	0	; () banked
  8780  00063A  6F76               	movwf	esicPrint@paritycalc& (0+255),b
  8781                           
  8782                           ;esic.c: 24: temp >>= 2;
  8783  00063C  0E02               	movlw	2
  8784  00063E  0100               	movlb	0	; () banked
  8785  000640  6F6C               	movwf	??_esicPrint& (0+255),b
  8786  000642                     u5575:
  8787  000642  90D8               	bcf	status,0,c
  8788  000644  0100               	movlb	0	; () banked
  8789  000646  337F               	rrcf	(esicPrint@temp+3)& (0+255),f,b
  8790  000648  337E               	rrcf	(esicPrint@temp+2)& (0+255),f,b
  8791  00064A  337D               	rrcf	(esicPrint@temp+1)& (0+255),f,b
  8792  00064C  337C               	rrcf	esicPrint@temp& (0+255),f,b
  8793  00064E  0100               	movlb	0	; () banked
  8794  000650  2F6C               	decfsz	??_esicPrint& (0+255),f,b
  8795  000652  D7F7               	goto	u5575
  8796                           
  8797                           ; BSR set to: 0
  8798  000654  0100               	movlb	0	; () banked
  8799  000656  2B77               	incf	esicPrint@counter& (0+255),f,b
  8800  000658  D7D6               	goto	L23
  8801  00065A                     l4954:
  8802                           
  8803                           ; BSR set to: 0
  8804                           ;esic.c: 25: }
  8805                           ;esic.c: 27: temp = data & 0x03000000;
  8806  00065A  0E00               	movlw	0
  8807  00065C  142F               	andwf	esicPrint@data,w,c
  8808  00065E  0100               	movlb	0	; () banked
  8809  000660  6F7C               	movwf	esicPrint@temp& (0+255),b
  8810  000662  0E00               	movlw	0
  8811  000664  1430               	andwf	esicPrint@data+1,w,c
  8812  000666  0100               	movlb	0	; () banked
  8813  000668  6F7D               	movwf	(esicPrint@temp+1)& (0+255),b
  8814  00066A  0E00               	movlw	0
  8815  00066C  1431               	andwf	esicPrint@data+2,w,c
  8816  00066E  0100               	movlb	0	; () banked
  8817  000670  6F7E               	movwf	(esicPrint@temp+2)& (0+255),b
  8818  000672  0E03               	movlw	3
  8819  000674  1432               	andwf	esicPrint@data+3,w,c
  8820  000676  0100               	movlb	0	; () banked
  8821  000678  6F7F               	movwf	(esicPrint@temp+3)& (0+255),b
  8822                           
  8823                           ;esic.c: 28: temp >>= 24;
  8824  00067A  0E18               	movlw	24
  8825  00067C  0100               	movlb	0	; () banked
  8826  00067E  6F6C               	movwf	??_esicPrint& (0+255),b
  8827  000680                     u5595:
  8828  000680  90D8               	bcf	status,0,c
  8829  000682  0100               	movlb	0	; () banked
  8830  000684  337F               	rrcf	(esicPrint@temp+3)& (0+255),f,b
  8831  000686  337E               	rrcf	(esicPrint@temp+2)& (0+255),f,b
  8832  000688  337D               	rrcf	(esicPrint@temp+1)& (0+255),f,b
  8833  00068A  337C               	rrcf	esicPrint@temp& (0+255),f,b
  8834  00068C  0100               	movlb	0	; () banked
  8835  00068E  2F6C               	decfsz	??_esicPrint& (0+255),f,b
  8836  000690  D7F7               	goto	u5595
  8837                           
  8838                           ;esic.c: 30: if ((temp == 0b11)&&(paritycalc == parity)){
  8839  000692  0E03               	movlw	3
  8840  000694  0100               	movlb	0	; () banked
  8841  000696  197C               	xorwf	esicPrint@temp& (0+255),w,b
  8842  000698  0100               	movlb	0	; () banked
  8843  00069A  117D               	iorwf	(esicPrint@temp+1)& (0+255),w,b
  8844  00069C  0100               	movlb	0	; () banked
  8845  00069E  117E               	iorwf	(esicPrint@temp+2)& (0+255),w,b
  8846  0006A0  0100               	movlb	0	; () banked
  8847  0006A2  117F               	iorwf	(esicPrint@temp+3)& (0+255),w,b
  8848  0006A4  A4D8               	btfss	status,2,c
  8849  0006A6  0012               	return	
  8850                           
  8851                           ; BSR set to: 0
  8852  0006A8  0100               	movlb	0	; () banked
  8853  0006AA  5175               	movf	esicPrint@parity& (0+255),w,b
  8854  0006AC  0100               	movlb	0	; () banked
  8855  0006AE  1976               	xorwf	esicPrint@paritycalc& (0+255),w,b
  8856  0006B0  A4D8               	btfss	status,2,c
  8857  0006B2  0012               	return	
  8858                           
  8859                           ; BSR set to: 0
  8860                           ;esic.c: 31: temp = data & 0xf0000000;
  8861  0006B4  0E00               	movlw	0
  8862  0006B6  142F               	andwf	esicPrint@data,w,c
  8863  0006B8  0100               	movlb	0	; () banked
  8864  0006BA  6F7C               	movwf	esicPrint@temp& (0+255),b
  8865  0006BC  0E00               	movlw	0
  8866  0006BE  1430               	andwf	esicPrint@data+1,w,c
  8867  0006C0  0100               	movlb	0	; () banked
  8868  0006C2  6F7D               	movwf	(esicPrint@temp+1)& (0+255),b
  8869  0006C4  0E00               	movlw	0
  8870  0006C6  1431               	andwf	esicPrint@data+2,w,c
  8871  0006C8  0100               	movlb	0	; () banked
  8872  0006CA  6F7E               	movwf	(esicPrint@temp+2)& (0+255),b
  8873  0006CC  0EF0               	movlw	240
  8874  0006CE  1432               	andwf	esicPrint@data+3,w,c
  8875  0006D0  0100               	movlb	0	; () banked
  8876  0006D2  6F7F               	movwf	(esicPrint@temp+3)& (0+255),b
  8877                           
  8878                           ;esic.c: 32: house = temp >> 28;
  8879  0006D4  C07C  F06C         	movff	esicPrint@temp,??_esicPrint
  8880  0006D8  C07D  F06D         	movff	esicPrint@temp+1,??_esicPrint+1
  8881  0006DC  C07E  F06E         	movff	esicPrint@temp+2,??_esicPrint+2
  8882  0006E0  C07F  F06F         	movff	esicPrint@temp+3,??_esicPrint+3
  8883  0006E4  0E1D               	movlw	29
  8884  0006E6  D006               	goto	u5620
  8885  0006E8                     u5625:
  8886  0006E8  0100               	movlb	0	; () banked
  8887  0006EA  90D8               	bcf	status,0,c
  8888  0006EC  336F               	rrcf	(??_esicPrint+3)& (0+255),f,b
  8889  0006EE  336E               	rrcf	(??_esicPrint+2)& (0+255),f,b
  8890  0006F0  336D               	rrcf	(??_esicPrint+1)& (0+255),f,b
  8891  0006F2  336C               	rrcf	??_esicPrint& (0+255),f,b
  8892  0006F4                     u5620:
  8893  0006F4  2EE8               	decfsz	wreg,f,c
  8894  0006F6  D7F8               	goto	u5625
  8895  0006F8  0100               	movlb	0	; () banked
  8896  0006FA  516C               	movf	??_esicPrint& (0+255),w,b
  8897  0006FC  0100               	movlb	0	; () banked
  8898  0006FE  6F71               	movwf	esicPrint@house& (0+255),b
  8899                           
  8900                           ;esic.c: 34: temp = data & 0x0c000000;
  8901  000700  0E00               	movlw	0
  8902  000702  142F               	andwf	esicPrint@data,w,c
  8903  000704  0100               	movlb	0	; () banked
  8904  000706  6F7C               	movwf	esicPrint@temp& (0+255),b
  8905  000708  0E00               	movlw	0
  8906  00070A  1430               	andwf	esicPrint@data+1,w,c
  8907  00070C  0100               	movlb	0	; () banked
  8908  00070E  6F7D               	movwf	(esicPrint@temp+1)& (0+255),b
  8909  000710  0E00               	movlw	0
  8910  000712  1431               	andwf	esicPrint@data+2,w,c
  8911  000714  0100               	movlb	0	; () banked
  8912  000716  6F7E               	movwf	(esicPrint@temp+2)& (0+255),b
  8913  000718  0E0C               	movlw	12
  8914  00071A  1432               	andwf	esicPrint@data+3,w,c
  8915  00071C  0100               	movlb	0	; () banked
  8916  00071E  6F7F               	movwf	(esicPrint@temp+3)& (0+255),b
  8917                           
  8918                           ;esic.c: 35: temp >>= 26;
  8919  000720  0E1A               	movlw	26
  8920  000722  0100               	movlb	0	; () banked
  8921  000724  6F6C               	movwf	??_esicPrint& (0+255),b
  8922  000726                     u5635:
  8923  000726  90D8               	bcf	status,0,c
  8924  000728  0100               	movlb	0	; () banked
  8925  00072A  337F               	rrcf	(esicPrint@temp+3)& (0+255),f,b
  8926  00072C  337E               	rrcf	(esicPrint@temp+2)& (0+255),f,b
  8927  00072E  337D               	rrcf	(esicPrint@temp+1)& (0+255),f,b
  8928  000730  337C               	rrcf	esicPrint@temp& (0+255),f,b
  8929  000732  0100               	movlb	0	; () banked
  8930  000734  2F6C               	decfsz	??_esicPrint& (0+255),f,b
  8931  000736  D7F7               	goto	u5635
  8932                           
  8933                           ;esic.c: 36: channel = temp + 1;
  8934  000738  0100               	movlb	0	; () banked
  8935  00073A  297C               	incf	esicPrint@temp& (0+255),w,b
  8936  00073C  0100               	movlb	0	; () banked
  8937  00073E  6F72               	movwf	esicPrint@channel& (0+255),b
  8938                           
  8939                           ;esic.c: 38: temp = data & 0x00800000;
  8940  000740  0E00               	movlw	0
  8941  000742  142F               	andwf	esicPrint@data,w,c
  8942  000744  0100               	movlb	0	; () banked
  8943  000746  6F7C               	movwf	esicPrint@temp& (0+255),b
  8944  000748  0E00               	movlw	0
  8945  00074A  1430               	andwf	esicPrint@data+1,w,c
  8946  00074C  0100               	movlb	0	; () banked
  8947  00074E  6F7D               	movwf	(esicPrint@temp+1)& (0+255),b
  8948  000750  0E80               	movlw	128
  8949  000752  1431               	andwf	esicPrint@data+2,w,c
  8950  000754  0100               	movlb	0	; () banked
  8951  000756  6F7E               	movwf	(esicPrint@temp+2)& (0+255),b
  8952  000758  0E00               	movlw	0
  8953  00075A  1432               	andwf	esicPrint@data+3,w,c
  8954  00075C  0100               	movlb	0	; () banked
  8955  00075E  6F7F               	movwf	(esicPrint@temp+3)& (0+255),b
  8956                           
  8957                           ; BSR set to: 0
  8958                           ;esic.c: 39: lowbatt = temp >> 23;
  8959  000760  0100               	movlb	0	; () banked
  8960  000762  357E               	rlcf	(esicPrint@temp+2)& (0+255),w,b
  8961  000764  357F               	rlcf	(esicPrint@temp+3)& (0+255),w,b
  8962  000766  0100               	movlb	0	; () banked
  8963  000768  6F74               	movwf	esicPrint@lowbatt& (0+255),b
  8964                           
  8965                           ; BSR set to: 0
  8966                           ;esic.c: 41: temp = data & 0x007f8000;
  8967  00076A  0E00               	movlw	0
  8968  00076C  142F               	andwf	esicPrint@data,w,c
  8969  00076E  0100               	movlb	0	; () banked
  8970  000770  6F7C               	movwf	esicPrint@temp& (0+255),b
  8971  000772  0E80               	movlw	128
  8972  000774  1430               	andwf	esicPrint@data+1,w,c
  8973  000776  0100               	movlb	0	; () banked
  8974  000778  6F7D               	movwf	(esicPrint@temp+1)& (0+255),b
  8975  00077A  0E7F               	movlw	127
  8976  00077C  1431               	andwf	esicPrint@data+2,w,c
  8977  00077E  0100               	movlb	0	; () banked
  8978  000780  6F7E               	movwf	(esicPrint@temp+2)& (0+255),b
  8979  000782  0E00               	movlw	0
  8980  000784  1432               	andwf	esicPrint@data+3,w,c
  8981  000786  0100               	movlb	0	; () banked
  8982  000788  6F7F               	movwf	(esicPrint@temp+3)& (0+255),b
  8983                           
  8984                           ; BSR set to: 0
  8985                           ;esic.c: 42: humidity = temp >> 15;
  8986  00078A  C07C  F06C         	movff	esicPrint@temp,??_esicPrint
  8987  00078E  C07D  F06D         	movff	esicPrint@temp+1,??_esicPrint+1
  8988  000792  C07E  F06E         	movff	esicPrint@temp+2,??_esicPrint+2
  8989  000796  C07F  F06F         	movff	esicPrint@temp+3,??_esicPrint+3
  8990  00079A  0E10               	movlw	16
  8991  00079C  D006               	goto	u5640
  8992  00079E                     u5645:
  8993  00079E  0100               	movlb	0	; () banked
  8994  0007A0  90D8               	bcf	status,0,c
  8995  0007A2  336F               	rrcf	(??_esicPrint+3)& (0+255),f,b
  8996  0007A4  336E               	rrcf	(??_esicPrint+2)& (0+255),f,b
  8997  0007A6  336D               	rrcf	(??_esicPrint+1)& (0+255),f,b
  8998  0007A8  336C               	rrcf	??_esicPrint& (0+255),f,b
  8999  0007AA                     u5640:
  9000  0007AA  2EE8               	decfsz	wreg,f,c
  9001  0007AC  D7F8               	goto	u5645
  9002  0007AE  0100               	movlb	0	; () banked
  9003  0007B0  516C               	movf	??_esicPrint& (0+255),w,b
  9004  0007B2  0100               	movlb	0	; () banked
  9005  0007B4  6F73               	movwf	esicPrint@humidity& (0+255),b
  9006                           
  9007                           ; BSR set to: 0
  9008                           ;esic.c: 44: temp = data & 0x00007ff0;
  9009  0007B6  0EF0               	movlw	240
  9010  0007B8  142F               	andwf	esicPrint@data,w,c
  9011  0007BA  0100               	movlb	0	; () banked
  9012  0007BC  6F7C               	movwf	esicPrint@temp& (0+255),b
  9013  0007BE  0E7F               	movlw	127
  9014  0007C0  1430               	andwf	esicPrint@data+1,w,c
  9015  0007C2  0100               	movlb	0	; () banked
  9016  0007C4  6F7D               	movwf	(esicPrint@temp+1)& (0+255),b
  9017  0007C6  0E00               	movlw	0
  9018  0007C8  1431               	andwf	esicPrint@data+2,w,c
  9019  0007CA  0100               	movlb	0	; () banked
  9020  0007CC  6F7E               	movwf	(esicPrint@temp+2)& (0+255),b
  9021  0007CE  0E00               	movlw	0
  9022  0007D0  1432               	andwf	esicPrint@data+3,w,c
  9023  0007D2  0100               	movlb	0	; () banked
  9024  0007D4  6F7F               	movwf	(esicPrint@temp+3)& (0+255),b
  9025                           
  9026                           ; BSR set to: 0
  9027                           ;esic.c: 45: temperature = temp >> 4;
  9028  0007D6  C07C  F06C         	movff	esicPrint@temp,??_esicPrint
  9029  0007DA  C07D  F06D         	movff	esicPrint@temp+1,??_esicPrint+1
  9030  0007DE  C07E  F06E         	movff	esicPrint@temp+2,??_esicPrint+2
  9031  0007E2  C07F  F06F         	movff	esicPrint@temp+3,??_esicPrint+3
  9032  0007E6  0E05               	movlw	5
  9033  0007E8  D006               	goto	u5650
  9034  0007EA                     u5655:
  9035  0007EA  0100               	movlb	0	; () banked
  9036  0007EC  90D8               	bcf	status,0,c
  9037  0007EE  336F               	rrcf	(??_esicPrint+3)& (0+255),f,b
  9038  0007F0  336E               	rrcf	(??_esicPrint+2)& (0+255),f,b
  9039  0007F2  336D               	rrcf	(??_esicPrint+1)& (0+255),f,b
  9040  0007F4  336C               	rrcf	??_esicPrint& (0+255),f,b
  9041  0007F6                     u5650:
  9042  0007F6  2EE8               	decfsz	wreg,f,c
  9043  0007F8  D7F8               	goto	u5655
  9044  0007FA  C06C  F078         	movff	??_esicPrint,esicPrint@temperature
  9045  0007FE  C06D  F079         	movff	??_esicPrint+1,esicPrint@temperature+1
  9046  000802  C06E  F07A         	movff	??_esicPrint+2,esicPrint@temperature+2
  9047  000806  C06F  F07B         	movff	??_esicPrint+3,esicPrint@temperature+3
  9048                           
  9049                           ; BSR set to: 0
  9050                           ;esic.c: 46: temperature = ((temperature-800)*10) / 16;
  9051  00080A  0EE0               	movlw	224
  9052  00080C  0100               	movlb	0	; () banked
  9053  00080E  2578               	addwf	esicPrint@temperature& (0+255),w,b
  9054  000810  6E11               	movwf	___lmul@multiplier,c
  9055  000812  0EFC               	movlw	252
  9056  000814  0100               	movlb	0	; () banked
  9057  000816  2179               	addwfc	(esicPrint@temperature+1)& (0+255),w,b
  9058  000818  6E12               	movwf	___lmul@multiplier+1,c
  9059  00081A  0EFF               	movlw	255
  9060  00081C  0100               	movlb	0	; () banked
  9061  00081E  217A               	addwfc	(esicPrint@temperature+2)& (0+255),w,b
  9062  000820  6E13               	movwf	___lmul@multiplier+2,c
  9063  000822  0EFF               	movlw	255
  9064  000824  0100               	movlb	0	; () banked
  9065  000826  217B               	addwfc	(esicPrint@temperature+3)& (0+255),w,b
  9066  000828  6E14               	movwf	___lmul@multiplier+3,c
  9067  00082A  0E0A               	movlw	10
  9068  00082C  6E15               	movwf	___lmul@multiplicand,c
  9069  00082E  0E00               	movlw	0
  9070  000830  6E16               	movwf	___lmul@multiplicand+1,c
  9071  000832  0E00               	movlw	0
  9072  000834  6E17               	movwf	___lmul@multiplicand+2,c
  9073  000836  0E00               	movlw	0
  9074  000838  6E18               	movwf	___lmul@multiplicand+3,c
  9075  00083A  EC73  F012         	call	___lmul	;wreg free
  9076  00083E  C011  F01D         	movff	?___lmul,___aldiv@dividend
  9077  000842  C012  F01E         	movff	?___lmul+1,___aldiv@dividend+1
  9078  000846  C013  F01F         	movff	?___lmul+2,___aldiv@dividend+2
  9079  00084A  C014  F020         	movff	?___lmul+3,___aldiv@dividend+3
  9080  00084E  0E10               	movlw	16
  9081  000850  6E21               	movwf	___aldiv@divisor,c
  9082  000852  0E00               	movlw	0
  9083  000854  6E22               	movwf	___aldiv@divisor+1,c
  9084  000856  0E00               	movlw	0
  9085  000858  6E23               	movwf	___aldiv@divisor+2,c
  9086  00085A  0E00               	movlw	0
  9087  00085C  6E24               	movwf	___aldiv@divisor+3,c
  9088  00085E  EC2E  F00E         	call	___aldiv	;wreg free
  9089  000862  C01D  F078         	movff	?___aldiv,esicPrint@temperature
  9090  000866  C01E  F079         	movff	?___aldiv+1,esicPrint@temperature+1
  9091  00086A  C01F  F07A         	movff	?___aldiv+2,esicPrint@temperature+2
  9092  00086E  C020  F07B         	movff	?___aldiv+3,esicPrint@temperature+3
  9093                           
  9094                           ;esic.c: 48: temp = data & 0x0000000c;
  9095  000872  0E0C               	movlw	12
  9096  000874  142F               	andwf	esicPrint@data,w,c
  9097  000876  0100               	movlb	0	; () banked
  9098  000878  6F7C               	movwf	esicPrint@temp& (0+255),b
  9099  00087A  0E00               	movlw	0
  9100  00087C  1430               	andwf	esicPrint@data+1,w,c
  9101  00087E  0100               	movlb	0	; () banked
  9102  000880  6F7D               	movwf	(esicPrint@temp+1)& (0+255),b
  9103  000882  0E00               	movlw	0
  9104  000884  1431               	andwf	esicPrint@data+2,w,c
  9105  000886  0100               	movlb	0	; () banked
  9106  000888  6F7E               	movwf	(esicPrint@temp+2)& (0+255),b
  9107  00088A  0E00               	movlw	0
  9108  00088C  1432               	andwf	esicPrint@data+3,w,c
  9109  00088E  0100               	movlb	0	; () banked
  9110  000890  6F7F               	movwf	(esicPrint@temp+3)& (0+255),b
  9111                           
  9112                           ; BSR set to: 0
  9113                           ;esic.c: 49: temp >>= 2;
  9114  000892  0E02               	movlw	2
  9115  000894  0100               	movlb	0	; () banked
  9116  000896  6F6C               	movwf	??_esicPrint& (0+255),b
  9117  000898                     u5665:
  9118  000898  90D8               	bcf	status,0,c
  9119  00089A  0100               	movlb	0	; () banked
  9120  00089C  337F               	rrcf	(esicPrint@temp+3)& (0+255),f,b
  9121  00089E  337E               	rrcf	(esicPrint@temp+2)& (0+255),f,b
  9122  0008A0  337D               	rrcf	(esicPrint@temp+1)& (0+255),f,b
  9123  0008A2  337C               	rrcf	esicPrint@temp& (0+255),f,b
  9124  0008A4  0100               	movlb	0	; () banked
  9125  0008A6  2F6C               	decfsz	??_esicPrint& (0+255),f,b
  9126  0008A8  D7F7               	goto	u5665
  9127                           
  9128                           ; BSR set to: 0
  9129                           ;esic.c: 50: packetcount = temp;
  9130  0008AA  C07C  F070         	movff	esicPrint@temp,esicPrint@packetcount
  9131                           
  9132                           ; BSR set to: 0
  9133                           ;esic.c: 52: uart_puts("$E");
  9134  0008AE  0EF8               	movlw	low STR_3
  9135  0008B0  6E14               	movwf	uart_puts@s,c
  9136  0008B2  0EFF               	movlw	high STR_3
  9137  0008B4  6E15               	movwf	uart_puts@s+1,c
  9138  0008B6  ECCC  F012         	call	_uart_puts	;wreg free
  9139                           
  9140                           ;esic.c: 53: uart_put_int(house); uart_put(',');
  9141  0008BA  C071  F02B         	movff	esicPrint@house,uart_put_int@input
  9142  0008BE  6A2C               	clrf	uart_put_int@input+1,c
  9143  0008C0  EC31  F00D         	call	_uart_put_int	;wreg free
  9144  0008C4  0E2C               	movlw	44
  9145  0008C6  ECF8  F012         	call	_uart_put
  9146                           
  9147                           ;esic.c: 54: uart_put_int(channel); uart_put(',');
  9148  0008CA  C072  F02B         	movff	esicPrint@channel,uart_put_int@input
  9149  0008CE  6A2C               	clrf	uart_put_int@input+1,c
  9150  0008D0  EC31  F00D         	call	_uart_put_int	;wreg free
  9151  0008D4  0E2C               	movlw	44
  9152  0008D6  ECF8  F012         	call	_uart_put
  9153                           
  9154                           ;esic.c: 55: if(temperature < 0){
  9155  0008DA  0100               	movlb	0	; () banked
  9156  0008DC  AF7B               	btfss	(esicPrint@temperature+3)& (0+255),7,b
  9157  0008DE  D01E               	goto	l4994
  9158                           
  9159                           ; BSR set to: 0
  9160                           ;esic.c: 56: uart_put('-');
  9161  0008E0  0E2D               	movlw	45
  9162  0008E2  ECF8  F012         	call	_uart_put
  9163                           
  9164                           ;esic.c: 57: temperature *= -1;
  9165  0008E6  C078  F011         	movff	esicPrint@temperature,___lmul@multiplier
  9166  0008EA  C079  F012         	movff	esicPrint@temperature+1,___lmul@multiplier+1
  9167  0008EE  C07A  F013         	movff	esicPrint@temperature+2,___lmul@multiplier+2
  9168  0008F2  C07B  F014         	movff	esicPrint@temperature+3,___lmul@multiplier+3
  9169  0008F6  0EFF               	movlw	255
  9170  0008F8  6E15               	movwf	___lmul@multiplicand,c
  9171  0008FA  0EFF               	movlw	255
  9172  0008FC  6E16               	movwf	___lmul@multiplicand+1,c
  9173  0008FE  0EFF               	movlw	255
  9174  000900  6E17               	movwf	___lmul@multiplicand+2,c
  9175  000902  0EFF               	movlw	255
  9176  000904  6E18               	movwf	___lmul@multiplicand+3,c
  9177  000906  EC73  F012         	call	___lmul	;wreg free
  9178  00090A  C011  F078         	movff	?___lmul,esicPrint@temperature
  9179  00090E  C012  F079         	movff	?___lmul+1,esicPrint@temperature+1
  9180  000912  C013  F07A         	movff	?___lmul+2,esicPrint@temperature+2
  9181  000916  C014  F07B         	movff	?___lmul+3,esicPrint@temperature+3
  9182  00091A  D000               	goto	l4994
  9183  00091C                     l4994:
  9184                           
  9185                           ;esic.c: 58: }
  9186                           ;esic.c: 59: uart_put_int(temperature/10); uart_put('.'); uart_put_int(temperature%10); 
      +                          uart_put(',');
  9187  00091C  C078  F01D         	movff	esicPrint@temperature,___aldiv@dividend
  9188  000920  C079  F01E         	movff	esicPrint@temperature+1,___aldiv@dividend+1
  9189  000924  C07A  F01F         	movff	esicPrint@temperature+2,___aldiv@dividend+2
  9190  000928  C07B  F020         	movff	esicPrint@temperature+3,___aldiv@dividend+3
  9191  00092C  0E0A               	movlw	10
  9192  00092E  6E21               	movwf	___aldiv@divisor,c
  9193  000930  0E00               	movlw	0
  9194  000932  6E22               	movwf	___aldiv@divisor+1,c
  9195  000934  0E00               	movlw	0
  9196  000936  6E23               	movwf	___aldiv@divisor+2,c
  9197  000938  0E00               	movlw	0
  9198  00093A  6E24               	movwf	___aldiv@divisor+3,c
  9199  00093C  EC2E  F00E         	call	___aldiv	;wreg free
  9200  000940  C01D  F02B         	movff	?___aldiv,uart_put_int@input
  9201  000944  C01E  F02C         	movff	?___aldiv+1,uart_put_int@input+1
  9202  000948  EC31  F00D         	call	_uart_put_int	;wreg free
  9203  00094C  0E2E               	movlw	46
  9204  00094E  ECF8  F012         	call	_uart_put
  9205  000952  C078  F011         	movff	esicPrint@temperature,___almod@dividend
  9206  000956  C079  F012         	movff	esicPrint@temperature+1,___almod@dividend+1
  9207  00095A  C07A  F013         	movff	esicPrint@temperature+2,___almod@dividend+2
  9208  00095E  C07B  F014         	movff	esicPrint@temperature+3,___almod@dividend+3
  9209  000962  0E0A               	movlw	10
  9210  000964  6E15               	movwf	___almod@divisor,c
  9211  000966  0E00               	movlw	0
  9212  000968  6E16               	movwf	___almod@divisor+1,c
  9213  00096A  0E00               	movlw	0
  9214  00096C  6E17               	movwf	___almod@divisor+2,c
  9215  00096E  0E00               	movlw	0
  9216  000970  6E18               	movwf	___almod@divisor+3,c
  9217  000972  EC32  F010         	call	___almod	;wreg free
  9218  000976  C011  F02B         	movff	?___almod,uart_put_int@input
  9219  00097A  C012  F02C         	movff	?___almod+1,uart_put_int@input+1
  9220  00097E  EC31  F00D         	call	_uart_put_int	;wreg free
  9221  000982  0E2C               	movlw	44
  9222  000984  ECF8  F012         	call	_uart_put
  9223                           
  9224                           ;esic.c: 60: uart_put_int(humidity/2); uart_put(',');
  9225  000988  C073  F011         	movff	esicPrint@humidity,___awdiv@dividend
  9226  00098C  6A12               	clrf	___awdiv@dividend+1,c
  9227  00098E  0E00               	movlw	0
  9228  000990  6E14               	movwf	___awdiv@divisor+1,c
  9229  000992  0E02               	movlw	2
  9230  000994  6E13               	movwf	___awdiv@divisor,c
  9231  000996  EC91  F010         	call	___awdiv	;wreg free
  9232  00099A  C011  F02B         	movff	?___awdiv,uart_put_int@input
  9233  00099E  C012  F02C         	movff	?___awdiv+1,uart_put_int@input+1
  9234  0009A2  EC31  F00D         	call	_uart_put_int	;wreg free
  9235  0009A6  0E2C               	movlw	44
  9236  0009A8  ECF8  F012         	call	_uart_put
  9237                           
  9238                           ;esic.c: 61: uart_put(lowbatt + '0');
  9239  0009AC  0100               	movlb	0	; () banked
  9240  0009AE  5174               	movf	esicPrint@lowbatt& (0+255),w,b
  9241  0009B0  0F30               	addlw	48
  9242  0009B2  ECF8  F012         	call	_uart_put
  9243                           
  9244                           ;esic.c: 62: uart_puts("\r\n");
  9245  0009B6  0E7F               	movlw	low (STR_9+29)
  9246  0009B8  6E14               	movwf	uart_puts@s,c
  9247  0009BA  0EFE               	movlw	high (STR_9+29)
  9248  0009BC  6E15               	movwf	uart_puts@s+1,c
  9249  0009BE  ECCC  F012         	call	_uart_puts	;wreg free
  9250                           
  9251                           ;esic.c: 63: blinkRxLed();
  9252  0009C2  ECD4  F014         	call	_blinkRxLed	;wreg free
  9253  0009C6  0012               	return	
  9254  0009C8  0012               	return		;funcret
  9255  0009CA                     __end_of_esicPrint:
  9256                           	opt stack 0
  9257                           tblptru	equ	0xFF8
  9258                           tblptrh	equ	0xFF7
  9259                           tblptrl	equ	0xFF6
  9260                           tablat	equ	0xFF5
  9261                           prodh	equ	0xFF4
  9262                           prodl	equ	0xFF3
  9263                           intcon	equ	0xFF2
  9264                           intcon3	equ	0xFF0
  9265                           postinc0	equ	0xFEE
  9266                           wreg	equ	0xFE8
  9267                           indf1	equ	0xFE7
  9268                           postdec1	equ	0xFE5
  9269                           fsr1h	equ	0xFE2
  9270                           fsr1l	equ	0xFE1
  9271                           indf2	equ	0xFDF
  9272                           postinc2	equ	0xFDE
  9273                           fsr2h	equ	0xFDA
  9274                           fsr2l	equ	0xFD9
  9275                           status	equ	0xFD8
  9276                           
  9277 ;; *************** function _uart_put_int *****************
  9278 ;; Defined at:
  9279 ;;		line 73 in file "../uart.c"
  9280 ;; Parameters:    Size  Location     Type
  9281 ;;  input           2   42[COMRAM] unsigned int 
  9282 ;; Auto vars:     Size  Location     Type
  9283 ;;  j               1   10[BANK0 ] char 
  9284 ;;  buffer          7    0[BANK0 ] unsigned char [7]
  9285 ;;  temp            2    8[BANK0 ] unsigned int 
  9286 ;;  stop            1   11[BANK0 ] unsigned char 
  9287 ;;  start           1    7[BANK0 ] unsigned char 
  9288 ;; Return value:  Size  Location     Type
  9289 ;;		None               void
  9290 ;; Registers used:
  9291 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9292 ;; Tracked objects:
  9293 ;;		On entry : 0/0
  9294 ;;		On exit  : 0/0
  9295 ;;		Unchanged: 0/0
  9296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9297 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9298 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9299 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9300 ;;      Totals:         4      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9301 ;;Total ram usage:       16 bytes
  9302 ;; Hardware stack levels used:    1
  9303 ;; Hardware stack levels required when called:    4
  9304 ;; This function calls:
  9305 ;;		___lwdiv
  9306 ;;		___lwmod
  9307 ;;		_uart_puts
  9308 ;; This function is called by:
  9309 ;;		_esicPrint
  9310 ;;		_parseSettings
  9311 ;; This function uses a non-reentrant model
  9312 ;;
  9313                           
  9314                           	psect	text39
  9315  001A62                     __ptext39:
  9316                           	opt stack 0
  9317  001A62                     _uart_put_int:
  9318                           	opt stack 24
  9319                           
  9320                           ;uart.c: 74: char buffer[7];
  9321                           ;uart.c: 75: char start = 0;
  9322                           
  9323                           ;incstack = 0
  9324  001A62  0E00               	movlw	0
  9325  001A64  0100               	movlb	0	; () banked
  9326  001A66  6F67               	movwf	uart_put_int@start& (0+255),b
  9327                           
  9328                           ;uart.c: 76: char stop = 0;
  9329  001A68  0E00               	movlw	0
  9330  001A6A  0100               	movlb	0	; () banked
  9331  001A6C  6F6B               	movwf	uart_put_int@stop& (0+255),b
  9332                           
  9333                           ; BSR set to: 0
  9334                           ;uart.c: 77: if(input > 0b0111111111111111){
  9335  001A6E  0E80               	movlw	128
  9336  001A70  5C2C               	subwf	uart_put_int@input+1,w,c
  9337  001A72  A0D8               	btfss	status,0,c
  9338  001A74  D00E               	goto	l4904
  9339                           
  9340                           ; BSR set to: 0
  9341                           ;uart.c: 78: buffer[0] = '-';
  9342  001A76  0E2D               	movlw	45
  9343  001A78  0100               	movlb	0	; () banked
  9344  001A7A  6F60               	movwf	uart_put_int@buffer& (0+255),b
  9345                           
  9346                           ;uart.c: 79: start = 1;
  9347  001A7C  0E01               	movlw	1
  9348  001A7E  0100               	movlb	0	; () banked
  9349  001A80  6F67               	movwf	uart_put_int@start& (0+255),b
  9350                           
  9351                           ;uart.c: 80: stop = 1;
  9352  001A82  0E01               	movlw	1
  9353  001A84  0100               	movlb	0	; () banked
  9354  001A86  6F6B               	movwf	uart_put_int@stop& (0+255),b
  9355                           
  9356                           ; BSR set to: 0
  9357                           ;uart.c: 81: input = (input^0b1111111111111111) + 1;
  9358  001A88  6C2B               	negf	uart_put_int@input,c
  9359  001A8A  1E2C               	comf	uart_put_int@input+1,f,c
  9360  001A8C  B0D8               	btfsc	status,0,c
  9361  001A8E  2A2C               	incf	uart_put_int@input+1,f,c
  9362  001A90  D000               	goto	l4904
  9363  001A92                     l4904:
  9364                           
  9365                           ; BSR set to: 0
  9366                           ;uart.c: 82: }
  9367                           ;uart.c: 83: unsigned int temp = input;
  9368  001A92  C02B  F068         	movff	uart_put_int@input,uart_put_int@temp
  9369  001A96  C02C  F069         	movff	uart_put_int@input+1,uart_put_int@temp+1
  9370                           
  9371                           ;uart.c: 84: while(temp >= 10){
  9372  001A9A  D011               	goto	l4910
  9373  001A9C                     l4906:
  9374                           
  9375                           ; BSR set to: 0
  9376                           ;uart.c: 85: stop += 1;
  9377  001A9C  0100               	movlb	0	; () banked
  9378  001A9E  2B6B               	incf	uart_put_int@stop& (0+255),f,b
  9379                           
  9380                           ; BSR set to: 0
  9381                           ;uart.c: 86: temp /= 10;
  9382  001AA0  C068  F011         	movff	uart_put_int@temp,___lwdiv@dividend
  9383  001AA4  C069  F012         	movff	uart_put_int@temp+1,___lwdiv@dividend+1
  9384  001AA8  0E00               	movlw	0
  9385  001AAA  6E14               	movwf	___lwdiv@divisor+1,c
  9386  001AAC  0E0A               	movlw	10
  9387  001AAE  6E13               	movwf	___lwdiv@divisor,c
  9388  001AB0  EC45  F012         	call	___lwdiv	;wreg free
  9389  001AB4  C011  F068         	movff	?___lwdiv,uart_put_int@temp
  9390  001AB8  C012  F069         	movff	?___lwdiv+1,uart_put_int@temp+1
  9391  001ABC  D000               	goto	l4910
  9392  001ABE                     l4910:
  9393  001ABE  0100               	movlb	0	; () banked
  9394  001AC0  5169               	movf	(uart_put_int@temp+1)& (0+255),w,b
  9395  001AC2  E1EC               	bnz	l4906
  9396  001AC4  0E0A               	movlw	10
  9397  001AC6  0100               	movlb	0	; () banked
  9398  001AC8  5D68               	subwf	uart_put_int@temp& (0+255),w,b
  9399  001ACA  B0D8               	btfsc	status,0,c
  9400  001ACC  D7E7               	goto	l4906
  9401                           
  9402                           ; BSR set to: 0
  9403                           ;uart.c: 87: }
  9404                           ;uart.c: 88: for (signed char j=stop; j>=start; j--){
  9405  001ACE  C06B  F06A         	movff	uart_put_int@stop,uart_put_int@j
  9406  001AD2  D027               	goto	l4918
  9407  001AD4                     l4912:
  9408                           
  9409                           ; BSR set to: 0
  9410                           ;uart.c: 89: buffer[j] = input%10 + '0';
  9411  001AD4  0100               	movlb	0	; () banked
  9412  001AD6  516A               	movf	uart_put_int@j& (0+255),w,b
  9413  001AD8  0D01               	mullw	1
  9414  001ADA  0E60               	movlw	low uart_put_int@buffer
  9415  001ADC  24F3               	addwf	prodl,w,c
  9416  001ADE  6ED9               	movwf	fsr2l,c
  9417  001AE0  0E00               	movlw	high uart_put_int@buffer
  9418  001AE2  20F4               	addwfc	prodh,w,c
  9419  001AE4  6EDA               	movwf	fsr2h,c
  9420  001AE6  C02B  F011         	movff	uart_put_int@input,___lwmod@dividend
  9421  001AEA  C02C  F012         	movff	uart_put_int@input+1,___lwmod@dividend+1
  9422  001AEE  0E00               	movlw	0
  9423  001AF0  6E14               	movwf	___lwmod@divisor+1,c
  9424  001AF2  0E0A               	movlw	10
  9425  001AF4  6E13               	movwf	___lwmod@divisor,c
  9426  001AF6  EC4E  F013         	call	___lwmod	;wreg free
  9427  001AFA  5011               	movf	?___lwmod,w,c
  9428  001AFC  0F30               	addlw	48
  9429  001AFE  6EDF               	movwf	indf2,c
  9430                           
  9431                           ;uart.c: 90: input /= 10;
  9432  001B00  C02B  F011         	movff	uart_put_int@input,___lwdiv@dividend
  9433  001B04  C02C  F012         	movff	uart_put_int@input+1,___lwdiv@dividend+1
  9434  001B08  0E00               	movlw	0
  9435  001B0A  6E14               	movwf	___lwdiv@divisor+1,c
  9436  001B0C  0E0A               	movlw	10
  9437  001B0E  6E13               	movwf	___lwdiv@divisor,c
  9438  001B10  EC45  F012         	call	___lwdiv	;wreg free
  9439  001B14  C011  F02B         	movff	?___lwdiv,uart_put_int@input
  9440  001B18  C012  F02C         	movff	?___lwdiv+1,uart_put_int@input+1
  9441  001B1C  0100               	movlb	0	; () banked
  9442  001B1E  076A               	decf	uart_put_int@j& (0+255),f,b
  9443  001B20  D000               	goto	l4918
  9444  001B22                     l4918:
  9445                           
  9446                           ; BSR set to: 0
  9447  001B22  0100               	movlb	0	; () banked
  9448  001B24  5167               	movf	uart_put_int@start& (0+255),w,b
  9449  001B26  90D8               	bcf	status,0,c
  9450  001B28  0100               	movlb	0	; () banked
  9451  001B2A  AF6A               	btfss	uart_put_int@j& (0+255),7,b
  9452  001B2C  5D6A               	subwf	uart_put_int@j& (0+255),w,b
  9453  001B2E  B0D8               	btfsc	status,0,c
  9454  001B30  80D8               	bsf	status,0,c
  9455  001B32  B0D8               	btfsc	status,0,c
  9456  001B34  D7CF               	goto	l4912
  9457                           
  9458                           ; BSR set to: 0
  9459                           ;uart.c: 91: }
  9460                           ;uart.c: 92: buffer[stop+1] = 0;
  9461                           
  9462                           ; BSR set to: 0
  9463  001B36  0100               	movlb	0	; () banked
  9464  001B38  516B               	movf	uart_put_int@stop& (0+255),w,b
  9465  001B3A  6E2D               	movwf	??_uart_put_int& (0+255),c
  9466  001B3C  6A2E               	clrf	(??_uart_put_int+1)& (0+255),c
  9467  001B3E  0E01               	movlw	1
  9468  001B40  262D               	addwf	??_uart_put_int,f,c
  9469  001B42  0E00               	movlw	0
  9470  001B44  222E               	addwfc	??_uart_put_int+1,f,c
  9471  001B46  0E60               	movlw	low uart_put_int@buffer
  9472  001B48  242D               	addwf	??_uart_put_int,w,c
  9473  001B4A  6ED9               	movwf	fsr2l,c
  9474  001B4C  0E00               	movlw	high uart_put_int@buffer
  9475  001B4E  202E               	addwfc	??_uart_put_int+1,w,c
  9476  001B50  6EDA               	movwf	fsr2h,c
  9477  001B52  0E00               	movlw	0
  9478  001B54  6EDF               	movwf	indf2,c
  9479                           
  9480                           ; BSR set to: 0
  9481                           ;uart.c: 93: uart_puts(&buffer);
  9482  001B56  0E60               	movlw	low uart_put_int@buffer
  9483  001B58  6E14               	movwf	uart_puts@s,c
  9484  001B5A  0E00               	movlw	high uart_put_int@buffer
  9485  001B5C  6E15               	movwf	uart_puts@s+1,c
  9486  001B5E  ECCC  F012         	call	_uart_puts	;wreg free
  9487  001B62  0012               	return		;funcret
  9488  001B64                     __end_of_uart_put_int:
  9489                           	opt stack 0
  9490                           tblptru	equ	0xFF8
  9491                           tblptrh	equ	0xFF7
  9492                           tblptrl	equ	0xFF6
  9493                           tablat	equ	0xFF5
  9494                           prodh	equ	0xFF4
  9495                           prodl	equ	0xFF3
  9496                           intcon	equ	0xFF2
  9497                           intcon3	equ	0xFF0
  9498                           postinc0	equ	0xFEE
  9499                           wreg	equ	0xFE8
  9500                           indf1	equ	0xFE7
  9501                           postdec1	equ	0xFE5
  9502                           fsr1h	equ	0xFE2
  9503                           fsr1l	equ	0xFE1
  9504                           indf2	equ	0xFDF
  9505                           postinc2	equ	0xFDE
  9506                           fsr2h	equ	0xFDA
  9507                           fsr2l	equ	0xFD9
  9508                           status	equ	0xFD8
  9509                           
  9510 ;; *************** function ___lwmod *****************
  9511 ;; Defined at:
  9512 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwmod.c"
  9513 ;; Parameters:    Size  Location     Type
  9514 ;;  dividend        2   16[COMRAM] unsigned int 
  9515 ;;  divisor         2   18[COMRAM] unsigned int 
  9516 ;; Auto vars:     Size  Location     Type
  9517 ;;  counter         1   20[COMRAM] unsigned char 
  9518 ;; Return value:  Size  Location     Type
  9519 ;;                  2   16[COMRAM] unsigned int 
  9520 ;; Registers used:
  9521 ;;		wreg, status,2, status,0
  9522 ;; Tracked objects:
  9523 ;;		On entry : 0/0
  9524 ;;		On exit  : 0/0
  9525 ;;		Unchanged: 0/0
  9526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9527 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9528 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9530 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9531 ;;Total ram usage:        5 bytes
  9532 ;; Hardware stack levels used:    1
  9533 ;; Hardware stack levels required when called:    2
  9534 ;; This function calls:
  9535 ;;		Nothing
  9536 ;; This function is called by:
  9537 ;;		_uart_put_int
  9538 ;; This function uses a non-reentrant model
  9539 ;;
  9540                           
  9541                           	psect	text40
  9542  00269C                     __ptext40:
  9543                           	opt stack 0
  9544  00269C                     ___lwmod:
  9545                           	opt stack 25
  9546                           
  9547                           ;incstack = 0
  9548  00269C  5013               	movf	___lwmod@divisor,w,c
  9549  00269E  1014               	iorwf	___lwmod@divisor+1,w,c
  9550  0026A0  B4D8               	btfsc	status,2,c
  9551  0026A2  D01D               	goto	l1343
  9552  0026A4  0E01               	movlw	1
  9553  0026A6  6E15               	movwf	___lwmod@counter,c
  9554  0026A8  D005               	goto	l4880
  9555  0026AA                     l4878:
  9556  0026AA  90D8               	bcf	status,0,c
  9557  0026AC  3613               	rlcf	___lwmod@divisor,f,c
  9558  0026AE  3614               	rlcf	___lwmod@divisor+1,f,c
  9559  0026B0  2A15               	incf	___lwmod@counter,f,c
  9560  0026B2  D000               	goto	l4880
  9561  0026B4                     l4880:
  9562  0026B4  BE14               	btfsc	___lwmod@divisor+1,7,c
  9563  0026B6  D002               	goto	l4882
  9564  0026B8  D7F8               	goto	l4878
  9565  0026BA  D000               	goto	l4882
  9566  0026BC                     l4882:
  9567  0026BC  5013               	movf	___lwmod@divisor,w,c
  9568  0026BE  5C11               	subwf	___lwmod@dividend,w,c
  9569  0026C0  5014               	movf	___lwmod@divisor+1,w,c
  9570  0026C2  5812               	subwfb	___lwmod@dividend+1,w,c
  9571  0026C4  A0D8               	btfss	status,0,c
  9572  0026C6  D005               	goto	l4886
  9573  0026C8  5013               	movf	___lwmod@divisor,w,c
  9574  0026CA  5E11               	subwf	___lwmod@dividend,f,c
  9575  0026CC  5014               	movf	___lwmod@divisor+1,w,c
  9576  0026CE  5A12               	subwfb	___lwmod@dividend+1,f,c
  9577  0026D0  D000               	goto	l4886
  9578  0026D2                     l4886:
  9579  0026D2  90D8               	bcf	status,0,c
  9580  0026D4  3214               	rrcf	___lwmod@divisor+1,f,c
  9581  0026D6  3213               	rrcf	___lwmod@divisor,f,c
  9582  0026D8  2E15               	decfsz	___lwmod@counter,f,c
  9583  0026DA  D7F0               	goto	l4882
  9584  0026DC  D000               	goto	l1343
  9585  0026DE                     l1343:
  9586  0026DE  C011  F011         	movff	___lwmod@dividend,?___lwmod
  9587  0026E2  C012  F012         	movff	___lwmod@dividend+1,?___lwmod+1
  9588  0026E6  0012               	return		;funcret
  9589  0026E8                     __end_of___lwmod:
  9590                           	opt stack 0
  9591                           tblptru	equ	0xFF8
  9592                           tblptrh	equ	0xFF7
  9593                           tblptrl	equ	0xFF6
  9594                           tablat	equ	0xFF5
  9595                           prodh	equ	0xFF4
  9596                           prodl	equ	0xFF3
  9597                           intcon	equ	0xFF2
  9598                           intcon3	equ	0xFF0
  9599                           postinc0	equ	0xFEE
  9600                           wreg	equ	0xFE8
  9601                           indf1	equ	0xFE7
  9602                           postdec1	equ	0xFE5
  9603                           fsr1h	equ	0xFE2
  9604                           fsr1l	equ	0xFE1
  9605                           indf2	equ	0xFDF
  9606                           postinc2	equ	0xFDE
  9607                           fsr2h	equ	0xFDA
  9608                           fsr2l	equ	0xFD9
  9609                           status	equ	0xFD8
  9610                           
  9611 ;; *************** function ___lwdiv *****************
  9612 ;; Defined at:
  9613 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwdiv.c"
  9614 ;; Parameters:    Size  Location     Type
  9615 ;;  dividend        2   16[COMRAM] unsigned int 
  9616 ;;  divisor         2   18[COMRAM] unsigned int 
  9617 ;; Auto vars:     Size  Location     Type
  9618 ;;  quotient        2   21[COMRAM] unsigned int 
  9619 ;;  counter         1   20[COMRAM] unsigned char 
  9620 ;; Return value:  Size  Location     Type
  9621 ;;                  2   16[COMRAM] unsigned int 
  9622 ;; Registers used:
  9623 ;;		wreg, status,2, status,0
  9624 ;; Tracked objects:
  9625 ;;		On entry : 0/0
  9626 ;;		On exit  : 0/0
  9627 ;;		Unchanged: 0/0
  9628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9629 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9630 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9632 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9633 ;;Total ram usage:        7 bytes
  9634 ;; Hardware stack levels used:    1
  9635 ;; Hardware stack levels required when called:    2
  9636 ;; This function calls:
  9637 ;;		Nothing
  9638 ;; This function is called by:
  9639 ;;		_uart_put_int
  9640 ;; This function uses a non-reentrant model
  9641 ;;
  9642                           
  9643                           	psect	text41
  9644  00248A                     __ptext41:
  9645                           	opt stack 0
  9646  00248A                     ___lwdiv:
  9647                           	opt stack 25
  9648                           
  9649                           ;incstack = 0
  9650  00248A  0E00               	movlw	0
  9651  00248C  6E17               	movwf	___lwdiv@quotient+1,c
  9652  00248E  0E00               	movlw	0
  9653  002490  6E16               	movwf	___lwdiv@quotient,c
  9654  002492  5013               	movf	___lwdiv@divisor,w,c
  9655  002494  1014               	iorwf	___lwdiv@divisor+1,w,c
  9656  002496  B4D8               	btfsc	status,2,c
  9657  002498  D021               	goto	l1333
  9658  00249A  0E01               	movlw	1
  9659  00249C  6E15               	movwf	___lwdiv@counter,c
  9660  00249E  D005               	goto	l4860
  9661  0024A0                     l4858:
  9662  0024A0  90D8               	bcf	status,0,c
  9663  0024A2  3613               	rlcf	___lwdiv@divisor,f,c
  9664  0024A4  3614               	rlcf	___lwdiv@divisor+1,f,c
  9665  0024A6  2A15               	incf	___lwdiv@counter,f,c
  9666  0024A8  D000               	goto	l4860
  9667  0024AA                     l4860:
  9668  0024AA  BE14               	btfsc	___lwdiv@divisor+1,7,c
  9669  0024AC  D002               	goto	l4862
  9670  0024AE  D7F8               	goto	l4858
  9671  0024B0  D000               	goto	l4862
  9672  0024B2                     l4862:
  9673  0024B2  90D8               	bcf	status,0,c
  9674  0024B4  3616               	rlcf	___lwdiv@quotient,f,c
  9675  0024B6  3617               	rlcf	___lwdiv@quotient+1,f,c
  9676  0024B8  5013               	movf	___lwdiv@divisor,w,c
  9677  0024BA  5C11               	subwf	___lwdiv@dividend,w,c
  9678  0024BC  5014               	movf	___lwdiv@divisor+1,w,c
  9679  0024BE  5812               	subwfb	___lwdiv@dividend+1,w,c
  9680  0024C0  A0D8               	btfss	status,0,c
  9681  0024C2  D006               	goto	l4870
  9682  0024C4  5013               	movf	___lwdiv@divisor,w,c
  9683  0024C6  5E11               	subwf	___lwdiv@dividend,f,c
  9684  0024C8  5014               	movf	___lwdiv@divisor+1,w,c
  9685  0024CA  5A12               	subwfb	___lwdiv@dividend+1,f,c
  9686  0024CC  8016               	bsf	___lwdiv@quotient,0,c
  9687  0024CE  D000               	goto	l4870
  9688  0024D0                     l4870:
  9689  0024D0  90D8               	bcf	status,0,c
  9690  0024D2  3214               	rrcf	___lwdiv@divisor+1,f,c
  9691  0024D4  3213               	rrcf	___lwdiv@divisor,f,c
  9692  0024D6  2E15               	decfsz	___lwdiv@counter,f,c
  9693  0024D8  D7EC               	goto	l4862
  9694  0024DA  D000               	goto	l1333
  9695  0024DC                     l1333:
  9696  0024DC  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  9697  0024E0  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9698  0024E4  0012               	return		;funcret
  9699  0024E6                     __end_of___lwdiv:
  9700                           	opt stack 0
  9701                           tblptru	equ	0xFF8
  9702                           tblptrh	equ	0xFF7
  9703                           tblptrl	equ	0xFF6
  9704                           tablat	equ	0xFF5
  9705                           prodh	equ	0xFF4
  9706                           prodl	equ	0xFF3
  9707                           intcon	equ	0xFF2
  9708                           intcon3	equ	0xFF0
  9709                           postinc0	equ	0xFEE
  9710                           wreg	equ	0xFE8
  9711                           indf1	equ	0xFE7
  9712                           postdec1	equ	0xFE5
  9713                           fsr1h	equ	0xFE2
  9714                           fsr1l	equ	0xFE1
  9715                           indf2	equ	0xFDF
  9716                           postinc2	equ	0xFDE
  9717                           fsr2h	equ	0xFDA
  9718                           fsr2l	equ	0xFD9
  9719                           status	equ	0xFD8
  9720                           
  9721 ;; *************** function ___lmul *****************
  9722 ;; Defined at:
  9723 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/Umul32.c"
  9724 ;; Parameters:    Size  Location     Type
  9725 ;;  multiplier      4   16[COMRAM] unsigned long 
  9726 ;;  multiplicand    4   20[COMRAM] unsigned long 
  9727 ;; Auto vars:     Size  Location     Type
  9728 ;;  product         4   24[COMRAM] unsigned long 
  9729 ;; Return value:  Size  Location     Type
  9730 ;;                  4   16[COMRAM] unsigned long 
  9731 ;; Registers used:
  9732 ;;		wreg, status,2, status,0
  9733 ;; Tracked objects:
  9734 ;;		On entry : 0/0
  9735 ;;		On exit  : 0/0
  9736 ;;		Unchanged: 0/0
  9737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9738 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9739 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9741 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9742 ;;Total ram usage:       12 bytes
  9743 ;; Hardware stack levels used:    1
  9744 ;; Hardware stack levels required when called:    2
  9745 ;; This function calls:
  9746 ;;		Nothing
  9747 ;; This function is called by:
  9748 ;;		_esicPrint
  9749 ;; This function uses a non-reentrant model
  9750 ;;
  9751                           
  9752                           	psect	text42
  9753  0024E6                     __ptext42:
  9754                           	opt stack 0
  9755  0024E6                     ___lmul:
  9756                           	opt stack 26
  9757                           
  9758                           ;incstack = 0
  9759  0024E6  0E00               	movlw	0
  9760  0024E8  6E19               	movwf	___lmul@product,c
  9761  0024EA  0E00               	movlw	0
  9762  0024EC  6E1A               	movwf	___lmul@product+1,c
  9763  0024EE  0E00               	movlw	0
  9764  0024F0  6E1B               	movwf	___lmul@product+2,c
  9765  0024F2  0E00               	movlw	0
  9766  0024F4  6E1C               	movwf	___lmul@product+3,c
  9767  0024F6  D000               	goto	l3414
  9768  0024F8                     l3414:
  9769  0024F8  A011               	btfss	___lmul@multiplier,0,c
  9770  0024FA  D009               	goto	l3418
  9771  0024FC  5015               	movf	___lmul@multiplicand,w,c
  9772  0024FE  2619               	addwf	___lmul@product,f,c
  9773  002500  5016               	movf	___lmul@multiplicand+1,w,c
  9774  002502  221A               	addwfc	___lmul@product+1,f,c
  9775  002504  5017               	movf	___lmul@multiplicand+2,w,c
  9776  002506  221B               	addwfc	___lmul@product+2,f,c
  9777  002508  5018               	movf	___lmul@multiplicand+3,w,c
  9778  00250A  221C               	addwfc	___lmul@product+3,f,c
  9779  00250C  D000               	goto	l3418
  9780  00250E                     l3418:
  9781  00250E  90D8               	bcf	status,0,c
  9782  002510  3615               	rlcf	___lmul@multiplicand,f,c
  9783  002512  3616               	rlcf	___lmul@multiplicand+1,f,c
  9784  002514  3617               	rlcf	___lmul@multiplicand+2,f,c
  9785  002516  3618               	rlcf	___lmul@multiplicand+3,f,c
  9786  002518  90D8               	bcf	status,0,c
  9787  00251A  3214               	rrcf	___lmul@multiplier+3,f,c
  9788  00251C  3213               	rrcf	___lmul@multiplier+2,f,c
  9789  00251E  3212               	rrcf	___lmul@multiplier+1,f,c
  9790  002520  3211               	rrcf	___lmul@multiplier,f,c
  9791  002522  5011               	movf	___lmul@multiplier,w,c
  9792  002524  1012               	iorwf	___lmul@multiplier+1,w,c
  9793  002526  1013               	iorwf	___lmul@multiplier+2,w,c
  9794  002528  1014               	iorwf	___lmul@multiplier+3,w,c
  9795  00252A  A4D8               	btfss	status,2,c
  9796  00252C  D7E5               	goto	l3414
  9797  00252E  C019  F011         	movff	___lmul@product,?___lmul
  9798  002532  C01A  F012         	movff	___lmul@product+1,?___lmul+1
  9799  002536  C01B  F013         	movff	___lmul@product+2,?___lmul+2
  9800  00253A  C01C  F014         	movff	___lmul@product+3,?___lmul+3
  9801  00253E  0012               	return		;funcret
  9802  002540                     __end_of___lmul:
  9803                           	opt stack 0
  9804                           tblptru	equ	0xFF8
  9805                           tblptrh	equ	0xFF7
  9806                           tblptrl	equ	0xFF6
  9807                           tablat	equ	0xFF5
  9808                           prodh	equ	0xFF4
  9809                           prodl	equ	0xFF3
  9810                           intcon	equ	0xFF2
  9811                           intcon3	equ	0xFF0
  9812                           postinc0	equ	0xFEE
  9813                           wreg	equ	0xFE8
  9814                           indf1	equ	0xFE7
  9815                           postdec1	equ	0xFE5
  9816                           fsr1h	equ	0xFE2
  9817                           fsr1l	equ	0xFE1
  9818                           indf2	equ	0xFDF
  9819                           postinc2	equ	0xFDE
  9820                           fsr2h	equ	0xFDA
  9821                           fsr2l	equ	0xFD9
  9822                           status	equ	0xFD8
  9823                           
  9824 ;; *************** function ___awdiv *****************
  9825 ;; Defined at:
  9826 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/awdiv.c"
  9827 ;; Parameters:    Size  Location     Type
  9828 ;;  dividend        2   16[COMRAM] int 
  9829 ;;  divisor         2   18[COMRAM] int 
  9830 ;; Auto vars:     Size  Location     Type
  9831 ;;  quotient        2   22[COMRAM] int 
  9832 ;;  sign            1   21[COMRAM] unsigned char 
  9833 ;;  counter         1   20[COMRAM] unsigned char 
  9834 ;; Return value:  Size  Location     Type
  9835 ;;                  2   16[COMRAM] int 
  9836 ;; Registers used:
  9837 ;;		wreg, status,2, status,0
  9838 ;; Tracked objects:
  9839 ;;		On entry : 0/0
  9840 ;;		On exit  : 0/0
  9841 ;;		Unchanged: 0/0
  9842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9843 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9844 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9846 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9847 ;;Total ram usage:        8 bytes
  9848 ;; Hardware stack levels used:    1
  9849 ;; Hardware stack levels required when called:    2
  9850 ;; This function calls:
  9851 ;;		Nothing
  9852 ;; This function is called by:
  9853 ;;		_esicPrint
  9854 ;;		_nexaDecode
  9855 ;; This function uses a non-reentrant model
  9856 ;;
  9857                           
  9858                           	psect	text43
  9859  002122                     __ptext43:
  9860                           	opt stack 0
  9861  002122                     ___awdiv:
  9862                           	opt stack 27
  9863                           
  9864                           ;incstack = 0
  9865  002122  0E00               	movlw	0
  9866  002124  6E16               	movwf	___awdiv@sign,c
  9867  002126  AE14               	btfss	___awdiv@divisor+1,7,c
  9868  002128  D007               	goto	l3510
  9869  00212A  6C13               	negf	___awdiv@divisor,c
  9870  00212C  1E14               	comf	___awdiv@divisor+1,f,c
  9871  00212E  B0D8               	btfsc	status,0,c
  9872  002130  2A14               	incf	___awdiv@divisor+1,f,c
  9873  002132  0E01               	movlw	1
  9874  002134  6E16               	movwf	___awdiv@sign,c
  9875  002136  D000               	goto	l3510
  9876  002138                     l3510:
  9877  002138  AE12               	btfss	___awdiv@dividend+1,7,c
  9878  00213A  D007               	goto	l3516
  9879  00213C  6C11               	negf	___awdiv@dividend,c
  9880  00213E  1E12               	comf	___awdiv@dividend+1,f,c
  9881  002140  B0D8               	btfsc	status,0,c
  9882  002142  2A12               	incf	___awdiv@dividend+1,f,c
  9883  002144  0E01               	movlw	1
  9884  002146  1A16               	xorwf	___awdiv@sign,f,c
  9885  002148  D000               	goto	l3516
  9886  00214A                     l3516:
  9887  00214A  0E00               	movlw	0
  9888  00214C  6E18               	movwf	___awdiv@quotient+1,c
  9889  00214E  0E00               	movlw	0
  9890  002150  6E17               	movwf	___awdiv@quotient,c
  9891  002152  5013               	movf	___awdiv@divisor,w,c
  9892  002154  1014               	iorwf	___awdiv@divisor+1,w,c
  9893  002156  B4D8               	btfsc	status,2,c
  9894  002158  D021               	goto	l3538
  9895  00215A  0E01               	movlw	1
  9896  00215C  6E15               	movwf	___awdiv@counter,c
  9897  00215E  D005               	goto	l3524
  9898  002160                     l3522:
  9899  002160  90D8               	bcf	status,0,c
  9900  002162  3613               	rlcf	___awdiv@divisor,f,c
  9901  002164  3614               	rlcf	___awdiv@divisor+1,f,c
  9902  002166  2A15               	incf	___awdiv@counter,f,c
  9903  002168  D000               	goto	l3524
  9904  00216A                     l3524:
  9905  00216A  BE14               	btfsc	___awdiv@divisor+1,7,c
  9906  00216C  D002               	goto	l3526
  9907  00216E  D7F8               	goto	l3522
  9908  002170  D000               	goto	l3526
  9909  002172                     l3526:
  9910  002172  90D8               	bcf	status,0,c
  9911  002174  3617               	rlcf	___awdiv@quotient,f,c
  9912  002176  3618               	rlcf	___awdiv@quotient+1,f,c
  9913  002178  5013               	movf	___awdiv@divisor,w,c
  9914  00217A  5C11               	subwf	___awdiv@dividend,w,c
  9915  00217C  5014               	movf	___awdiv@divisor+1,w,c
  9916  00217E  5812               	subwfb	___awdiv@dividend+1,w,c
  9917  002180  A0D8               	btfss	status,0,c
  9918  002182  D006               	goto	l3534
  9919  002184  5013               	movf	___awdiv@divisor,w,c
  9920  002186  5E11               	subwf	___awdiv@dividend,f,c
  9921  002188  5014               	movf	___awdiv@divisor+1,w,c
  9922  00218A  5A12               	subwfb	___awdiv@dividend+1,f,c
  9923  00218C  8017               	bsf	___awdiv@quotient,0,c
  9924  00218E  D000               	goto	l3534
  9925  002190                     l3534:
  9926  002190  90D8               	bcf	status,0,c
  9927  002192  3214               	rrcf	___awdiv@divisor+1,f,c
  9928  002194  3213               	rrcf	___awdiv@divisor,f,c
  9929  002196  2E15               	decfsz	___awdiv@counter,f,c
  9930  002198  D7EC               	goto	l3526
  9931  00219A  D000               	goto	l3538
  9932  00219C                     l3538:
  9933  00219C  5016               	movf	___awdiv@sign,w,c
  9934  00219E  B4D8               	btfsc	status,2,c
  9935  0021A0  D005               	goto	l3542
  9936  0021A2  6C17               	negf	___awdiv@quotient,c
  9937  0021A4  1E18               	comf	___awdiv@quotient+1,f,c
  9938  0021A6  B0D8               	btfsc	status,0,c
  9939  0021A8  2A18               	incf	___awdiv@quotient+1,f,c
  9940  0021AA  D000               	goto	l3542
  9941  0021AC                     l3542:
  9942  0021AC  C017  F011         	movff	___awdiv@quotient,?___awdiv
  9943  0021B0  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  9944  0021B4  0012               	return	
  9945  0021B6  0012               	return		;funcret
  9946  0021B8                     __end_of___awdiv:
  9947                           	opt stack 0
  9948                           tblptru	equ	0xFF8
  9949                           tblptrh	equ	0xFF7
  9950                           tblptrl	equ	0xFF6
  9951                           tablat	equ	0xFF5
  9952                           prodh	equ	0xFF4
  9953                           prodl	equ	0xFF3
  9954                           intcon	equ	0xFF2
  9955                           intcon3	equ	0xFF0
  9956                           postinc0	equ	0xFEE
  9957                           wreg	equ	0xFE8
  9958                           indf1	equ	0xFE7
  9959                           postdec1	equ	0xFE5
  9960                           fsr1h	equ	0xFE2
  9961                           fsr1l	equ	0xFE1
  9962                           indf2	equ	0xFDF
  9963                           postinc2	equ	0xFDE
  9964                           fsr2h	equ	0xFDA
  9965                           fsr2l	equ	0xFD9
  9966                           status	equ	0xFD8
  9967                           
  9968 ;; *************** function ___almod *****************
  9969 ;; Defined at:
  9970 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/almod.c"
  9971 ;; Parameters:    Size  Location     Type
  9972 ;;  dividend        4   16[COMRAM] long 
  9973 ;;  divisor         4   20[COMRAM] long 
  9974 ;; Auto vars:     Size  Location     Type
  9975 ;;  sign            1   25[COMRAM] unsigned char 
  9976 ;;  counter         1   24[COMRAM] unsigned char 
  9977 ;; Return value:  Size  Location     Type
  9978 ;;                  4   16[COMRAM] long 
  9979 ;; Registers used:
  9980 ;;		wreg, status,2, status,0
  9981 ;; Tracked objects:
  9982 ;;		On entry : 0/0
  9983 ;;		On exit  : 0/0
  9984 ;;		Unchanged: 0/0
  9985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9986 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9987 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9989 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9990 ;;Total ram usage:       10 bytes
  9991 ;; Hardware stack levels used:    1
  9992 ;; Hardware stack levels required when called:    2
  9993 ;; This function calls:
  9994 ;;		Nothing
  9995 ;; This function is called by:
  9996 ;;		_esicPrint
  9997 ;; This function uses a non-reentrant model
  9998 ;;
  9999                           
 10000                           	psect	text44
 10001  002064                     __ptext44:
 10002                           	opt stack 0
 10003  002064                     ___almod:
 10004                           	opt stack 26
 10005                           
 10006                           ;incstack = 0
 10007  002064  0E00               	movlw	0
 10008  002066  6E1A               	movwf	___almod@sign,c
 10009  002068  AE14               	btfss	___almod@dividend+3,7,c
 10010  00206A  D00B               	goto	l3474
 10011  00206C  1E14               	comf	___almod@dividend+3,f,c
 10012  00206E  1E13               	comf	___almod@dividend+2,f,c
 10013  002070  1E12               	comf	___almod@dividend+1,f,c
 10014  002072  6C11               	negf	___almod@dividend,c
 10015  002074  0E00               	movlw	0
 10016  002076  2212               	addwfc	___almod@dividend+1,f,c
 10017  002078  2213               	addwfc	___almod@dividend+2,f,c
 10018  00207A  2214               	addwfc	___almod@dividend+3,f,c
 10019  00207C  0E01               	movlw	1
 10020  00207E  6E1A               	movwf	___almod@sign,c
 10021  002080  D000               	goto	l3474
 10022  002082                     l3474:
 10023  002082  AE18               	btfss	___almod@divisor+3,7,c
 10024  002084  D009               	goto	l3478
 10025  002086  1E18               	comf	___almod@divisor+3,f,c
 10026  002088  1E17               	comf	___almod@divisor+2,f,c
 10027  00208A  1E16               	comf	___almod@divisor+1,f,c
 10028  00208C  6C15               	negf	___almod@divisor,c
 10029  00208E  0E00               	movlw	0
 10030  002090  2216               	addwfc	___almod@divisor+1,f,c
 10031  002092  2217               	addwfc	___almod@divisor+2,f,c
 10032  002094  2218               	addwfc	___almod@divisor+3,f,c
 10033  002096  D000               	goto	l3478
 10034  002098                     l3478:
 10035  002098  5015               	movf	___almod@divisor,w,c
 10036  00209A  1016               	iorwf	___almod@divisor+1,w,c
 10037  00209C  1017               	iorwf	___almod@divisor+2,w,c
 10038  00209E  1018               	iorwf	___almod@divisor+3,w,c
 10039  0020A0  B4D8               	btfsc	status,2,c
 10040  0020A2  D029               	goto	l3494
 10041  0020A4  0E01               	movlw	1
 10042  0020A6  6E19               	movwf	___almod@counter,c
 10043  0020A8  D007               	goto	l3484
 10044  0020AA                     l3482:
 10045  0020AA  90D8               	bcf	status,0,c
 10046  0020AC  3615               	rlcf	___almod@divisor,f,c
 10047  0020AE  3616               	rlcf	___almod@divisor+1,f,c
 10048  0020B0  3617               	rlcf	___almod@divisor+2,f,c
 10049  0020B2  3618               	rlcf	___almod@divisor+3,f,c
 10050  0020B4  2A19               	incf	___almod@counter,f,c
 10051  0020B6  D000               	goto	l3484
 10052  0020B8                     l3484:
 10053  0020B8  BE18               	btfsc	___almod@divisor+3,7,c
 10054  0020BA  D002               	goto	l3486
 10055  0020BC  D7F6               	goto	l3482
 10056  0020BE  D000               	goto	l3486
 10057  0020C0                     l3486:
 10058  0020C0  5015               	movf	___almod@divisor,w,c
 10059  0020C2  5C11               	subwf	___almod@dividend,w,c
 10060  0020C4  5016               	movf	___almod@divisor+1,w,c
 10061  0020C6  5812               	subwfb	___almod@dividend+1,w,c
 10062  0020C8  5017               	movf	___almod@divisor+2,w,c
 10063  0020CA  5813               	subwfb	___almod@dividend+2,w,c
 10064  0020CC  5018               	movf	___almod@divisor+3,w,c
 10065  0020CE  5814               	subwfb	___almod@dividend+3,w,c
 10066  0020D0  A0D8               	btfss	status,0,c
 10067  0020D2  D009               	goto	l3490
 10068  0020D4  5015               	movf	___almod@divisor,w,c
 10069  0020D6  5E11               	subwf	___almod@dividend,f,c
 10070  0020D8  5016               	movf	___almod@divisor+1,w,c
 10071  0020DA  5A12               	subwfb	___almod@dividend+1,f,c
 10072  0020DC  5017               	movf	___almod@divisor+2,w,c
 10073  0020DE  5A13               	subwfb	___almod@dividend+2,f,c
 10074  0020E0  5018               	movf	___almod@divisor+3,w,c
 10075  0020E2  5A14               	subwfb	___almod@dividend+3,f,c
 10076  0020E4  D000               	goto	l3490
 10077  0020E6                     l3490:
 10078  0020E6  90D8               	bcf	status,0,c
 10079  0020E8  3218               	rrcf	___almod@divisor+3,f,c
 10080  0020EA  3217               	rrcf	___almod@divisor+2,f,c
 10081  0020EC  3216               	rrcf	___almod@divisor+1,f,c
 10082  0020EE  3215               	rrcf	___almod@divisor,f,c
 10083  0020F0  2E19               	decfsz	___almod@counter,f,c
 10084  0020F2  D7E6               	goto	l3486
 10085  0020F4  D000               	goto	l3494
 10086  0020F6                     l3494:
 10087  0020F6  501A               	movf	___almod@sign,w,c
 10088  0020F8  B4D8               	btfsc	status,2,c
 10089  0020FA  D009               	goto	l3498
 10090  0020FC  1E14               	comf	___almod@dividend+3,f,c
 10091  0020FE  1E13               	comf	___almod@dividend+2,f,c
 10092  002100  1E12               	comf	___almod@dividend+1,f,c
 10093  002102  6C11               	negf	___almod@dividend,c
 10094  002104  0E00               	movlw	0
 10095  002106  2212               	addwfc	___almod@dividend+1,f,c
 10096  002108  2213               	addwfc	___almod@dividend+2,f,c
 10097  00210A  2214               	addwfc	___almod@dividend+3,f,c
 10098  00210C  D000               	goto	l3498
 10099  00210E                     l3498:
 10100  00210E  C011  F011         	movff	___almod@dividend,?___almod
 10101  002112  C012  F012         	movff	___almod@dividend+1,?___almod+1
 10102  002116  C013  F013         	movff	___almod@dividend+2,?___almod+2
 10103  00211A  C014  F014         	movff	___almod@dividend+3,?___almod+3
 10104  00211E  0012               	return	
 10105  002120  0012               	return		;funcret
 10106  002122                     __end_of___almod:
 10107                           	opt stack 0
 10108                           tblptru	equ	0xFF8
 10109                           tblptrh	equ	0xFF7
 10110                           tblptrl	equ	0xFF6
 10111                           tablat	equ	0xFF5
 10112                           prodh	equ	0xFF4
 10113                           prodl	equ	0xFF3
 10114                           intcon	equ	0xFF2
 10115                           intcon3	equ	0xFF0
 10116                           postinc0	equ	0xFEE
 10117                           wreg	equ	0xFE8
 10118                           indf1	equ	0xFE7
 10119                           postdec1	equ	0xFE5
 10120                           fsr1h	equ	0xFE2
 10121                           fsr1l	equ	0xFE1
 10122                           indf2	equ	0xFDF
 10123                           postinc2	equ	0xFDE
 10124                           fsr2h	equ	0xFDA
 10125                           fsr2l	equ	0xFD9
 10126                           status	equ	0xFD8
 10127                           
 10128 ;; *************** function ___aldiv *****************
 10129 ;; Defined at:
 10130 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/aldiv.c"
 10131 ;; Parameters:    Size  Location     Type
 10132 ;;  dividend        4   28[COMRAM] long 
 10133 ;;  divisor         4   32[COMRAM] long 
 10134 ;; Auto vars:     Size  Location     Type
 10135 ;;  quotient        4   38[COMRAM] long 
 10136 ;;  sign            1   37[COMRAM] unsigned char 
 10137 ;;  counter         1   36[COMRAM] unsigned char 
 10138 ;; Return value:  Size  Location     Type
 10139 ;;                  4   28[COMRAM] long 
 10140 ;; Registers used:
 10141 ;;		wreg, status,2, status,0
 10142 ;; Tracked objects:
 10143 ;;		On entry : 0/0
 10144 ;;		On exit  : 0/0
 10145 ;;		Unchanged: 0/0
 10146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10147 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10148 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10150 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10151 ;;Total ram usage:       14 bytes
 10152 ;; Hardware stack levels used:    1
 10153 ;; Hardware stack levels required when called:    2
 10154 ;; This function calls:
 10155 ;;		Nothing
 10156 ;; This function is called by:
 10157 ;;		_esicPrint
 10158 ;; This function uses a non-reentrant model
 10159 ;;
 10160                           
 10161                           	psect	text45
 10162  001C5C                     __ptext45:
 10163                           	opt stack 0
 10164  001C5C                     ___aldiv:
 10165                           	opt stack 26
 10166                           
 10167                           ;incstack = 0
 10168  001C5C  0E00               	movlw	0
 10169  001C5E  6E26               	movwf	___aldiv@sign,c
 10170  001C60  AE24               	btfss	___aldiv@divisor+3,7,c
 10171  001C62  D00B               	goto	l3430
 10172  001C64  1E24               	comf	___aldiv@divisor+3,f,c
 10173  001C66  1E23               	comf	___aldiv@divisor+2,f,c
 10174  001C68  1E22               	comf	___aldiv@divisor+1,f,c
 10175  001C6A  6C21               	negf	___aldiv@divisor,c
 10176  001C6C  0E00               	movlw	0
 10177  001C6E  2222               	addwfc	___aldiv@divisor+1,f,c
 10178  001C70  2223               	addwfc	___aldiv@divisor+2,f,c
 10179  001C72  2224               	addwfc	___aldiv@divisor+3,f,c
 10180  001C74  0E01               	movlw	1
 10181  001C76  6E26               	movwf	___aldiv@sign,c
 10182  001C78  D000               	goto	l3430
 10183  001C7A                     l3430:
 10184  001C7A  AE20               	btfss	___aldiv@dividend+3,7,c
 10185  001C7C  D00B               	goto	l3436
 10186  001C7E  1E20               	comf	___aldiv@dividend+3,f,c
 10187  001C80  1E1F               	comf	___aldiv@dividend+2,f,c
 10188  001C82  1E1E               	comf	___aldiv@dividend+1,f,c
 10189  001C84  6C1D               	negf	___aldiv@dividend,c
 10190  001C86  0E00               	movlw	0
 10191  001C88  221E               	addwfc	___aldiv@dividend+1,f,c
 10192  001C8A  221F               	addwfc	___aldiv@dividend+2,f,c
 10193  001C8C  2220               	addwfc	___aldiv@dividend+3,f,c
 10194  001C8E  0E01               	movlw	1
 10195  001C90  1A26               	xorwf	___aldiv@sign,f,c
 10196  001C92  D000               	goto	l3436
 10197  001C94                     l3436:
 10198  001C94  0E00               	movlw	0
 10199  001C96  6E27               	movwf	___aldiv@quotient,c
 10200  001C98  0E00               	movlw	0
 10201  001C9A  6E28               	movwf	___aldiv@quotient+1,c
 10202  001C9C  0E00               	movlw	0
 10203  001C9E  6E29               	movwf	___aldiv@quotient+2,c
 10204  001CA0  0E00               	movlw	0
 10205  001CA2  6E2A               	movwf	___aldiv@quotient+3,c
 10206  001CA4  5021               	movf	___aldiv@divisor,w,c
 10207  001CA6  1022               	iorwf	___aldiv@divisor+1,w,c
 10208  001CA8  1023               	iorwf	___aldiv@divisor+2,w,c
 10209  001CAA  1024               	iorwf	___aldiv@divisor+3,w,c
 10210  001CAC  B4D8               	btfsc	status,2,c
 10211  001CAE  D02F               	goto	l3458
 10212  001CB0  0E01               	movlw	1
 10213  001CB2  6E25               	movwf	___aldiv@counter,c
 10214  001CB4  D007               	goto	l3444
 10215  001CB6                     l3442:
 10216  001CB6  90D8               	bcf	status,0,c
 10217  001CB8  3621               	rlcf	___aldiv@divisor,f,c
 10218  001CBA  3622               	rlcf	___aldiv@divisor+1,f,c
 10219  001CBC  3623               	rlcf	___aldiv@divisor+2,f,c
 10220  001CBE  3624               	rlcf	___aldiv@divisor+3,f,c
 10221  001CC0  2A25               	incf	___aldiv@counter,f,c
 10222  001CC2  D000               	goto	l3444
 10223  001CC4                     l3444:
 10224  001CC4  BE24               	btfsc	___aldiv@divisor+3,7,c
 10225  001CC6  D002               	goto	l3446
 10226  001CC8  D7F6               	goto	l3442
 10227  001CCA  D000               	goto	l3446
 10228  001CCC                     l3446:
 10229  001CCC  90D8               	bcf	status,0,c
 10230  001CCE  3627               	rlcf	___aldiv@quotient,f,c
 10231  001CD0  3628               	rlcf	___aldiv@quotient+1,f,c
 10232  001CD2  3629               	rlcf	___aldiv@quotient+2,f,c
 10233  001CD4  362A               	rlcf	___aldiv@quotient+3,f,c
 10234  001CD6  5021               	movf	___aldiv@divisor,w,c
 10235  001CD8  5C1D               	subwf	___aldiv@dividend,w,c
 10236  001CDA  5022               	movf	___aldiv@divisor+1,w,c
 10237  001CDC  581E               	subwfb	___aldiv@dividend+1,w,c
 10238  001CDE  5023               	movf	___aldiv@divisor+2,w,c
 10239  001CE0  581F               	subwfb	___aldiv@dividend+2,w,c
 10240  001CE2  5024               	movf	___aldiv@divisor+3,w,c
 10241  001CE4  5820               	subwfb	___aldiv@dividend+3,w,c
 10242  001CE6  A0D8               	btfss	status,0,c
 10243  001CE8  D00A               	goto	l3454
 10244  001CEA  5021               	movf	___aldiv@divisor,w,c
 10245  001CEC  5E1D               	subwf	___aldiv@dividend,f,c
 10246  001CEE  5022               	movf	___aldiv@divisor+1,w,c
 10247  001CF0  5A1E               	subwfb	___aldiv@dividend+1,f,c
 10248  001CF2  5023               	movf	___aldiv@divisor+2,w,c
 10249  001CF4  5A1F               	subwfb	___aldiv@dividend+2,f,c
 10250  001CF6  5024               	movf	___aldiv@divisor+3,w,c
 10251  001CF8  5A20               	subwfb	___aldiv@dividend+3,f,c
 10252  001CFA  8027               	bsf	___aldiv@quotient,0,c
 10253  001CFC  D000               	goto	l3454
 10254  001CFE                     l3454:
 10255  001CFE  90D8               	bcf	status,0,c
 10256  001D00  3224               	rrcf	___aldiv@divisor+3,f,c
 10257  001D02  3223               	rrcf	___aldiv@divisor+2,f,c
 10258  001D04  3222               	rrcf	___aldiv@divisor+1,f,c
 10259  001D06  3221               	rrcf	___aldiv@divisor,f,c
 10260  001D08  2E25               	decfsz	___aldiv@counter,f,c
 10261  001D0A  D7E0               	goto	l3446
 10262  001D0C  D000               	goto	l3458
 10263  001D0E                     l3458:
 10264  001D0E  5026               	movf	___aldiv@sign,w,c
 10265  001D10  B4D8               	btfsc	status,2,c
 10266  001D12  D009               	goto	l3462
 10267  001D14  1E2A               	comf	___aldiv@quotient+3,f,c
 10268  001D16  1E29               	comf	___aldiv@quotient+2,f,c
 10269  001D18  1E28               	comf	___aldiv@quotient+1,f,c
 10270  001D1A  6C27               	negf	___aldiv@quotient,c
 10271  001D1C  0E00               	movlw	0
 10272  001D1E  2228               	addwfc	___aldiv@quotient+1,f,c
 10273  001D20  2229               	addwfc	___aldiv@quotient+2,f,c
 10274  001D22  222A               	addwfc	___aldiv@quotient+3,f,c
 10275  001D24  D000               	goto	l3462
 10276  001D26                     l3462:
 10277  001D26  C027  F01D         	movff	___aldiv@quotient,?___aldiv
 10278  001D2A  C028  F01E         	movff	___aldiv@quotient+1,?___aldiv+1
 10279  001D2E  C029  F01F         	movff	___aldiv@quotient+2,?___aldiv+2
 10280  001D32  C02A  F020         	movff	___aldiv@quotient+3,?___aldiv+3
 10281  001D36  0012               	return	
 10282  001D38  0012               	return		;funcret
 10283  001D3A                     __end_of___aldiv:
 10284                           	opt stack 0
 10285                           tblptru	equ	0xFF8
 10286                           tblptrh	equ	0xFF7
 10287                           tblptrl	equ	0xFF6
 10288                           tablat	equ	0xFF5
 10289                           prodh	equ	0xFF4
 10290                           prodl	equ	0xFF3
 10291                           intcon	equ	0xFF2
 10292                           intcon3	equ	0xFF0
 10293                           postinc0	equ	0xFEE
 10294                           wreg	equ	0xFE8
 10295                           indf1	equ	0xFE7
 10296                           postdec1	equ	0xFE5
 10297                           fsr1h	equ	0xFE2
 10298                           fsr1l	equ	0xFE1
 10299                           indf2	equ	0xFDF
 10300                           postinc2	equ	0xFDE
 10301                           fsr2h	equ	0xFDA
 10302                           fsr2l	equ	0xFD9
 10303                           status	equ	0xFD8
 10304                           
 10305 ;; *************** function _doroDecode *****************
 10306 ;; Defined at:
 10307 ;;		line 11 in file "../doro.c"
 10308 ;; Parameters:    Size  Location     Type
 10309 ;;  rf_state        1    wreg     unsigned char 
 10310 ;;  length          1   21[COMRAM] unsigned char 
 10311 ;; Auto vars:     Size  Location     Type
 10312 ;;  rf_state        1   25[COMRAM] unsigned char 
 10313 ;; Return value:  Size  Location     Type
 10314 ;;		None               void
 10315 ;; Registers used:
 10316 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10317 ;; Tracked objects:
 10318 ;;		On entry : 0/0
 10319 ;;		On exit  : 0/0
 10320 ;;		Unchanged: 0/0
 10321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10322 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10323 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10324 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10325 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10326 ;;Total ram usage:        5 bytes
 10327 ;; Hardware stack levels used:    1
 10328 ;; Hardware stack levels required when called:    4
 10329 ;; This function calls:
 10330 ;;		_blinkRxLed
 10331 ;;		_uart_put_hex
 10332 ;;		_uart_puts
 10333 ;; This function is called by:
 10334 ;;		_main
 10335 ;; This function uses a non-reentrant model
 10336 ;;
 10337                           
 10338                           	psect	text46
 10339  001B64                     __ptext46:
 10340                           	opt stack 0
 10341  001B64                     _doroDecode:
 10342                           	opt stack 26
 10343                           
 10344                           ;incstack = 0
 10345                           ;doroDecode@rf_state stored from wreg
 10346  001B64  6E1A               	movwf	doroDecode@rf_state,c
 10347                           
 10348                           ;doro.c: 12: static enum doro_state state;
 10349                           ;doro.c: 13: static uint16_t data = 0;
 10350                           ;doro.c: 14: static uint8_t nrbits = 0;
 10351                           ;doro.c: 17: if(rf_state){
 10352  001B66  501A               	movf	doroDecode@rf_state,w,c
 10353  001B68  B4D8               	btfsc	status,2,c
 10354  001B6A  D020               	goto	l5512
 10355                           
 10356                           ;doro.c: 18: if (((length>32) && (length<40))&&(!nrbits || (state==SKIP_LOW))) state = H
      +                          IGH;
 10357  001B6C  0E20               	movlw	32
 10358  001B6E  6416               	cpfsgt	doroDecode@length,c
 10359  001B70  D00C               	goto	l5500
 10360  001B72  0E28               	movlw	40
 10361  001B74  6016               	cpfslt	doroDecode@length,c
 10362  001B76  D009               	goto	l5500
 10363  001B78  5043               	movf	doroDecode@nrbits,w,c
 10364  001B7A  B4D8               	btfsc	status,2,c
 10365  001B7C  D004               	goto	l5498
 10366  001B7E  0E03               	movlw	3
 10367  001B80  1844               	xorwf	doroDecode@state,w,c
 10368  001B82  A4D8               	btfss	status,2,c
 10369  001B84  D002               	goto	l5500
 10370  001B86                     l5498:
 10371  001B86  0E01               	movlw	1
 10372  001B88  D022               	goto	L28
 10373  001B8A                     l5500:
 10374                           
 10375                           ;doro.c: 19: else if (((length>15) && (length<21))&&(!nrbits || (state==SKIP_HIGH))) sta
      +                          te = LOW;
 10376  001B8A  0E0F               	movlw	15
 10377  001B8C  6416               	cpfsgt	doroDecode@length,c
 10378  001B8E  D01E               	goto	l5524
 10379  001B90  0E15               	movlw	21
 10380  001B92  6016               	cpfslt	doroDecode@length,c
 10381  001B94  D01B               	goto	l5524
 10382  001B96  5043               	movf	doroDecode@nrbits,w,c
 10383  001B98  B4D8               	btfsc	status,2,c
 10384  001B9A  D004               	goto	l5508
 10385  001B9C  0E04               	movlw	4
 10386  001B9E  1844               	xorwf	doroDecode@state,w,c
 10387  001BA0  A4D8               	btfss	status,2,c
 10388  001BA2  D014               	goto	l5524
 10389  001BA4                     l5508:
 10390  001BA4  0E00               	movlw	0
 10391  001BA6  D013               	goto	L28
 10392  001BA8  D011               	goto	l5524
 10393                           
 10394                           ;doro.c: 21: }
 10395                           
 10396                           ;doro.c: 20: else state = INVALID;
 10397  001BAA  D013               	goto	l5526
 10398  001BAC                     l5512:
 10399                           
 10400                           ;doro.c: 22: else{
 10401                           ;doro.c: 23: if (((length>32) && (length<40))) state = SKIP_HIGH;
 10402  001BAC  0E20               	movlw	32
 10403  001BAE  6416               	cpfsgt	doroDecode@length,c
 10404  001BB0  D005               	goto	l5518
 10405  001BB2  0E28               	movlw	40
 10406  001BB4  6016               	cpfslt	doroDecode@length,c
 10407  001BB6  D002               	goto	l5518
 10408  001BB8  0E04               	movlw	4
 10409  001BBA  D009               	goto	L28
 10410  001BBC                     l5518:
 10411                           
 10412                           ;doro.c: 24: else if (((length>15) && (length<21))) state = SKIP_LOW;
 10413  001BBC  0E0F               	movlw	15
 10414  001BBE  6416               	cpfsgt	doroDecode@length,c
 10415  001BC0  D005               	goto	l5524
 10416  001BC2  0E15               	movlw	21
 10417  001BC4  6016               	cpfslt	doroDecode@length,c
 10418  001BC6  D002               	goto	l5524
 10419  001BC8  0E03               	movlw	3
 10420  001BCA  D001               	goto	L28
 10421  001BCC                     l5524:
 10422                           
 10423                           ;doro.c: 25: else state = INVALID;
 10424  001BCC  0E02               	movlw	2
 10425  001BCE                     L28:
 10426  001BCE  6E44               	movwf	doroDecode@state,c
 10427  001BD0  D000               	goto	l5526
 10428  001BD2                     l5526:
 10429                           
 10430                           ;doro.c: 26: }
 10431                           ;doro.c: 29: if ((state == HIGH)||(state == LOW)){
 10432  001BD2  0444               	decf	doroDecode@state,w,c
 10433  001BD4  B4D8               	btfsc	status,2,c
 10434  001BD6  D003               	goto	l5530
 10435  001BD8  5044               	movf	doroDecode@state,w,c
 10436  001BDA  A4D8               	btfss	status,2,c
 10437  001BDC  D00B               	goto	l5536
 10438  001BDE                     l5530:
 10439                           
 10440                           ;doro.c: 30: data <<= 1;
 10441  001BDE  0100               	movlb	0	; () banked
 10442  001BE0  90D8               	bcf	status,0,c
 10443  001BE2  37C2               	rlcf	doroDecode@data& (0+255),f,b
 10444  001BE4  37C3               	rlcf	(doroDecode@data+1)& (0+255),f,b
 10445                           
 10446                           ; BSR set to: 0
 10447                           ;doro.c: 31: if (state == HIGH) data |= 1;
 10448  001BE6  0444               	decf	doroDecode@state,w,c
 10449  001BE8  A4D8               	btfss	status,2,c
 10450  001BEA  D002               	goto	l32
 10451                           
 10452                           ; BSR set to: 0
 10453  001BEC  0100               	movlb	0	; () banked
 10454  001BEE  81C2               	bsf	doroDecode@data& (0+255),0,b
 10455  001BF0                     l32:
 10456                           
 10457                           ; BSR set to: 0
 10458                           ;doro.c: 32: nrbits++;
 10459  001BF0  2A43               	incf	doroDecode@nrbits,f,c
 10460                           
 10461                           ;doro.c: 33: }
 10462  001BF2  0012               	return	
 10463  001BF4                     l5536:
 10464                           
 10465                           ;doro.c: 34: else if (state == INVALID){
 10466  001BF4  0E02               	movlw	2
 10467  001BF6  1844               	xorwf	doroDecode@state,w,c
 10468  001BF8  A4D8               	btfss	status,2,c
 10469  001BFA  0012               	return	
 10470                           
 10471                           ;doro.c: 35: if (nrbits == 13){
 10472  001BFC  0E0D               	movlw	13
 10473  001BFE  1843               	xorwf	doroDecode@nrbits,w,c
 10474  001C00  A4D8               	btfss	status,2,c
 10475  001C02  D028               	goto	l5552
 10476                           
 10477                           ;doro.c: 36: uart_puts("$D");
 10478  001C04  0EFB               	movlw	low STR_1
 10479  001C06  6E14               	movwf	uart_puts@s,c
 10480  001C08  0EFF               	movlw	high STR_1
 10481  001C0A  6E15               	movwf	uart_puts@s+1,c
 10482  001C0C  ECCC  F012         	call	_uart_puts	;wreg free
 10483                           
 10484                           ;doro.c: 37: uart_put_hex((data&0xf00)>>8);
 10485  001C10  0100               	movlb	0	; () banked
 10486  001C12  51C3               	movf	(doroDecode@data+1)& (0+255),w,b
 10487  001C14  0B0F               	andlw	15
 10488  001C16  EC92  F014         	call	_uart_put_hex
 10489                           
 10490                           ;doro.c: 38: uart_put_hex((data&0xf0)>>4);
 10491  001C1A  C0C2  F017         	movff	doroDecode@data,??_doroDecode
 10492  001C1E  C0C3  F018         	movff	doroDecode@data+1,??_doroDecode+1
 10493  001C22  0E04               	movlw	4
 10494  001C24  6E19               	movwf	(??_doroDecode+2)& (0+255),c
 10495  001C26                     u6375:
 10496  001C26  90D8               	bcf	status,0,c
 10497  001C28  3218               	rrcf	??_doroDecode+1,f,c
 10498  001C2A  3217               	rrcf	??_doroDecode,f,c
 10499  001C2C  2E19               	decfsz	(??_doroDecode+2)& (0+255),f,c
 10500  001C2E  D7FB               	goto	u6375
 10501  001C30  5017               	movf	??_doroDecode,w,c
 10502  001C32  0B0F               	andlw	15
 10503  001C34  EC92  F014         	call	_uart_put_hex
 10504                           
 10505                           ;doro.c: 39: uart_put_hex(data&0xf);
 10506  001C38  0100               	movlb	0	; () banked
 10507  001C3A  51C2               	movf	doroDecode@data& (0+255),w,b
 10508  001C3C  0B0F               	andlw	15
 10509  001C3E  EC92  F014         	call	_uart_put_hex
 10510                           
 10511                           ;doro.c: 40: uart_puts("\r\n");
 10512  001C42  0E7F               	movlw	low (STR_9+29)
 10513  001C44  6E14               	movwf	uart_puts@s,c
 10514  001C46  0EFE               	movlw	high (STR_9+29)
 10515  001C48  6E15               	movwf	uart_puts@s+1,c
 10516  001C4A  ECCC  F012         	call	_uart_puts	;wreg free
 10517                           
 10518                           ;doro.c: 41: blinkRxLed();
 10519  001C4E  ECD4  F014         	call	_blinkRxLed	;wreg free
 10520  001C52  D000               	goto	l5552
 10521  001C54                     l5552:
 10522                           
 10523                           ;doro.c: 42: }
 10524                           ;doro.c: 43: nrbits = 0;
 10525  001C54  0E00               	movlw	0
 10526  001C56  6E43               	movwf	doroDecode@nrbits,c
 10527  001C58  0012               	return	
 10528  001C5A  0012               	return		;funcret
 10529  001C5C                     __end_of_doroDecode:
 10530                           	opt stack 0
 10531                           tblptru	equ	0xFF8
 10532                           tblptrh	equ	0xFF7
 10533                           tblptrl	equ	0xFF6
 10534                           tablat	equ	0xFF5
 10535                           prodh	equ	0xFF4
 10536                           prodl	equ	0xFF3
 10537                           intcon	equ	0xFF2
 10538                           intcon3	equ	0xFF0
 10539                           postinc0	equ	0xFEE
 10540                           wreg	equ	0xFE8
 10541                           indf1	equ	0xFE7
 10542                           postdec1	equ	0xFE5
 10543                           fsr1h	equ	0xFE2
 10544                           fsr1l	equ	0xFE1
 10545                           indf2	equ	0xFDF
 10546                           postinc2	equ	0xFDE
 10547                           fsr2h	equ	0xFDA
 10548                           fsr2l	equ	0xFD9
 10549                           status	equ	0xFD8
 10550                           
 10551 ;; *************** function _uart_puts *****************
 10552 ;; Defined at:
 10553 ;;		line 69 in file "../uart.c"
 10554 ;; Parameters:    Size  Location     Type
 10555 ;;  s               2   19[COMRAM] PTR const unsigned char 
 10556 ;;		 -> STR_66(3), STR_65(3), STR_64(3), STR_63(3), 
 10557 ;;		 -> uart_put_int@buffer(7), STR_62(43), STR_61(43), STR_60(6), 
 10558 ;;		 -> STR_59(6), STR_58(6), STR_57(6), STR_56(6), 
 10559 ;;		 -> STR_55(6), STR_54(6), STR_53(6), STR_52(6), 
 10560 ;;		 -> STR_51(6), STR_50(6), STR_49(6), STR_48(6), 
 10561 ;;		 -> STR_47(6), STR_46(3), STR_45(16), STR_44(3), 
 10562 ;;		 -> STR_43(15), STR_42(23), STR_41(9), STR_40(21), 
 10563 ;;		 -> STR_39(19), STR_38(19), STR_37(12), STR_36(3), 
 10564 ;;		 -> STR_35(14), STR_34(12), STR_33(3), STR_32(14), 
 10565 ;;		 -> STR_31(12), STR_30(3), STR_29(14), STR_28(11), 
 10566 ;;		 -> STR_27(3), STR_26(14), STR_25(3), STR_24(20), 
 10567 ;;		 -> STR_23(3), STR_22(24), STR_21(8), STR_20(3), 
 10568 ;;		 -> STR_19(15), STR_18(8), STR_17(3), STR_16(14), 
 10569 ;;		 -> STR_15(3), STR_14(15), STR_13(7), STR_12(3), 
 10570 ;;		 -> STR_11(15), STR_10(8), STR_9(32), STR_8(3), 
 10571 ;;		 -> STR_7(6), STR_6(3), STR_5(3), STR_4(3), 
 10572 ;;		 -> STR_3(3), STR_2(3), STR_1(3), 
 10573 ;; Auto vars:     Size  Location     Type
 10574 ;;		None
 10575 ;; Return value:  Size  Location     Type
 10576 ;;		None               void
 10577 ;; Registers used:
 10578 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10579 ;; Tracked objects:
 10580 ;;		On entry : 0/0
 10581 ;;		On exit  : 0/0
 10582 ;;		Unchanged: 0/0
 10583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10584 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10587 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10588 ;;Total ram usage:        2 bytes
 10589 ;; Hardware stack levels used:    1
 10590 ;; Hardware stack levels required when called:    3
 10591 ;; This function calls:
 10592 ;;		_uart_put
 10593 ;; This function is called by:
 10594 ;;		_doroDecode
 10595 ;;		_esicPrint
 10596 ;;		_gaoPrint
 10597 ;;		_enter_rx
 10598 ;;		_parseSettings
 10599 ;;		_parseCmd
 10600 ;;		_main
 10601 ;;		_uart_put_int
 10602 ;;		_nexaCodeDecode
 10603 ;;		_nexaDecode
 10604 ;; This function uses a non-reentrant model
 10605 ;;
 10606                           
 10607                           	psect	text47
 10608  002598                     __ptext47:
 10609                           	opt stack 0
 10610  002598                     _uart_puts:
 10611                           	opt stack 27
 10612                           
 10613                           ;uart.c: 70: while(*s) uart_put(*s++);
 10614                           
 10615                           ;incstack = 0
 10616  002598  D016               	goto	l4850
 10617  00259A                     l4846:
 10618  00259A  C014  FFF6         	movff	uart_puts@s,tblptrl
 10619  00259E  C015  FFF7         	movff	uart_puts@s+1,tblptrh
 10620  0025A2  0E00               	movlw	low (__mediumconst shr (0+16))
 10621  0025A4  6EF8               	movwf	tblptru,c
 10622  0025A6  0E0F               	movlw	(high __ramtop+-1)
 10623  0025A8  64F7               	cpfsgt	tblptrh,c
 10624  0025AA  D003               	bra	u5437
 10625  0025AC  0008               	tblrd		*
 10626  0025AE  50F5               	movf	tablat,w,c
 10627  0025B0  D005               	bra	u5430
 10628  0025B2                     u5437:
 10629  0025B2  CFF6 FFE1          	movff	tblptrl,fsr1l
 10630  0025B6  CFF7 FFE2          	movff	tblptrh,fsr1h
 10631  0025BA  50E7               	movf	indf1,w,c
 10632  0025BC                     u5430:
 10633  0025BC  ECF8  F012         	call	_uart_put
 10634  0025C0  4A14               	infsnz	uart_puts@s,f,c
 10635  0025C2  2A15               	incf	uart_puts@s+1,f,c
 10636  0025C4  D000               	goto	l4850
 10637  0025C6                     l4850:
 10638  0025C6  C014  FFF6         	movff	uart_puts@s,tblptrl
 10639  0025CA  C015  FFF7         	movff	uart_puts@s+1,tblptrh
 10640  0025CE  0E00               	movlw	low (__mediumconst shr (0+16))
 10641  0025D0  6EF8               	movwf	tblptru,c
 10642  0025D2  0E0F               	movlw	(high __ramtop+-1)
 10643  0025D4  64F7               	cpfsgt	tblptrh,c
 10644  0025D6  D003               	bra	u5447
 10645  0025D8  0008               	tblrd		*
 10646  0025DA  50F5               	movf	tablat,w,c
 10647  0025DC  D005               	bra	u5440
 10648  0025DE                     u5447:
 10649  0025DE  CFF6 FFE1          	movff	tblptrl,fsr1l
 10650  0025E2  CFF7 FFE2          	movff	tblptrh,fsr1h
 10651  0025E6  50E7               	movf	indf1,w,c
 10652  0025E8                     u5440:
 10653  0025E8  0900               	iorlw	0
 10654  0025EA  A4D8               	btfss	status,2,c
 10655  0025EC  D7D6               	goto	l4846
 10656  0025EE  0012               	return		;funcret
 10657  0025F0                     __end_of_uart_puts:
 10658                           	opt stack 0
 10659                           tblptru	equ	0xFF8
 10660                           tblptrh	equ	0xFF7
 10661                           tblptrl	equ	0xFF6
 10662                           tablat	equ	0xFF5
 10663                           prodh	equ	0xFF4
 10664                           prodl	equ	0xFF3
 10665                           intcon	equ	0xFF2
 10666                           intcon3	equ	0xFF0
 10667                           postinc0	equ	0xFEE
 10668                           wreg	equ	0xFE8
 10669                           indf1	equ	0xFE7
 10670                           postdec1	equ	0xFE5
 10671                           fsr1h	equ	0xFE2
 10672                           fsr1l	equ	0xFE1
 10673                           indf2	equ	0xFDF
 10674                           postinc2	equ	0xFDE
 10675                           fsr2h	equ	0xFDA
 10676                           fsr2l	equ	0xFD9
 10677                           status	equ	0xFD8
 10678                           
 10679 ;; *************** function _uart_put_hex *****************
 10680 ;; Defined at:
 10681 ;;		line 96 in file "../uart.c"
 10682 ;; Parameters:    Size  Location     Type
 10683 ;;  data            1    wreg     unsigned char 
 10684 ;; Auto vars:     Size  Location     Type
 10685 ;;  data            1   19[COMRAM] unsigned char 
 10686 ;; Return value:  Size  Location     Type
 10687 ;;		None               void
 10688 ;; Registers used:
 10689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10690 ;; Tracked objects:
 10691 ;;		On entry : 0/0
 10692 ;;		On exit  : 0/0
 10693 ;;		Unchanged: 0/0
 10694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10696 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10698 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10699 ;;Total ram usage:        1 bytes
 10700 ;; Hardware stack levels used:    1
 10701 ;; Hardware stack levels required when called:    3
 10702 ;; This function calls:
 10703 ;;		_uart_put
 10704 ;; This function is called by:
 10705 ;;		_doroDecode
 10706 ;;		_gaoPrint
 10707 ;;		_nexaCodeDecode
 10708 ;;		_nexaDecode
 10709 ;; This function uses a non-reentrant model
 10710 ;;
 10711                           
 10712                           	psect	text48
 10713  002924                     __ptext48:
 10714                           	opt stack 0
 10715  002924                     _uart_put_hex:
 10716                           	opt stack 26
 10717                           
 10718                           ;incstack = 0
 10719                           ;uart_put_hex@data stored from wreg
 10720  002924  6E14               	movwf	uart_put_hex@data,c
 10721                           
 10722                           ;uart.c: 97: if(data < 10) uart_put(data + '0');
 10723  002926  0E0A               	movlw	10
 10724  002928  6014               	cpfslt	uart_put_hex@data,c
 10725  00292A  D005               	goto	l4894
 10726  00292C  5014               	movf	uart_put_hex@data,w,c
 10727  00292E  0F30               	addlw	48
 10728  002930  ECF8  F012         	call	_uart_put
 10729  002934  0012               	return	
 10730  002936                     l4894:
 10731                           
 10732                           ;uart.c: 98: else uart_put(data + 55);
 10733  002936  5014               	movf	uart_put_hex@data,w,c
 10734  002938  0F37               	addlw	55
 10735  00293A  ECF8  F012         	call	_uart_put
 10736  00293E  0012               	return	
 10737  002940  0012               	return		;funcret
 10738  002942                     __end_of_uart_put_hex:
 10739                           	opt stack 0
 10740                           tblptru	equ	0xFF8
 10741                           tblptrh	equ	0xFF7
 10742                           tblptrl	equ	0xFF6
 10743                           tablat	equ	0xFF5
 10744                           prodh	equ	0xFF4
 10745                           prodl	equ	0xFF3
 10746                           intcon	equ	0xFF2
 10747                           intcon3	equ	0xFF0
 10748                           postinc0	equ	0xFEE
 10749                           wreg	equ	0xFE8
 10750                           indf1	equ	0xFE7
 10751                           postdec1	equ	0xFE5
 10752                           fsr1h	equ	0xFE2
 10753                           fsr1l	equ	0xFE1
 10754                           indf2	equ	0xFDF
 10755                           postinc2	equ	0xFDE
 10756                           fsr2h	equ	0xFDA
 10757                           fsr2l	equ	0xFD9
 10758                           status	equ	0xFD8
 10759                           
 10760 ;; *************** function _uart_put *****************
 10761 ;; Defined at:
 10762 ;;		line 56 in file "../uart.c"
 10763 ;; Parameters:    Size  Location     Type
 10764 ;;  c               1    wreg     unsigned char 
 10765 ;; Auto vars:     Size  Location     Type
 10766 ;;  c               1   18[COMRAM] unsigned char 
 10767 ;; Return value:  Size  Location     Type
 10768 ;;		None               void
 10769 ;; Registers used:
 10770 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10771 ;; Tracked objects:
 10772 ;;		On entry : 0/0
 10773 ;;		On exit  : 0/0
 10774 ;;		Unchanged: 0/0
 10775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10777 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10778 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10779 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10780 ;;Total ram usage:        3 bytes
 10781 ;; Hardware stack levels used:    1
 10782 ;; Hardware stack levels required when called:    2
 10783 ;; This function calls:
 10784 ;;		Nothing
 10785 ;; This function is called by:
 10786 ;;		_esicPrint
 10787 ;;		_gaoPrint
 10788 ;;		_parseSettings
 10789 ;;		_uart_puts
 10790 ;;		_uart_put_hex
 10791 ;;		_outputRaw
 10792 ;;		_nexaCodeDecode
 10793 ;;		_nexaDecode
 10794 ;; This function uses a non-reentrant model
 10795 ;;
 10796                           
 10797                           	psect	text49
 10798  0025F0                     __ptext49:
 10799                           	opt stack 0
 10800  0025F0                     _uart_put:
 10801                           	opt stack 27
 10802                           
 10803                           ;incstack = 0
 10804                           ;uart_put@c stored from wreg
 10805  0025F0  6E13               	movwf	uart_put@c,c
 10806                           
 10807                           ;uart.c: 58: if(txop == ((txip+1) & (128 - 1))){
 10808  0025F2  0E01               	movlw	1
 10809  0025F4  243B               	addwf	_txip,w,c	;volatile
 10810  0025F6  6E11               	movwf	??_uart_put& (0+255),c
 10811  0025F8  0E00               	movlw	0
 10812  0025FA  203C               	addwfc	_txip+1,w,c	;volatile
 10813  0025FC  6E12               	movwf	(??_uart_put+1)& (0+255),c
 10814  0025FE  0E7F               	movlw	127
 10815  002600  1611               	andwf	??_uart_put,f,c
 10816  002602  0E00               	movlw	0
 10817  002604  1612               	andwf	??_uart_put+1,f,c
 10818  002606  503D               	movf	_txop,w,c	;volatile
 10819  002608  1811               	xorwf	??_uart_put,w,c
 10820  00260A  E10A               	bnz	l4838
 10821  00260C  503E               	movf	_txop+1,w,c	;volatile
 10822  00260E  1812               	xorwf	??_uart_put+1,w,c
 10823  002610  B4D8               	btfsc	status,2,c
 10824  002612  D002               	goto	l521
 10825  002614  D005               	goto	l4838
 10826                           
 10827                           ;uart.c: 60: while(TXIE);
 10828  002616  D000               	goto	l521
 10829  002618                     l521:
 10830  002618  A89D               	btfss	3997,4,c	;volatile
 10831  00261A  D002               	goto	l4838
 10832  00261C  D7FD               	goto	l521
 10833  00261E  D000               	goto	l4838
 10834  002620                     l4838:
 10835                           
 10836                           ;uart.c: 62: }
 10837                           ;uart.c: 63: txbuffer[txip] = c;
 10838  002620  0E00               	movlw	low _txbuffer
 10839  002622  243B               	addwf	_txip,w,c	;volatile
 10840  002624  6ED9               	movwf	fsr2l,c
 10841  002626  0E02               	movlw	high _txbuffer
 10842  002628  203C               	addwfc	_txip+1,w,c	;volatile
 10843  00262A  6EDA               	movwf	fsr2h,c
 10844  00262C  C013  FFDF         	movff	uart_put@c,indf2
 10845                           
 10846                           ;uart.c: 64: txip = (txip+1) & (128 - 1);
 10847  002630  0E01               	movlw	1
 10848  002632  243B               	addwf	_txip,w,c	;volatile
 10849  002634  6E11               	movwf	??_uart_put& (0+255),c
 10850  002636  0E00               	movlw	0
 10851  002638  203C               	addwfc	_txip+1,w,c	;volatile
 10852  00263A  6E12               	movwf	(??_uart_put+1)& (0+255),c
 10853  00263C  0E7F               	movlw	127
 10854  00263E  1411               	andwf	??_uart_put,w,c
 10855  002640  6E3B               	movwf	_txip,c	;volatile
 10856  002642  6A3C               	clrf	_txip+1,c	;volatile
 10857                           
 10858                           ;uart.c: 65: TXIE = 1;
 10859  002644  889D               	bsf	3997,4,c	;volatile
 10860  002646  0012               	return		;funcret
 10861  002648                     __end_of_uart_put:
 10862                           	opt stack 0
 10863                           tblptru	equ	0xFF8
 10864                           tblptrh	equ	0xFF7
 10865                           tblptrl	equ	0xFF6
 10866                           tablat	equ	0xFF5
 10867                           prodh	equ	0xFF4
 10868                           prodl	equ	0xFF3
 10869                           intcon	equ	0xFF2
 10870                           intcon3	equ	0xFF0
 10871                           postinc0	equ	0xFEE
 10872                           wreg	equ	0xFE8
 10873                           indf1	equ	0xFE7
 10874                           postdec1	equ	0xFE5
 10875                           fsr1h	equ	0xFE2
 10876                           fsr1l	equ	0xFE1
 10877                           indf2	equ	0xFDF
 10878                           postinc2	equ	0xFDE
 10879                           fsr2h	equ	0xFDA
 10880                           fsr2l	equ	0xFD9
 10881                           status	equ	0xFD8
 10882                           
 10883 ;; *************** function _blinkRxLed *****************
 10884 ;; Defined at:
 10885 ;;		line 72 in file "../helpers.c"
 10886 ;; Parameters:    Size  Location     Type
 10887 ;;		None
 10888 ;; Auto vars:     Size  Location     Type
 10889 ;;		None
 10890 ;; Return value:  Size  Location     Type
 10891 ;;		None               void
 10892 ;; Registers used:
 10893 ;;		wreg, status,2
 10894 ;; Tracked objects:
 10895 ;;		On entry : 0/0
 10896 ;;		On exit  : 0/0
 10897 ;;		Unchanged: 0/0
 10898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10903 ;;Total ram usage:        0 bytes
 10904 ;; Hardware stack levels used:    1
 10905 ;; Hardware stack levels required when called:    2
 10906 ;; This function calls:
 10907 ;;		Nothing
 10908 ;; This function is called by:
 10909 ;;		_doroDecode
 10910 ;;		_esicPrint
 10911 ;;		_gaoPrint
 10912 ;;		_nexaCodeDecode
 10913 ;;		_nexaDecode
 10914 ;; This function uses a non-reentrant model
 10915 ;;
 10916                           
 10917                           	psect	text50
 10918  0029A8                     __ptext50:
 10919                           	opt stack 0
 10920  0029A8                     _blinkRxLed:
 10921                           	opt stack 27
 10922                           
 10923                           ;helpers.c: 73: LATC5 = 1;
 10924                           
 10925                           ;incstack = 0
 10926  0029A8  8A8B               	bsf	3979,5,c	;volatile
 10927                           
 10928                           ;helpers.c: 74: TMR3H = 0;
 10929  0029AA  0E00               	movlw	0
 10930  0029AC  6EB3               	movwf	4019,c	;volatile
 10931                           
 10932                           ;helpers.c: 75: TMR3L = 0;
 10933  0029AE  0E00               	movlw	0
 10934  0029B0  6EB2               	movwf	4018,c	;volatile
 10935                           
 10936                           ;helpers.c: 76: TMR3ON = 1;
 10937  0029B2  80B1               	bsf	4017,0,c	;volatile
 10938  0029B4  0012               	return		;funcret
 10939  0029B6                     __end_of_blinkRxLed:
 10940                           	opt stack 0
 10941                           tblptru	equ	0xFF8
 10942                           tblptrh	equ	0xFF7
 10943                           tblptrl	equ	0xFF6
 10944                           tablat	equ	0xFF5
 10945                           prodh	equ	0xFF4
 10946                           prodl	equ	0xFF3
 10947                           intcon	equ	0xFF2
 10948                           intcon3	equ	0xFF0
 10949                           postinc0	equ	0xFEE
 10950                           wreg	equ	0xFE8
 10951                           indf1	equ	0xFE7
 10952                           postdec1	equ	0xFE5
 10953                           fsr1h	equ	0xFE2
 10954                           fsr1l	equ	0xFE1
 10955                           indf2	equ	0xFDF
 10956                           postinc2	equ	0xFDE
 10957                           fsr2h	equ	0xFDA
 10958                           fsr2l	equ	0xFD9
 10959                           status	equ	0xFD8
 10960                           
 10961 ;; *************** function _intRoutineHigh *****************
 10962 ;; Defined at:
 10963 ;;		line 19 in file "../main.c"
 10964 ;; Parameters:    Size  Location     Type
 10965 ;;		None
 10966 ;; Auto vars:     Size  Location     Type
 10967 ;;		None
 10968 ;; Return value:  Size  Location     Type
 10969 ;;		None               void
 10970 ;; Registers used:
 10971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10972 ;; Tracked objects:
 10973 ;;		On entry : 0/0
 10974 ;;		On exit  : 0/0
 10975 ;;		Unchanged: 0/0
 10976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10979 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10980 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10981 ;;Total ram usage:       14 bytes
 10982 ;; Hardware stack levels used:    1
 10983 ;; Hardware stack levels required when called:    1
 10984 ;; This function calls:
 10985 ;;		_sample_interrupt
 10986 ;;		_uart_interrupt
 10987 ;; This function is called by:
 10988 ;;		Interrupt level 2
 10989 ;; This function uses a non-reentrant model
 10990 ;;
 10991                           
 10992                           	psect	intcode
 10993  000008                     __pintcode:
 10994                           	opt stack 0
 10995  000008                     _intRoutineHigh:
 10996                           	opt stack 24
 10997                           
 10998                           ;incstack = 0
 10999  000008  CFFA F003          	movff	pclath,??_intRoutineHigh
 11000  00000C  CFFB F004          	movff	pclatu,??_intRoutineHigh+1
 11001  000010  CFE9 F005          	movff	fsr0l,??_intRoutineHigh+2
 11002  000014  CFEA F006          	movff	fsr0h,??_intRoutineHigh+3
 11003  000018  CFE1 F007          	movff	fsr1l,??_intRoutineHigh+4
 11004  00001C  CFE2 F008          	movff	fsr1h,??_intRoutineHigh+5
 11005  000020  CFD9 F009          	movff	fsr2l,??_intRoutineHigh+6
 11006  000024  CFDA F00A          	movff	fsr2h,??_intRoutineHigh+7
 11007  000028  CFF3 F00B          	movff	prodl,??_intRoutineHigh+8
 11008  00002C  CFF4 F00C          	movff	prodh,??_intRoutineHigh+9
 11009  000030  CFF6 F00D          	movff	tblptrl,??_intRoutineHigh+10
 11010  000034  CFF7 F00E          	movff	tblptrh,??_intRoutineHigh+11
 11011  000038  CFF8 F00F          	movff	tblptru,??_intRoutineHigh+12
 11012  00003C  CFF5 F010          	movff	tablat,??_intRoutineHigh+13
 11013                           
 11014                           ;main.c: 20: sample_interrupt();
 11015  000040  EC06  F00F         	call	_sample_interrupt	;wreg free
 11016                           
 11017                           ;main.c: 21: uart_interrupt();
 11018  000044  ECDC  F011         	call	_uart_interrupt	;wreg free
 11019  000048  C010  FFF5         	movff	??_intRoutineHigh+13,tablat
 11020  00004C  C00F  FFF8         	movff	??_intRoutineHigh+12,tblptru
 11021  000050  C00E  FFF7         	movff	??_intRoutineHigh+11,tblptrh
 11022  000054  C00D  FFF6         	movff	??_intRoutineHigh+10,tblptrl
 11023  000058  C00C  FFF4         	movff	??_intRoutineHigh+9,prodh
 11024  00005C  C00B  FFF3         	movff	??_intRoutineHigh+8,prodl
 11025  000060  C00A  FFDA         	movff	??_intRoutineHigh+7,fsr2h
 11026  000064  C009  FFD9         	movff	??_intRoutineHigh+6,fsr2l
 11027  000068  C008  FFE2         	movff	??_intRoutineHigh+5,fsr1h
 11028  00006C  C007  FFE1         	movff	??_intRoutineHigh+4,fsr1l
 11029  000070  C006  FFEA         	movff	??_intRoutineHigh+3,fsr0h
 11030  000074  C005  FFE9         	movff	??_intRoutineHigh+2,fsr0l
 11031  000078  C004  FFFB         	movff	??_intRoutineHigh+1,pclatu
 11032  00007C  C003  FFFA         	movff	??_intRoutineHigh,pclath
 11033  000080  0011               	retfie		f
 11034  000082                     __end_of_intRoutineHigh:
 11035                           	opt stack 0
 11036                           pclatu	equ	0xFFB
 11037                           pclath	equ	0xFFA
 11038                           tblptru	equ	0xFF8
 11039                           tblptrh	equ	0xFF7
 11040                           tblptrl	equ	0xFF6
 11041                           tablat	equ	0xFF5
 11042                           prodh	equ	0xFF4
 11043                           prodl	equ	0xFF3
 11044                           intcon	equ	0xFF2
 11045                           intcon3	equ	0xFF0
 11046                           postinc0	equ	0xFEE
 11047                           fsr0h	equ	0xFEA
 11048                           fsr0l	equ	0xFE9
 11049                           wreg	equ	0xFE8
 11050                           indf1	equ	0xFE7
 11051                           postdec1	equ	0xFE5
 11052                           fsr1h	equ	0xFE2
 11053                           fsr1l	equ	0xFE1
 11054                           indf2	equ	0xFDF
 11055                           postinc2	equ	0xFDE
 11056                           fsr2h	equ	0xFDA
 11057                           fsr2l	equ	0xFD9
 11058                           status	equ	0xFD8
 11059                           
 11060 ;; *************** function _uart_interrupt *****************
 11061 ;; Defined at:
 11062 ;;		line 13 in file "../uart.c"
 11063 ;; Parameters:    Size  Location     Type
 11064 ;;		None
 11065 ;; Auto vars:     Size  Location     Type
 11066 ;;		None
 11067 ;; Return value:  Size  Location     Type
 11068 ;;		None               void
 11069 ;; Registers used:
 11070 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11071 ;; Tracked objects:
 11072 ;;		On entry : 0/0
 11073 ;;		On exit  : 0/0
 11074 ;;		Unchanged: 0/0
 11075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11078 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11079 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11080 ;;Total ram usage:        2 bytes
 11081 ;; Hardware stack levels used:    1
 11082 ;; This function calls:
 11083 ;;		Nothing
 11084 ;; This function is called by:
 11085 ;;		_intRoutineHigh
 11086 ;; This function uses a non-reentrant model
 11087 ;;
 11088                           
 11089                           	psect	text52
 11090  0023B8                     __ptext52:
 11091                           	opt stack 0
 11092  0023B8                     _uart_interrupt:
 11093                           	opt stack 24
 11094                           
 11095                           ;uart.c: 14: if(RCIF){
 11096                           
 11097                           ;incstack = 0
 11098  0023B8  AA9E               	btfss	3998,5,c	;volatile
 11099  0023BA  D014               	goto	i2l4408
 11100                           
 11101                           ;uart.c: 15: rxbuffer[rxip] = RCREG;
 11102  0023BC  0E00               	movlw	low _rxbuffer
 11103  0023BE  2437               	addwf	_rxip,w,c	;volatile
 11104  0023C0  6ED9               	movwf	fsr2l,c
 11105  0023C2  0E01               	movlw	high _rxbuffer
 11106  0023C4  2038               	addwfc	_rxip+1,w,c	;volatile
 11107  0023C6  6EDA               	movwf	fsr2h,c
 11108  0023C8  CFAE FFDF          	movff	4014,indf2	;volatile
 11109                           
 11110                           ;uart.c: 16: rxip = (rxip+1) & (128 - 1);
 11111  0023CC  0E01               	movlw	1
 11112  0023CE  2437               	addwf	_rxip,w,c	;volatile
 11113  0023D0  6E01               	movwf	??_uart_interrupt& (0+255),c
 11114  0023D2  0E00               	movlw	0
 11115  0023D4  2038               	addwfc	_rxip+1,w,c	;volatile
 11116  0023D6  6E02               	movwf	(??_uart_interrupt+1)& (0+255),c
 11117  0023D8  0E7F               	movlw	127
 11118  0023DA  1401               	andwf	??_uart_interrupt,w,c
 11119  0023DC  6E37               	movwf	_rxip,c	;volatile
 11120  0023DE  6A38               	clrf	_rxip+1,c	;volatile
 11121                           
 11122                           ;uart.c: 17: RCIF = 0;
 11123  0023E0  9A9E               	bcf	3998,5,c	;volatile
 11124  0023E2  D000               	goto	i2l4408
 11125  0023E4                     i2l4408:
 11126                           
 11127                           ;uart.c: 18: }
 11128                           ;uart.c: 19: if(TXIF && TXIE){
 11129  0023E4  A89E               	btfss	3998,4,c	;volatile
 11130  0023E6  0012               	return	
 11131  0023E8  A89D               	btfss	3997,4,c	;volatile
 11132  0023EA  0012               	return	
 11133                           
 11134                           ;uart.c: 20: TXREG = txbuffer[txop];
 11135  0023EC  0E00               	movlw	low _txbuffer
 11136  0023EE  243D               	addwf	_txop,w,c	;volatile
 11137  0023F0  6ED9               	movwf	fsr2l,c
 11138  0023F2  0E02               	movlw	high _txbuffer
 11139  0023F4  203E               	addwfc	_txop+1,w,c	;volatile
 11140  0023F6  6EDA               	movwf	fsr2h,c
 11141  0023F8  50DF               	movf	indf2,w,c
 11142  0023FA  6EAD               	movwf	4013,c	;volatile
 11143                           
 11144                           ;uart.c: 21: txop = (txop+1) & (128 - 1);
 11145  0023FC  0E01               	movlw	1
 11146  0023FE  243D               	addwf	_txop,w,c	;volatile
 11147  002400  6E01               	movwf	??_uart_interrupt& (0+255),c
 11148  002402  0E00               	movlw	0
 11149  002404  203E               	addwfc	_txop+1,w,c	;volatile
 11150  002406  6E02               	movwf	(??_uart_interrupt+1)& (0+255),c
 11151  002408  0E7F               	movlw	127
 11152  00240A  1401               	andwf	??_uart_interrupt,w,c
 11153  00240C  6E3D               	movwf	_txop,c	;volatile
 11154  00240E  6A3E               	clrf	_txop+1,c	;volatile
 11155                           
 11156                           ;uart.c: 22: if(txop == txip) TXIE = 0;
 11157  002410  503B               	movf	_txip,w,c	;volatile
 11158  002412  183D               	xorwf	_txop,w,c	;volatile
 11159  002414  E105               	bnz	i2l506
 11160  002416  503C               	movf	_txip+1,w,c	;volatile
 11161  002418  183E               	xorwf	_txop+1,w,c	;volatile
 11162  00241A  A4D8               	btfss	status,2,c
 11163  00241C  D001               	goto	i2l506
 11164  00241E  989D               	bcf	3997,4,c	;volatile
 11165  002420                     i2l506:
 11166                           
 11167                           ;uart.c: 23: TXIF = 0;
 11168  002420  989E               	bcf	3998,4,c	;volatile
 11169  002422  0012               	return	
 11170  002424  0012               	return		;funcret
 11171  002426                     __end_of_uart_interrupt:
 11172                           	opt stack 0
 11173                           pclatu	equ	0xFFB
 11174                           pclath	equ	0xFFA
 11175                           tblptru	equ	0xFF8
 11176                           tblptrh	equ	0xFF7
 11177                           tblptrl	equ	0xFF6
 11178                           tablat	equ	0xFF5
 11179                           prodh	equ	0xFF4
 11180                           prodl	equ	0xFF3
 11181                           intcon	equ	0xFF2
 11182                           intcon3	equ	0xFF0
 11183                           postinc0	equ	0xFEE
 11184                           fsr0h	equ	0xFEA
 11185                           fsr0l	equ	0xFE9
 11186                           wreg	equ	0xFE8
 11187                           indf1	equ	0xFE7
 11188                           postdec1	equ	0xFE5
 11189                           fsr1h	equ	0xFE2
 11190                           fsr1l	equ	0xFE1
 11191                           indf2	equ	0xFDF
 11192                           postinc2	equ	0xFDE
 11193                           fsr2h	equ	0xFDA
 11194                           fsr2l	equ	0xFD9
 11195                           status	equ	0xFD8
 11196                           
 11197 ;; *************** function _sample_interrupt *****************
 11198 ;; Defined at:
 11199 ;;		line 25 in file "../sample.c"
 11200 ;; Parameters:    Size  Location     Type
 11201 ;;		None
 11202 ;; Auto vars:     Size  Location     Type
 11203 ;;		None
 11204 ;; Return value:  Size  Location     Type
 11205 ;;		None               void
 11206 ;; Registers used:
 11207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11208 ;; Tracked objects:
 11209 ;;		On entry : 0/0
 11210 ;;		On exit  : 0/0
 11211 ;;		Unchanged: 0/0
 11212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11215 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11216 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11217 ;;Total ram usage:        2 bytes
 11218 ;; Hardware stack levels used:    1
 11219 ;; This function calls:
 11220 ;;		Nothing
 11221 ;; This function is called by:
 11222 ;;		_intRoutineHigh
 11223 ;; This function uses a non-reentrant model
 11224 ;;
 11225                           
 11226                           	psect	text53
 11227  001E0C                     __ptext53:
 11228                           	opt stack 0
 11229  001E0C                     _sample_interrupt:
 11230                           	opt stack 24
 11231                           
 11232                           ;sample.c: 26: if (INTCON3bits.INT2IF){
 11233                           
 11234                           ;incstack = 0
 11235  001E0C  A2F0               	btfss	intcon3,1,c	;volatile
 11236  001E0E  0012               	return	
 11237                           
 11238                           ;sample.c: 28: INTCON3bits.INT2IF = 0;
 11239  001E10  92F0               	bcf	intcon3,1,c	;volatile
 11240                           
 11241                           ;sample.c: 31: samples[samples_ip].duration = (TMR0H<<8)|TMR0L;
 11242  001E12  50D6               	movf	4054,w,c	;volatile
 11243  001E14  CFD7 F001          	movff	4055,??_sample_interrupt	;volatile
 11244  001E18  6A02               	clrf	(??_sample_interrupt+1)& (0+255),c
 11245  001E1A  C001  F002         	movff	??_sample_interrupt,??_sample_interrupt+1
 11246  001E1E  6A01               	clrf	??_sample_interrupt,c
 11247  001E20  1201               	iorwf	??_sample_interrupt,f,c
 11248  001E22  0E00               	movlw	0
 11249  001E24  1202               	iorwf	??_sample_interrupt+1,f,c
 11250  001E26  5041               	movf	_samples_ip,w,c	;volatile
 11251  001E28  0D04               	mullw	4
 11252  001E2A  0E01               	movlw	1
 11253  001E2C  26F3               	addwf	prodl,f,c
 11254  001E2E  0E00               	movlw	0
 11255  001E30  22F4               	addwfc	prodh,f,c
 11256  001E32  0E80               	movlw	low _samples
 11257  001E34  24F3               	addwf	prodl,w,c
 11258  001E36  6ED9               	movwf	fsr2l,c
 11259  001E38  0E01               	movlw	high _samples
 11260  001E3A  20F4               	addwfc	prodh,w,c
 11261  001E3C  6EDA               	movwf	fsr2h,c
 11262  001E3E  C001  FFDE         	movff	??_sample_interrupt,postinc2
 11263  001E42  C002  FFDD         	movff	??_sample_interrupt+1,postdec2
 11264                           
 11265                           ;sample.c: 32: TMR0L = TMR0H = 0;
 11266  001E46  0E00               	movlw	0
 11267  001E48  6ED7               	movwf	4055,c	;volatile
 11268  001E4A  CFD7 FFD6          	movff	4055,4054	;volatile
 11269                           
 11270                           ;sample.c: 33: if(TMR0IF){
 11271  001E4E  A4F2               	btfss	intcon,2,c	;volatile
 11272  001E50  D012               	goto	i2l4386
 11273                           
 11274                           ;sample.c: 34: samples[samples_ip].duration = 0xFFFF;
 11275  001E52  5041               	movf	_samples_ip,w,c	;volatile
 11276  001E54  0D04               	mullw	4
 11277  001E56  0E01               	movlw	1
 11278  001E58  26F3               	addwf	prodl,f,c
 11279  001E5A  0E00               	movlw	0
 11280  001E5C  22F4               	addwfc	prodh,f,c
 11281  001E5E  0E80               	movlw	low _samples
 11282  001E60  24F3               	addwf	prodl,w,c
 11283  001E62  6ED9               	movwf	fsr2l,c
 11284  001E64  0E01               	movlw	high _samples
 11285  001E66  20F4               	addwfc	prodh,w,c
 11286  001E68  6EDA               	movwf	fsr2h,c
 11287  001E6A  0EFF               	movlw	255
 11288  001E6C  6EDE               	movwf	postinc2,c
 11289  001E6E  0EFF               	movlw	255
 11290  001E70  6EDD               	movwf	postdec2,c
 11291                           
 11292                           ;sample.c: 35: TMR0IF = 0;
 11293  001E72  94F2               	bcf	intcon,2,c	;volatile
 11294  001E74  D000               	goto	i2l4386
 11295  001E76                     i2l4386:
 11296                           
 11297                           ;sample.c: 36: }
 11298                           ;sample.c: 39: if ((PORTB&0b100)) samples[samples_ip].state = 0;
 11299  001E76  A481               	btfss	3969,2,c	;volatile
 11300  001E78  D00A               	goto	i2l4390
 11301  001E7A  5041               	movf	_samples_ip,w,c	;volatile
 11302  001E7C  0D04               	mullw	4
 11303  001E7E  0E80               	movlw	low _samples
 11304  001E80  24F3               	addwf	prodl,w,c
 11305  001E82  6ED9               	movwf	fsr2l,c
 11306  001E84  0E01               	movlw	high _samples
 11307  001E86  20F4               	addwfc	prodh,w,c
 11308  001E88  6EDA               	movwf	fsr2h,c
 11309  001E8A  0E00               	movlw	0
 11310  001E8C  D009               	goto	L29
 11311  001E8E                     i2l4390:
 11312                           
 11313                           ;sample.c: 40: else samples[samples_ip].state = 1;
 11314  001E8E  5041               	movf	_samples_ip,w,c	;volatile
 11315  001E90  0D04               	mullw	4
 11316  001E92  0E80               	movlw	low _samples
 11317  001E94  24F3               	addwf	prodl,w,c
 11318  001E96  6ED9               	movwf	fsr2l,c
 11319  001E98  0E01               	movlw	high _samples
 11320  001E9A  20F4               	addwfc	prodh,w,c
 11321  001E9C  6EDA               	movwf	fsr2h,c
 11322  001E9E  0E01               	movlw	1
 11323  001EA0                     L29:
 11324  001EA0  6EDF               	movwf	indf2,c
 11325                           
 11326                           ;sample.c: 43: samples[samples_ip].rssi = current_rssi;
 11327  001EA2  5041               	movf	_samples_ip,w,c	;volatile
 11328  001EA4  0D04               	mullw	4
 11329  001EA6  0E03               	movlw	3
 11330  001EA8  26F3               	addwf	prodl,f,c
 11331  001EAA  0E00               	movlw	0
 11332  001EAC  22F4               	addwfc	prodh,f,c
 11333  001EAE  0E80               	movlw	low _samples
 11334  001EB0  24F3               	addwf	prodl,w,c
 11335  001EB2  6ED9               	movwf	fsr2l,c
 11336  001EB4  0E01               	movlw	high _samples
 11337  001EB6  20F4               	addwfc	prodh,w,c
 11338  001EB8  6EDA               	movwf	fsr2h,c
 11339  001EBA  C035  FFDF         	movff	_current_rssi,indf2	;volatile
 11340                           
 11341                           ;sample.c: 44: current_rssi = 0;
 11342  001EBE  0E00               	movlw	0
 11343  001EC0  6E36               	movwf	_current_rssi+1,c	;volatile
 11344  001EC2  0E00               	movlw	0
 11345  001EC4  6E35               	movwf	_current_rssi,c	;volatile
 11346                           
 11347                           ;sample.c: 47: samples_ip = (samples_ip+1) & (32-1);
 11348  001EC6  2841               	incf	_samples_ip,w,c	;volatile
 11349  001EC8  0B1F               	andlw	31
 11350  001ECA  6E41               	movwf	_samples_ip,c	;volatile
 11351                           
 11352                           ;sample.c: 50: if (INTCON2bits.INTEDG2) INTCON2bits.INTEDG2 = 0;
 11353  001ECC  A8F1               	btfss	intcon2,4,c	;volatile
 11354  001ECE  D002               	goto	i2l627
 11355  001ED0  98F1               	bcf	intcon2,4,c	;volatile
 11356  001ED2  0012               	return	
 11357  001ED4                     i2l627:
 11358                           
 11359                           ;sample.c: 51: else INTCON2bits.INTEDG2 = 1;
 11360  001ED4  88F1               	bsf	intcon2,4,c	;volatile
 11361  001ED6  0012               	return	
 11362  001ED8  0012               	return		;funcret
 11363  001EDA                     __end_of_sample_interrupt:
 11364                           	opt stack 0
 11365                           pclatu	equ	0xFFB
 11366                           pclath	equ	0xFFA
 11367                           tblptru	equ	0xFF8
 11368                           tblptrh	equ	0xFF7
 11369                           tblptrl	equ	0xFF6
 11370                           tablat	equ	0xFF5
 11371                           prodh	equ	0xFF4
 11372                           prodl	equ	0xFF3
 11373                           intcon	equ	0xFF2
 11374                           intcon2	equ	0xFF1
 11375                           intcon3	equ	0xFF0
 11376                           postinc0	equ	0xFEE
 11377                           fsr0h	equ	0xFEA
 11378                           fsr0l	equ	0xFE9
 11379                           wreg	equ	0xFE8
 11380                           indf1	equ	0xFE7
 11381                           postdec1	equ	0xFE5
 11382                           fsr1h	equ	0xFE2
 11383                           fsr1l	equ	0xFE1
 11384                           indf2	equ	0xFDF
 11385                           postinc2	equ	0xFDE
 11386                           postdec2	equ	0xFDD
 11387                           fsr2h	equ	0xFDA
 11388                           fsr2l	equ	0xFD9
 11389                           status	equ	0xFD8
 11390                           pclatu	equ	0xFFB
 11391                           pclath	equ	0xFFA
 11392                           tblptru	equ	0xFF8
 11393                           tblptrh	equ	0xFF7
 11394                           tblptrl	equ	0xFF6
 11395                           tablat	equ	0xFF5
 11396                           prodh	equ	0xFF4
 11397                           prodl	equ	0xFF3
 11398                           intcon	equ	0xFF2
 11399                           intcon2	equ	0xFF1
 11400                           intcon3	equ	0xFF0
 11401                           postinc0	equ	0xFEE
 11402                           fsr0h	equ	0xFEA
 11403                           fsr0l	equ	0xFE9
 11404                           wreg	equ	0xFE8
 11405                           indf1	equ	0xFE7
 11406                           postdec1	equ	0xFE5
 11407                           fsr1h	equ	0xFE2
 11408                           fsr1l	equ	0xFE1
 11409                           indf2	equ	0xFDF
 11410                           postinc2	equ	0xFDE
 11411                           postdec2	equ	0xFDD
 11412                           fsr2h	equ	0xFDA
 11413                           fsr2l	equ	0xFD9
 11414                           status	equ	0xFD8
 11415                           
 11416                           	psect	rparam
 11417  0000                     pclatu	equ	0xFFB
 11418                           pclath	equ	0xFFA
 11419                           tblptru	equ	0xFF8
 11420                           tblptrh	equ	0xFF7
 11421                           tblptrl	equ	0xFF6
 11422                           tablat	equ	0xFF5
 11423                           prodh	equ	0xFF4
 11424                           prodl	equ	0xFF3
 11425                           intcon	equ	0xFF2
 11426                           intcon2	equ	0xFF1
 11427                           intcon3	equ	0xFF0
 11428                           postinc0	equ	0xFEE
 11429                           fsr0h	equ	0xFEA
 11430                           fsr0l	equ	0xFE9
 11431                           wreg	equ	0xFE8
 11432                           indf1	equ	0xFE7
 11433                           postdec1	equ	0xFE5
 11434                           fsr1h	equ	0xFE2
 11435                           fsr1l	equ	0xFE1
 11436                           indf2	equ	0xFDF
 11437                           postinc2	equ	0xFDE
 11438                           postdec2	equ	0xFDD
 11439                           fsr2h	equ	0xFDA
 11440                           fsr2l	equ	0xFD9
 11441                           status	equ	0xFD8


Data Sizes:
    Strings     455
    Constant    0
    Data        1
    BSS         434
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     52      78
    BANK0           160     82     107
    BANK1           256      0     256
    BANK2           256      0     128
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    nexaTx@s	PTR unsigned char  size(2) Largest target is 32
		 -> main@line(BANK0[32]), 

    outputRaw@settingsp	PTR struct . size(2) Largest target is 12
		 -> main@settings(BANK0[12]), 

    wavemanTx@s	PTR unsigned char  size(2) Largest target is 32
		 -> main@line(BANK0[32]), 

    uart_puts@s	PTR const unsigned char  size(2) Largest target is 43
		 -> STR_66(CODE[3]), STR_65(CODE[3]), STR_64(CODE[3]), STR_63(CODE[3]), 
		 -> uart_put_int@buffer(BANK0[7]), STR_62(CODE[43]), STR_61(CODE[43]), STR_60(CODE[6]), 
		 -> STR_59(CODE[6]), STR_58(CODE[6]), STR_57(CODE[6]), STR_56(CODE[6]), 
		 -> STR_55(CODE[6]), STR_54(CODE[6]), STR_53(CODE[6]), STR_52(CODE[6]), 
		 -> STR_51(CODE[6]), STR_50(CODE[6]), STR_49(CODE[6]), STR_48(CODE[6]), 
		 -> STR_47(CODE[6]), STR_46(CODE[3]), STR_45(CODE[16]), STR_44(CODE[3]), 
		 -> STR_43(CODE[15]), STR_42(CODE[23]), STR_41(CODE[9]), STR_40(CODE[21]), 
		 -> STR_39(CODE[19]), STR_38(CODE[19]), STR_37(CODE[12]), STR_36(CODE[3]), 
		 -> STR_35(CODE[14]), STR_34(CODE[12]), STR_33(CODE[3]), STR_32(CODE[14]), 
		 -> STR_31(CODE[12]), STR_30(CODE[3]), STR_29(CODE[14]), STR_28(CODE[11]), 
		 -> STR_27(CODE[3]), STR_26(CODE[14]), STR_25(CODE[3]), STR_24(CODE[20]), 
		 -> STR_23(CODE[3]), STR_22(CODE[24]), STR_21(CODE[8]), STR_20(CODE[3]), 
		 -> STR_19(CODE[15]), STR_18(CODE[8]), STR_17(CODE[3]), STR_16(CODE[14]), 
		 -> STR_15(CODE[3]), STR_14(CODE[15]), STR_13(CODE[7]), STR_12(CODE[3]), 
		 -> STR_11(CODE[15]), STR_10(CODE[8]), STR_9(CODE[32]), STR_8(CODE[3]), 
		 -> STR_7(CODE[6]), STR_6(CODE[3]), STR_5(CODE[3]), STR_4(CODE[3]), 
		 -> STR_3(CODE[3]), STR_2(CODE[3]), STR_1(CODE[3]), 

    loadEeprom@settingsp	PTR struct . size(2) Largest target is 12
		 -> main@settings(BANK0[12]), 

    saveEeprom@settingsp	PTR struct . size(2) Largest target is 12
		 -> main@settings(BANK0[12]), 

    loadDefaults@settingsp	PTR struct . size(2) Largest target is 12
		 -> main@settings(BANK0[12]), 

    kangthaiTx@s	PTR unsigned char  size(2) Largest target is 32
		 -> main@line(BANK0[32]), 

    parseCmd@settingsp	PTR struct . size(2) Largest target is 12
		 -> main@settings(BANK0[12]), 

    parseCmd@linep	PTR unsigned char  size(2) Largest target is 32
		 -> main@line(BANK0[32]), 

    parseSettings@linep	PTR unsigned char  size(2) Largest target is 32
		 -> main@line(BANK0[32]), 

    parseSettings@settingsp	PTR struct . size(2) Largest target is 12
		 -> main@settings(BANK0[12]), 

    gaoTx@s	PTR unsigned char  size(2) Largest target is 32
		 -> main@line(BANK0[32]), 


Critical Paths under _main in COMRAM

    _uart_init->___lldiv
    _startupBlinkLed->_delayms
    _parseCmd->_parseSettings
    _wavemanTx->___wmul
    _parseSettings->_uart_put_int
    _saveEeprom->_Write_b_eep
    _loadEeprom->_Read_b_eep
    _loadEeprom->_loadDefaults
    _enter_tx->_delayms
    _enter_rx->_delayms
    _enter_rx->_uart_puts
    _outputRaw->_uart_put
    _nexaDecode->___awdiv
    _nexaCodeDecode->_uart_puts
    _gaoDecode->_gaoPrint
    _gaoPrint->_uart_puts
    _esicDecode->_esicPrint
    _esicPrint->_uart_put_int
    _uart_put_int->___aldiv
    ___aldiv->___lmul
    _doroDecode->_uart_puts
    _uart_puts->_uart_put
    _uart_put_hex->_uart_put

Critical Paths under _intRoutineHigh in COMRAM

    _intRoutineHigh->_sample_interrupt
    _intRoutineHigh->_uart_interrupt

Critical Paths under _main in BANK0

    _parseSettings->_uart_put_int
    _esicDecode->_esicPrint
    _esicPrint->_uart_put_int

Critical Paths under _intRoutineHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _intRoutineHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _intRoutineHigh in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _intRoutineHigh in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _intRoutineHigh in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _intRoutineHigh in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _intRoutineHigh in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _intRoutineHigh in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _intRoutineHigh in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _intRoutineHigh in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _intRoutineHigh in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _intRoutineHigh in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _intRoutineHigh in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _intRoutineHigh in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _intRoutineHigh in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _intRoutineHigh in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                50    50      0  120678
                                             32 BANK0     50    50      0
                         _doroDecode
                           _enter_rx
                         _esicDecode
                          _gaoDecode
                      _hardware_init
                         _loadEeprom
                     _nexaCodeDecode
                         _nexaDecode
                          _outputRaw
                           _parseCmd
                        _sample_init
                         _sample_pop
                        _sample_tick
                    _startupBlinkLed
                           _uart_get
                    _uart_in_waiting
                          _uart_init
                          _uart_puts
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            8     4      4     399
                                             29 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _uart_in_waiting                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _uart_get                                             3     3      0      23
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _startupBlinkLed                                      1     1      0     348
                                             21 COMRAM     1     1      0
                            _delayms
 ---------------------------------------------------------------------------------
 (1) _sample_tick                                          6     4      2      45
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _sample_pop                                           8     4      4      23
                                             16 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _sample_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _parseCmd                                             5     0      5   64768
                                             12 BANK0      5     0      5
                            _delayms
                           _enter_rx
                           _enter_tx
                              _gaoTx
                         _kangthaiTx
                             _nexaTx
                      _parseSettings
                          _uart_puts
                          _wavemanTx
 ---------------------------------------------------------------------------------
 (2) _wavemanTx                                           13    10      3    9331
                                             22 COMRAM    13    10      3
                             ___wmul
                           _enter_rx
                           _enter_tx
                            _reverse
                          _waitTimer
 ---------------------------------------------------------------------------------
 (3) _reverse                                              2     2      0     115
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     287
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _parseSettings                                        6     1      5   15663
                                             46 COMRAM     6     1      5
                       _loadDefaults
                         _loadEeprom
                             _readAd
                         _saveEeprom
                           _uart_put
                       _uart_put_int
                          _uart_puts
 ---------------------------------------------------------------------------------
 (3) _saveEeprom                                           3     1      2     394
                                             20 COMRAM     3     1      2
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (4) _Write_b_eep                                          4     1      3     218
                                             16 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (4) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _readAd                                              10     8      2     139
                                             16 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (3) _loadEeprom                                           3     1      2     826
                                             18 COMRAM     3     1      2
                         _Read_b_eep
                       _loadDefaults
 ---------------------------------------------------------------------------------
 (4) _loadDefaults                                         2     0      2     392
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _Read_b_eep                                           2     0      2     172
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _nexaTx                                              25    21      4    9439
                                             21 COMRAM    25    21      4
                         _asciiToHex
                           _enter_rx
                           _enter_tx
                          _waitTimer
 ---------------------------------------------------------------------------------
 (2) _kangthaiTx                                          21    18      3    9062
                                             21 COMRAM    21    18      3
                           _enter_rx
                           _enter_tx
                          _waitTimer
 ---------------------------------------------------------------------------------
 (2) _gaoTx                                               19    16      3    9068
                                             21 COMRAM    19    16      3
                         _asciiToHex
                           _enter_rx
                           _enter_tx
                          _waitTimer
 ---------------------------------------------------------------------------------
 (3) _waitTimer                                            4     2      2    2499
                                             16 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _enter_tx                                             0     0      0     302
                         _dataPinOut
                            _delayms
 ---------------------------------------------------------------------------------
 (4) _dataPinOut                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _enter_rx                                             0     0      0    5557
                          _dataPinIn
                            _delayms
                          _uart_puts
 ---------------------------------------------------------------------------------
 (2) _delayms                                              5     3      2     302
                                             16 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (4) _dataPinIn                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _asciiToHex                                           1     1      0      46
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _outputRaw                                            8     3      5     448
                                             19 COMRAM     8     3      5
                           _uart_put
 ---------------------------------------------------------------------------------
 (1) _nexaDecode                                          24    23      1    7567
                                             24 COMRAM    24    23      1
                            ___awdiv
                         _blinkRxLed
                           _uart_put
                       _uart_put_hex
                          _uart_puts
 ---------------------------------------------------------------------------------
 (1) _nexaCodeDecode                                       6     5      1    6144
                                             21 COMRAM     6     5      1
                         _blinkRxLed
                           _uart_put
                       _uart_put_hex
                          _uart_puts
 ---------------------------------------------------------------------------------
 (1) _hardware_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _gaoDecode                                            4     3      1    5982
                                             34 COMRAM     4     3      1
                           _gaoPrint
 ---------------------------------------------------------------------------------
 (2) _gaoPrint                                            13     9      4    5688
                                             21 COMRAM    13     9      4
                         _blinkRxLed
                           _uart_put
                       _uart_put_hex
                          _uart_puts
 ---------------------------------------------------------------------------------
 (1) _esicDecode                                           1     1      0   16175
                                             50 COMRAM     1     1      0
                          _esicPrint
 ---------------------------------------------------------------------------------
 (2) _esicPrint                                           24    20      4   16051
                                             46 COMRAM     4     0      4
                                             12 BANK0     20    20      0
                            ___aldiv
                            ___almod
                            ___awdiv
                             ___lmul
                         _blinkRxLed
                           _uart_put
                       _uart_put_int
                          _uart_puts
 ---------------------------------------------------------------------------------
 (3) _uart_put_int                                        16    14      2    7248
                                             42 COMRAM     4     2      2
                                              0 BANK0     12    12      0
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv (ARG)
                            ___lwdiv
                            ___lwmod
                             _readAd (ARG)
                          _uart_puts
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             16 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     549
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     450
                                             16 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     940
                                             16 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) ___almod                                             10     2      8     424
                                             16 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     556
                                             28 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _doroDecode                                           5     4      1    5735
                                             21 COMRAM     5     4      1
                         _blinkRxLed
                       _uart_put_hex
                          _uart_puts
 ---------------------------------------------------------------------------------
 (1) _uart_puts                                            2     0      2    5255
                                             19 COMRAM     2     0      2
                           _uart_put
 ---------------------------------------------------------------------------------
 (2) _uart_put_hex                                         1     1      0     124
                                             19 COMRAM     1     1      0
                           _uart_put
 ---------------------------------------------------------------------------------
 (2) _uart_put                                             3     3      0      31
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _blinkRxLed                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _intRoutineHigh                                      14    14      0       0
                                              2 COMRAM    14    14      0
                   _sample_interrupt
                     _uart_interrupt
 ---------------------------------------------------------------------------------
 (7) _uart_interrupt                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _sample_interrupt                                     2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _doroDecode
     _blinkRxLed
     _uart_put_hex
       _uart_put
     _uart_puts
       _uart_put
   _enter_rx
     _dataPinIn
     _delayms
     _uart_puts
       _uart_put
   _esicDecode
     _esicPrint
       ___aldiv
         ___lmul (ARG)
       ___almod
       ___awdiv
       ___lmul
       _blinkRxLed
       _uart_put
       _uart_put_int
         ___aldiv (ARG)
           ___lmul (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
         _readAd (ARG)
         _uart_puts (ARG)
           _uart_put
       _uart_puts
         _uart_put
   _gaoDecode
     _gaoPrint
       _blinkRxLed
       _uart_put
       _uart_put_hex
         _uart_put
       _uart_puts
         _uart_put
   _hardware_init
   _loadEeprom
     _Read_b_eep
     _loadDefaults
   _nexaCodeDecode
     _blinkRxLed
     _uart_put
     _uart_put_hex
       _uart_put
     _uart_puts
       _uart_put
   _nexaDecode
     ___awdiv
     _blinkRxLed
     _uart_put
     _uart_put_hex
       _uart_put
     _uart_puts
       _uart_put
   _outputRaw
     _uart_put
   _parseCmd
     _delayms
     _enter_rx
       _dataPinIn
       _delayms
       _uart_puts
         _uart_put
     _enter_tx
       _dataPinOut
       _delayms
     _gaoTx
       _asciiToHex
       _enter_rx
         _dataPinIn
         _delayms
         _uart_puts
           _uart_put
       _enter_tx
         _dataPinOut
         _delayms
       _waitTimer
     _kangthaiTx
       _enter_rx
         _dataPinIn
         _delayms
         _uart_puts
           _uart_put
       _enter_tx
         _dataPinOut
         _delayms
       _waitTimer
     _nexaTx
       _asciiToHex
       _enter_rx
         _dataPinIn
         _delayms
         _uart_puts
           _uart_put
       _enter_tx
         _dataPinOut
         _delayms
       _waitTimer
     _parseSettings
       _loadDefaults
       _loadEeprom
         _Read_b_eep
         _loadDefaults
       _readAd
       _saveEeprom
         _Busy_eep
         _Write_b_eep
       _uart_put
       _uart_put_int
         ___aldiv (ARG)
           ___lmul (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
         _readAd (ARG)
         _uart_puts (ARG)
           _uart_put
       _uart_puts
         _uart_put
     _uart_puts
       _uart_put
     _wavemanTx
       ___wmul
       _enter_rx
         _dataPinIn
         _delayms
         _uart_puts
           _uart_put
       _enter_tx
         _dataPinOut
         _delayms
       _reverse
       _waitTimer
   _sample_init
   _sample_pop
   _sample_tick
   _startupBlinkLed
     _delayms
   _uart_get
   _uart_in_waiting
   _uart_init
     ___lldiv
   _uart_puts
     _uart_put

 _intRoutineHigh (ROOT)
   _sample_interrupt
   _uart_interrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      80       9       50.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     52      6B       5       66.9%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     34      4E       1       82.1%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     239      32        0.0%
DATA                 0      0     239       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Dec 25 21:36:45 2015

                       l32 1BF0               ___awdiv@sign 0016        ___wmul@multiplicand 0013  
           nexaTx@data_len 001F        sample_tick@rssitemp 0015           esicDecode@nrbits 0046  
                      l110 1058                        l112 1080                        l113 10F2  
                      l109 103C                        l230 27F2                        l312 1896  
                      l155 19B2                        l236 2830                        l260 27B0  
                      l333 13AA                        l334 13E2                        l270 22FC  
                      l521 2618                        l329 136C                        l269 233E  
                      l710 0E6A                        l560 154E                        l713 0EB4  
                      l561 157E                        l563 15A0                        l636 2468  
                      l662 161E                        l399 11B0                        l809 2716  
                      l768 0BFA                        l778 29B8                        _GIE 007F97  
            nexaTx@resends 0019          esicDecode@esicbit 0045       __size_of_Write_b_eep 0040  
                      prod 000FF3                        wreg 000FE8               __CFG_LVP$OFF 000000  
                     l1333 24DC                       l1270 2232                       l1343 26DE  
                     l3300 299C                       l3302 29A2                       l3142 27DE  
                     l4102 21DA                       l3400 256E                       l4104 21E8  
                     l4114 2222                       l4106 21F0                       l3340 2848  
                     l3430 1C7A                       l3510 2138                       l3414 24F8  
                     l5110 1D96                       l5102 1D52                       l5030 0FF8  
                     l5014 0F88                       l5120 1DFA                       l5040 1050  
                     l5200 0356                       l3352 2860                       l3344 2850  
                     l3442 1CB6                       l3522 2160                       l3418 250E  
                     l5114 1DC4                       l5034 1032                       l5026 0FC0  
                     l5018 0F90                       l3362 22F6                       l3444 1CC4  
                     l3436 1C94                       l3524 216A                       l3516 214A  
                     l5052 1078                       l3372 2338                       l5220 0432  
                     l5212 03DA                       l5204 0382                       l3348 2858  
                     l4332 27BC                       l3462 1D26                       l3454 1CFE  
                     l3446 1CCC                       l3542 21AC                       l3534 2190  
                     l3526 2172                       l5118 1DF2                       l3358 22E2  
                     l3382 2736                       l6030 11C6                       l5240 050E  
                     l5232 04B6                       l5224 045E                       l5216 0406  
                     l5208 03AE                       l5304 15BE                       l6024 11A0  
                     l3458 1D0E                       l3490 20E6                       l3482 20AA  
                     l3474 2082                       l3538 219C                       l5082 10EC  
                     l5066 10A2                       l5090 1112                       l3394 2560  
                     l5314 15E4                       l6050 1232                       l6042 1204  
                     l6034 11D8                       l6018 1166                       l5500 1B8A  
                     l3484 20B8                       l5076 10D2                       l5068 10B0  
                     l5412 12DE                       l5324 0D1E                       l5252 055C  
                     l5244 0528                       l5236 04E2                       l5228 048A  
                     l6060 1260                       l3486 20C0                       l3494 20F6  
                     l3478 2098                       l5078 10E0                       l5430 1334  
                     l5406 0F66                       l5342 0DE6                       l5334 0D74  
                     l5318 15F4                       l6038 11EE                       l6046 121A  
                     l5512 1BAC                       l5424 1328                       l5416 12E6  
                     l5328 0D26                       l5248 0542                       l5280 1544  
                     l6056 124C                       l6072 12B8                       l5530 1BDE  
                     l3498 210E                       l5098 1D4A                       l5442 139C  
                     l5426 132C                       l5354 0E60                       l5258 0580  
                     l5290 1576                       l6066 1294                       l5524 1BCC  
                     l5508 1BA4                       l5620 1926                       l5460 13F6  
                     l5444 13A0                       l5436 137A                       l5380 0EE4  
                     l5348 0E14                       l5700 17BA                       l4732 247E  
                     l6068 129C                       l5518 1BBC                       l5526 1BD2  
                     l4910 1ABE                       l5606 1F94                       l5630 1958  
                     l5622 1930                       l5470 1426                       l5462 1404  
                     l5454 13DA                       l5382 0EF2                       l5366 0E9C  
                     l5710 1830                       l4726 246C                       l5552 1C54  
                     l5536 1BF4                       l4912 1AD4                       l4904 1A92  
                     l5640 1984                       l5480 1450                       l5392 0F22  
                     l5384 0F00                       l5704 17EC                       l4752 28EA  
                     l4850 25C6                       l4906 1A9C                       l5562 1EF4  
                     l5650 19A0                       l5394 0F30                       l5714 1862  
                     l4860 24AA                       l5580 1F28                       l5572 1F14  
                     l5564 1EFA                       l5660 19C6                       l5636 197C  
                     l5820 0AAC                       l5740 2398                       l5732 2356  
                     l5468 1418                       l5484 1460                       l5716 1870  
                     l5708 1800                       l4838 2620                       l4846 259A  
                     l4870 24D0                       l4862 24B2                       l4918 1B22  
                     l5574 1F18                       l5654 19AC                       l5646 1994  
                     l5750 09DC                       l5398 0F3E                       l5718 189A  
                     l5726 18B2                       l4880 26B4                       l5576 1F1E  
                     l5672 19F6                       l5656 19B8                       l5904 1618  
                     l5824 0AB0                       l5808 0A78                       l5760 09F6  
                     l5498 1B86                       l4858 24A0                       l4882 26BC  
                     l4954 065A                       l5594 1F74                       l5586 1F48  
                     l5666 19E0                       l5914 1638                       l5850 0BAC  
                     l4948 0610                       l5588 1F4E                       l5684 1A36  
                     l5668 19E6                       l5692 1A4E                       l5932 1668  
                     l5924 1652                       l5860 0BF2                       l5780 0A30  
                     l5748 09D0                       l4894 2936                       l4886 26D2  
                     l4878 26AA                       l5598 1F7E                       l5678 1A24  
                     l5942 1684                       l5838 0AFE                       l5774 0A1C  
                     l5854 0BB2                       l5872 0C72                       l5768 0A0C  
                     l5856 0BE6                       l5696 1788                       l4994 091C  
                     l5890 0CF2                       l5882 0CBE                       l5956 16A6  
                     l5972 16DE                       l5876 0C86                       l5788 0A44  
                     l5966 16D2                       l5974 1706                       l5798 0A5E  
                     l5968 16D8                       l5896 0D04                       l5994 176A  
                     l5996 1772                       l5988 1758                       STR_1 FFFB  
                     STR_2 FE7F                       STR_3 FFF8                       STR_4 FE7F  
                     STR_5 FFF5                       STR_6 FE7F                       STR_7 FFE9  
                     STR_8 FE7F                       STR_9 FE62                       _CREN 007D5C  
                     _PIE1 000F9D                       u6005 0E3C                       u4430 27BA  
                     u5240 28FC                       u5241 28F8                       u5430 25BC  
                     u5440 25E8                       u2795 2722                       u5620 06F4  
                     u2796 2724                       _RCIF 007CF5                       u5437 25B2  
                     u4590 2276                       u5447 25DE                       u5640 07AA  
                     u7080 0CA6                       u5625 06E8                       u7065 0C06  
                     u5650 07F6                       u5635 0726                       u4595 226C  
                     u5645 079E                       u7325 1738                       u7085 0C9C  
                     u6534 191E                       u6375 1C26                       u5655 07EA  
                     u5575 0642                       u5815 1D6C                       u6535 191A  
                     u5665 0898                       u5825 1D7E                       _OERR 007D59  
                     u5595 0680                       u7507 27E4                       u6564 194C  
                     u6565 1948                       u5695 0FAE                       u5935 0D38  
                     u6594 1974                       u6595 1970                       u5955 0D86  
                     u5965 0DC0                       _TXIE 007CEC                       _TXIF 007CF4  
                     _main 1120                       fsr0h 000FEA                       fsr1h 000FE2  
                     fsr0l 000FE9                       fsr2h 000FDA                       indf1 000FE7  
                     fsr1l 000FE1                       indf2 000FDF                       fsr2l 000FD9  
                     _rxip 0037                       _rxop 0039                       _txip 003B  
                     _txop 003D                       pclat 000FFA                       prodh 000FF4  
                     prodl 000FF3                       start 0082           ??_uart_interrupt 0001  
             ___param_bank 000010          ??_uart_in_waiting 0011            __end_of___aldiv 1D3A  
          __end_of___almod 2122                      ?_main 0001            __end_of___awdiv 21B8  
                    _EEADR 000FA9                      STR_10 FFDA                      STR_11 FF1F  
                    STR_20 FE7F                      STR_12 FE7F                      STR_13 FFE2  
                    STR_21 FFCA                      STR_30 FE7F                      STR_14 FF3D  
                    STR_22 FE82                      STR_23 FE7F                      STR_15 FE7F  
                    STR_31 FF9E                      STR_32 FF68                      STR_16 FF5A  
                    STR_24 FEC6                      STR_40 FEB1                      STR_33 FE7F  
                    STR_25 FE7F                      STR_17 FE7F                      STR_41 FFC1  
                    STR_50 FFE9                      STR_18 FFD2                      STR_34 FF92  
                    STR_26 FF84                      STR_42 FE9A                      STR_27 FE7F  
                    STR_51 FFE9                      STR_35 FF4C                      STR_19 FF2E  
                    STR_43 FF10                      STR_44 FE7F                      STR_36 FE7F  
                    STR_60 FFE9                      STR_52 FFE9                      STR_28 FFB6  
                    STR_53 FFE9                      STR_37 FFAA                      STR_29 FF76  
                    STR_45 FF00                      STR_61 FE37                      STR_46 FE7F  
                    STR_54 FFE9                      STR_62 FE37                      STR_38 FEED  
                    STR_55 FFE9                      STR_47 FFE9                      STR_63 FFF2  
                    STR_39 FEDA                      STR_64 FE7F                      STR_56 FFE9  
                    STR_48 FFE9                      STR_57 FFE9                      STR_49 FFE9  
                    STR_65 FFEF                      STR_66 FE7F                      STR_58 FFE9  
                    STR_59 FFE9                      _ANSEL 000F7E            __end_of___lldiv 2244  
                    _T0CON 000FD5            ___awdiv@divisor 0013                      _T1CON 000FCD  
                    _LATB2 007C52                      _LATB3 007C53                      _T3CON 000FB1  
                    _LATC4 007C5C                      _LATC5 007C5D            __end_of___lwdiv 24E6  
          __end_of___lwmod 26E8                kangthaiTx@j 0029                kangthaiTx@s 0016  
                    i2l506 2420                      i2l627 1ED4            ___awdiv@counter 0015  
                    _RCREG 000FAE                      _RCSTA 000FAB            ??_hardware_init 0011  
                    _TMR0H 000FD7                      _TMR1H 000FCF                      _TMR0L 000FD6  
                    _TMR3H 000FB3                      _TMR1L 000FCE                      _TMR3L 000FB2  
                    _SPBRG 000FAF                      _PORTB 000F81        outputRaw@last_above 00C9  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
                    _TXREG 000FAD               main@line_len 00A0   gaoDecode@rf_pulse_length 0023  
                    _TXSTA 000FAC  esicDecode@rf_pulse_length 0033            __end_of_delayms 2808  
      ___lmul@multiplicand 0015             Read_b_eep@badd 0011              ?_loadDefaults 0011  
                    _gaoTx 0F74     Write_b_eep@GIE_BIT_VAL 0014              parseCmd@linep 006C  
                    main@c 00A1                      main@s 00A2                      tablat 000FF5  
             main@settings 00A6            __end_of_reverse 2866                      status 000FD8  
         gaoDecode@symbols 004B             __CFG_MCLRE$OFF 000000            __initialization 2648  
            gaoDecode@data 00BE               __end_of_main 12CA   __size_of_startupBlinkLed 0036  
               _Read_b_eep 295C           __end_of_Busy_eep 29BE   __end_of_sample_interrupt 1EDA  
              readAd@value 0015                loadEeprom@j 0015              wavemanTx@data 001F  
            wavemanTx@temp 0022                     ??_main 0035              __activetblptr 000002  
           ??_loadDefaults 0013               ?_sample_init 0001               ?_sample_tick 0011  
                   ?_gaoTx 0016                     _ADCON0 000FC2                     _ADCON1 000FC1  
                   _ADCON2 000FC0                     _ADRESH 000FC4                     _EEADRH 000FAA  
                   _ADRESL 000FC3                     _EEDATA 000FA8                     _EECON2 000FA7  
           delayms@counter 0014           ___awdiv@dividend 0011                     _ANSELH 000F7F  
           __CFG_WDTEN$OFF 000000                     i2l4408 23E4                     i2l4390 1E8E  
                   i2l4386 1E76                     _INTCON 000FF2                     _OSCCON 000FD3  
                   _TMR0IF 007F92                     _TMR1IF 007CF0                     _TMR3IF 007D09  
                   _TMR1ON 007E68                     _TMR3ON 007D88        esicPrint@paritycalc 0076  
                   _WDTCON 000FD1           __end_of_gaoPrint 1E0C            esicPrint@parity 0075  
     nexaCodeDecode@length 0016                     ___lmul 24E6                  ??___aldiv 0025  
   gaoDecode@preamble_data 00C5                  ??___almod 0019                     ___wmul 2890  
                ??___awdiv 0015                  ??___lldiv 0019           __end_of_enter_rx 28DE  
         __end_of_enter_tx 2990                  ??___lwdiv 0015                  ??___lwmod 0015  
                   _readAd 22CA           wavemanTx@resends 0019                     _nexaTx 0D16  
                   gaoTx@j 0028                     gaoTx@s 0016                     clear_0 264E  
                   clear_1 265C                     clear_2 266E                     clear_3 267A  
         ___awdiv@quotient 0017                  ??_delayms 0013           __end_of_parseCmd 18F6  
              nexaDecode@j 002E          gaoDecode@rf_state 0026               __pdataCOMRAM 004E  
         __end_of_uart_get 2890           __end_of_uart_put 2648               __mediumconst FE36  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
                ??_reverse 0011            __CFG_HFOFST$OFF 000000                 __accesstop 0060  
  __end_of__initialization 2692             esicDecode@data 00BA            __CFG_PBADEN$OFF 000000  
              nexaTx@bitnr 002D        loadEeprom@settingsp 0013              ___rparam_used 000001  
           __pcstackCOMRAM 0001         __size_of_gaoDecode 016C         __size_of_dataPinIn 0006  
            __end_of_gaoTx 1120                ?_Read_b_eep 0011             gaoDecode@state 00C6  
        outputRaw@rf_state 001B          ??_startupBlinkLed 0016       esicPrint@packetcount 0070  
            esicPrint@data 002F         nexaCodeDecode@data 003F           startupBlinkLed@j 0016  
           wavemanTx@bitnr 0021              esicPrint@temp 007C         nexaCodeDecode@unit 001A  
                  ??_gaoTx 0019         __size_of_esicPrint 03E8    esicDecode@preamble_data 0047  
               _dataPinOut 29BE                 __pbssBANK0 00B2                 __pbssBANK1 0100  
               __pbssBANK2 0200         doroDecode@rf_state 001A                  ?_Busy_eep 0001  
          _uart_in_waiting 28DE                saveEeprom@j 0017       __end_of_loadDefaults 2064  
                  ?___lmul 0011                 _blinkRxLed 29A8                    ?___wmul 0011  
               _asciiToHex 2990                    ?_readAd 0011                    _BAUDCON 000FB8  
                  ?_nexaTx 0016             ___lmul@product 0019              ??_Write_b_eep 0014  
       __size_of_waitTimer 0032         __size_of_uart_init 0086         __size_of_uart_puts 0058  
                ?_gaoPrint 0016         __size_of_wavemanTx 0194                 _esicDecode 1EDA  
   __size_of_parseSettings 055C                    _OSCTUNE 000F9B                 _doroDecode 1B64  
        __end_of_gaoDecode 1A62                sample_pop@s 0015          __end_of_dataPinIn 29CA  
     __size_of_sample_init 001A       __size_of_sample_tick 0064        __size_of_Read_b_eep 001A  
       __size_of_outputRaw 0070                 _kangthaiTx 12CA                  ?_enter_rx 0001  
                ?_enter_tx 0001           esicPrint@channel 0072                 ??_Busy_eep 0011  
                ?_parseCmd 006C           esicPrint@counter 0077                 _loadEeprom 2540  
                  __Hparam 0000                    __Lparam 0000           esicPrint@lowbatt 0074  
                ?_uart_get 0001                  ?_uart_put 0001                    ___aldiv 1C5C  
                  ___almod 2064                    ___awdiv 2122            __size_of___lmul 005A  
    parseSettings@line_len 0031                    ___lldiv 21B8            __size_of___wmul 0028  
        __end_of_esicPrint 09CA                    ___lwdiv 248A                    ___lwmod 269C  
               _nexaDecode 09CA    __size_of_intRoutineHigh 007A            __size_of_readAd 007E  
                  __pcinit 2648            __size_of_nexaTx 025E                    __ramtop 1000  
        ?_sample_interrupt 0001                    _delayms 27D4    __size_of_nexaCodeDecode 0184  
                  __ptext0 1120                    __ptext1 2244                    __ptext2 21B8  
                  __ptext3 28DE                    __ptext4 2866                    __ptext5 279E  
                  __ptext6 2426                    __ptext7 2764                    __ptext8 2942  
                  __ptext9 1786         ??_sample_interrupt 0001         parseSettings@linep 002F  
               gaoTx@bitnr 0027           ___aldiv@dividend 001D                 ??_gaoPrint 001A  
                  _samples 0180      __end_of_hardware_init 2924                    _reverse 283A  
      __end_of_Write_b_eep 2728               nexaDecode@id 0029                 _saveEeprom 2728  
          kangthaiTx@j_379 002A                ?_dataPinOut 0001       end_of_initialization 2692  
  __end_of_uart_in_waiting 2902                    readAd@j 0017              gaoTx@preamble 0026  
          kangthaiTx@bitnr 0024                 ??_enter_rx 0016                 ??_enter_tx 0016  
     esicPrint@temperature 0078                 _sample_pop 2764              __Lmediumconst FE36  
                  nexaTx@j 002E                 _samples_ip 0041                    nexaTx@s 0016  
               _samples_op 0042             doroDecode@data 00C2          __end_of_waitTimer 283A  
               ??_parseCmd 0035          __end_of_uart_init 22CA            ___lldiv@divisor 0015  
            ?_uart_put_hex 0001              ?_uart_put_int 002B          __end_of_uart_puts 25F0  
          ___lldiv@counter 001D              _parseSettings 0086          __end_of_wavemanTx 1602  
               ??_uart_get 0011         gaoDecode@nrsymbols 004A                 ??_uart_put 0011  
         ___aldiv@quotient 0027                    postdec1 000FE5                    postdec2 000FDD  
              ?_blinkRxLed 0001                    postinc0 000FEE                    postinc2 000FDE  
              ?_asciiToHex 0001          __end_of_outputRaw 23B8    __size_of_uart_interrupt 006E  
          nexaDecode@power 0027            nexaDecode@state 004E                ?_esicDecode 0001  
              ?_doroDecode 0016            esicDecode@state 0048               nexaTx@resend 0020  
              ?_kangthaiTx 0016      __size_of_loadDefaults 00BE             ??_uart_put_hex 0014  
           ??_uart_put_int 002D                ?_loadEeprom 0013             ?_parseSettings 002F  
          _startupBlinkLed 279E               ??_Read_b_eep 0013             __end_of___lmul 2540  
              ?_nexaDecode 0019             __end_of___wmul 28B8        __size_of_dataPinOut 0006  
          gaoDecode@gaobit 0049              __pidataCOMRAM 29CA         outputRaw@last_rssi 00CA  
           __end_of_readAd 2348                _Write_b_eep 26E8             __end_of_nexaTx 0F74  
          gaoDecode@nrbits 00C4         outputRaw@rf_length 0014        start_initialization 2648  
             _loadDefaults 1FA6                ?_saveEeprom 0015                 readAd@temp 0019  
      __size_of_blinkRxLed 000E        __size_of_asciiToHex 0018           ?_uart_in_waiting 0001  
       __end_of_Read_b_eep 2976                ?_sample_pop 0011         outputRaw@settingsp 0017  
        __size_of_Busy_eep 0008             esicPrint@house 0071             waitTimer@value 0011  
      nexaCodeDecode@state 004C        __size_of_esicDecode 00CC                   ??___lmul 0019  
                 ??___wmul 0015            wavemanTx@resend 001E        __size_of_doroDecode 00F8  
           _intRoutineHigh 0008                   ??_readAd 0013                   ??_nexaTx 001A  
           _nexaCodeDecode 1602        __size_of_kangthaiTx 01A4                 nexaTx@data 0025  
               nexaTx@temp 0021                __pbssCOMRAM 0035              __pcstackBANK0 0060  
      __size_of_loadEeprom 0058          __size_of_gaoPrint 00D2              outputRaw@rssi 0016  
      __size_of_nexaDecode 034C    __end_of_startupBlinkLed 27D4                  _gaoDecode 18F6  
          ??_parseSettings 0034                  _dataPinIn 29C4         uart_put_int@buffer 0060  
        __size_of_enter_rx 0026               _current_rssi 0035          __size_of_enter_tx 001A  
  nexaCodeDecode@symbol_nr 00C7           ___lwdiv@dividend 0011          __size_of_parseCmd 0170  
                __pintcode 0008     __end_of_intRoutineHigh 0082              __pmediumconst FE36  
                 ?___aldiv 001D                   ?___almod 0011     __end_of_nexaCodeDecode 1786  
                 ?___awdiv 0011                   ?___lldiv 0011                   ?___lwdiv 0011  
                 ?___lwmod 0011        __size_of_saveEeprom 003C          __size_of_uart_get 002A  
        __size_of_uart_put 0058             _uart_interrupt 23B8                   ?_delayms 0011  
         ___almod@dividend 0011                  _esicPrint 05E2        __size_of_sample_pop 003A  
     __end_of_uart_put_hex 2942       __end_of_uart_put_int 1B64              ??_sample_init 0011  
                 ?_reverse 0001              ??_sample_tick 0013           ___lwdiv@quotient 0016  
           __size_of_gaoTx 01AC               ??_dataPinOut 0011                  gaoTx@data 001E  
__size_of_sample_interrupt 00CE                  gaoTx@temp 0022            ___aldiv@divisor 0021  
                gaoPrint@j 0022            ___aldiv@counter 0025                 ?_gaoDecode 0023  
           ___wmul@product 0015                 ?_dataPinIn 0001               gaoTx@resends 0018  
           kangthaiTx@data 0025                  delayms@ms 0011             kangthaiTx@temp 0020  
                _waitTimer 2808           __CFG_WDTPS$32768 000000               ??_blinkRxLed 0011  
          ?_intRoutineHigh 0001          parseCmd@settingsp 006F               ??_asciiToHex 0011  
                _uart_init 2244               gaoPrint@data 0016            ?_nexaCodeDecode 0016  
   __end_of_uart_interrupt 2426                  _uart_puts 2598             nexaDecode@data 00B2  
                _wavemanTx 146E                 uart_puts@s 0014        nexaDecode@dim_found 00C8  
       __end_of_dataPinOut 29C4                 _ADCON0bits 000FC2          ___wmul@multiplier 0011  
               ?_esicPrint 002F            Write_b_eep@badd 0011            Write_b_eep@bdat 0013  
                _outputRaw 2348               ??_esicDecode 0033                 wavemanTx@s 0017  
             ??_doroDecode 0017          ___lmul@multiplier 0011                _INTCON2bits 000FF1  
              _INTCON3bits 000FF0               ??_kangthaiTx 0019         __end_of_blinkRxLed 29B6  
       __end_of_asciiToHex 29A8                   _Busy_eep 29B6        __end_of_sample_init 295C  
      __end_of_sample_tick 248A     nexaCodeDecode@bitstate 001B           ?_startupBlinkLed 0001  
               _EECON1bits 000FA6               ??_loadEeprom 0015          esicPrint@humidity 0073  
                 __Hrparam 0000                   __Lrparam 0000                 ?_waitTimer 0011  
   __size_of_hardware_init 0022                 ?_uart_init 001E          kangthaiTx@resends 0018  
       __end_of_esicDecode 1FA6                 ?_uart_puts 0014            ?_uart_interrupt 0001  
         __size_of___aldiv 00DE           __size_of___almod 00BE               ??_nexaDecode 001A  
         __size_of___awdiv 0096                 ?_wavemanTx 0017           __size_of___lldiv 008C  
                nexaTx@len 0018         __end_of_doroDecode 1C5C           __size_of___lwdiv 005C  
         __size_of___lwmod 004C               ?_Write_b_eep 0011           __size_of_delayms 0034  
       __end_of_kangthaiTx 146E           doroDecode@length 0016                 ?_outputRaw 0014  
         doroDecode@nrbits 0043          uart_put_int@input 002B                   _gaoPrint 1D3A  
        uart_put_int@start 0067            ___lwdiv@divisor 0013              reverse@output 0011  
          ___lwdiv@counter 0015         __end_of_loadEeprom 2598                   __ptext10 146E  
                 __ptext11 283A                   __ptext20 295C                   __ptext12 2890  
                 __ptext21 0D16                   __ptext13 0086                   __ptext30 2990  
                 __ptext22 12CA                   __ptext14 2728                   __ptext31 2348  
                 __ptext23 0F74                   __ptext15 26E8                   __ptext40 269C  
                 __ptext32 09CA                   __ptext24 2808                   __ptext16 29B6  
                 __ptext41 248A                   __ptext33 1602                   __ptext25 2976  
                 __ptext17 22CA                   __ptext50 29A8                   __ptext42 24E6  
                 __ptext34 2902                   __ptext26 29BE                   __ptext18 2540  
                 __ptext43 2122                   __ptext35 18F6                   __ptext27 28B8  
                 __ptext19 1FA6                   __ptext52 23B8                   __ptext44 2064  
                 __ptext36 1D3A                   __ptext28 27D4                   __ptext53 1E0C  
                 __ptext45 1C5C                   __ptext37 1EDA                   __ptext29 29C4  
                 __ptext46 1B64                   __ptext38 05E2                   __ptext47 2598  
                 __ptext39 1A62                   __ptext48 2924                   __ptext49 25F0  
      saveEeprom@settingsp 0015           __size_of_reverse 002C               ??_saveEeprom 0017  
          ___almod@divisor 0015            ___almod@counter 0019        uart_init@spbrg_calc 0022  
                 _enter_rx 28B8                   _enter_tx 2976           parseCmd@line_len 006E  
             ??_sample_pop 0015                ??_gaoDecode 0024     parseSettings@settingsp 0032  
            __size_of_main 01AA         __end_of_nexaDecode 0D16                ??_dataPinIn 0011  
                 _parseCmd 1786            asciiToHex@input 0011                gaoTx@resend 001D  
                uart_get@c 0013                   _uart_get 2866                   _uart_put 25F0  
                uart_put@c 0013         nexaDecode@dimlevel 002D                   _rxbuffer 0100  
    __size_of_uart_put_hex 001E      __size_of_uart_put_int 0102         nexaDecode@bitstate 0030  
                 main@line 0080         __end_of_saveEeprom 2764                   _txbuffer 0200  
              ??_esicPrint 006C         __end_of_sample_pop 279E                 _INTCONbits 000FF2  
       nexaDecode@group_en 0028           kangthaiTx@resend 001F              _hardware_init 2902  
              _sample_init 2942                _sample_tick 2426           uart_put_hex@data 0014  
                 intlevel2 0000           _sample_interrupt 1E0C               reverse@input 0012  
         uart_put_int@temp 0068            doroDecode@state 0044           uart_put_int@stop 006B  
         ___lwmod@dividend 0011           ___lldiv@dividend 0011               _uart_put_hex 2924  
             _uart_put_int 1A62              uart_init@baud 001E   __size_of_uart_in_waiting 0024  
              ??_waitTimer 0013          nexaDecode@channel 0026                ??_uart_init 0022  
              ??_uart_puts 0016                ??_wavemanTx 001A           ___lldiv@quotient 0019  
          ___lwmod@divisor 0013                ??_outputRaw 0019            ___lwmod@counter 0015  
             ___aldiv@sign 0026             ?_hardware_init 0001           nexaDecode@bit_nr 004D  
           gaoPrint@number 001E           nexaDecode@length 0019               ___almod@sign 001A  
        __CFG_FOSC$INTIO67 000000              uart_put_int@j 006A           ??_intRoutineHigh 0003  
         ??_nexaCodeDecode 0017      __end_of_parseSettings 05E2      loadDefaults@settingsp 0011  
